[{"content":"Markdown here\n","description":"test post","id":0,"section":"updates","tags":null,"title":"May 2019","uri":"/ko/updates/2019_may/"},{"content":"Markdown here\n","description":"test post","id":1,"section":"docs","tags":null,"title":"Basic Usage","uri":"/ko/docs/gettingstarted/basicusage/"},{"content":"Markdown here\n","description":"test post","id":2,"section":"updates","tags":null,"title":"April 2019","uri":"/ko/updates/2019_april/"},{"content":"Markdown here\n","description":"test post","id":3,"section":"docs","tags":null,"title":"Configuration","uri":"/ko/docs/gettingstarted/configuration/"},{"content":"Markdown here\n","description":"test post","id":4,"section":"updates","tags":null,"title":"March 2019","uri":"/ko/updates/2019_march/"},{"content":"Markdown here\n","description":"test post","id":5,"section":"docs","tags":null,"title":"Installation","uri":"/ko/docs/gettingstarted/installation/"},{"content":"Markdown here\n","description":"test post","id":6,"section":"updates","tags":null,"title":"February 2019","uri":"/ko/updates/2019_february/"},{"content":"Markdown here\n","description":"test post","id":7,"section":"docs","tags":null,"title":"Quick Start","uri":"/ko/docs/gettingstarted/quickstart/"},{"content":"Markdown here\n","description":"test post","id":8,"section":"updates","tags":null,"title":"January 2019","uri":"/ko/updates/2019_january/"},{"content":"Markdown here\n","description":"test post","id":9,"section":"docs","tags":null,"title":"Related content","uri":"/ko/docs/relatedcontent/"},{"content":"Markdown here\n","description":"test post","id":10,"section":"docs","tags":null,"title":"Page Resources","uri":"/ko/docs/pageresources/"},{"content":"Markdown here\n","description":"test post","id":11,"section":"docs","tags":null,"title":"Page Bundles","uri":"/ko/docs/pagebundles/"},{"content":"Markdown here\n","description":"test post","id":12,"section":"docs","tags":null,"title":"Content Formats","uri":"/ko/docs/contentfortmats/"},{"content":"Markdown here\n","description":"test post","id":13,"section":"docs","tags":null,"title":"Image Processing","uri":"/ko/docs/imageprocessing/"},{"content":"Markdown here\n","description":"test post","id":14,"section":"docs","tags":null,"title":"Shortcodes","uri":"/ko/docs/contentmanagement/shortcodes/"},{"content":"Markdown here\n","description":"test post","id":15,"section":"docs","tags":null,"title":"Frontmatter","uri":"/ko/docs/contentmanagement/frontmatter/"},{"content":"Lorem est tota propiore conpellat pectoribus de\npectora summo. Redit teque digerit hominumque toris verebor lumina non cervice\nsubde tollit usus habet Arctonque, furores quas nec ferunt. Quoque montibus nunc\ncaluere tempus\nThis article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\n\rHeadings The following HTML \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level while \u0026lt;h6\u0026gt; is the lowest.\nH1 H2 H3 H4 H5 H6 Paragraph Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\nBlockquotes The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations.\nBlockquote without attribution  Tiam, ad mint andaepu dandae nostion secatur sequo quae.\nNote that you can use Markdown syntax within a blockquote.\n Blockquote with attribution  Don\u0026rsquo;t communicate by sharing memory, share memory by communicating.\n— Rob Pike1\n Tables Tables aren\u0026rsquo;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.\n   Name Age     Bob 27   Alice 23    Inline Markdown within tables    Inline  Markdown  In  Table     italics bold strikethrough  code    Code Blocks Code block with backticks html\r\u0026lt;!DOCTYPE html\u0026gt;\r\u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt;\r\u0026lt;head\u0026gt;\r\u0026lt;meta charset=\u0026quot;UTF-8\u0026quot;\u0026gt;\r\u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt;\r\u0026lt;/head\u0026gt;\r\u0026lt;body\u0026gt;\r\u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt;\r\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt;\rCode block indented with four spaces \u0026lt;!DOCTYPE html\u0026gt;\r\u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt;\r\u0026lt;head\u0026gt;\r\u0026lt;meta charset=\u0026quot;UTF-8\u0026quot;\u0026gt;\r\u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt;\r\u0026lt;/head\u0026gt;\r\u0026lt;body\u0026gt;\r\u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt;\r\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt;\r Code block with Hugo\u0026rsquo;s internal highlight shortcode 1 2 3 4 5 6 7 8 9 10  \u0026lt;!DOCTYPE html\u0026gt;\r\u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt;\r\u0026lt;head\u0026gt;\r\u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt;\r\u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt;\r\u0026lt;/head\u0026gt;\r\u0026lt;body\u0026gt;\r\u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt;\r\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt;   List Types Ordered List  First item Second item Third item  Unordered List  List item Another item And another item  Nested list  Item  First Sub-item Second Sub-item    Other Elements — abbr, sub, sup, kbd, mark GIF is a bitmap image format.\nH2O\nXn + Yn = Zn\nPress CTRL+ALT+Delete to end the session.\nMost salamanders are nocturnal, and hunt for insects, worms, and other small creatures.\n The above quote is excerpted from Rob Pike\u0026rsquo;s talk during Gopherfest, November 18, 2015. \u0026#x21a9;\u0026#xfe0e;\n  ","description":"","id":16,"section":"blog","tags":["markdown","css","html","themes"],"title":"Markdown Syntax Guide","uri":"/ko/blog/markdown-syntax/"},{"content":"This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\nHeadings The following HTML \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level while \u0026lt;h6\u0026gt; is the lowest.\nH1 H2 H3 H4 H5 H6 Paragraph Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\nBlockquotes The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations.\nBlockquote without attribution  Tiam, ad mint andaepu dandae nostion secatur sequo quae.\nNote that you can use Markdown syntax within a blockquote.\n Blockquote with attribution  Don\u0026rsquo;t communicate by sharing memory, share memory by communicating.\n— Rob Pike1\n Tables Tables aren\u0026rsquo;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.\n   Name Age     Bob 27   Alice 23    Inline Markdown within tables    Inline  Markdown  In  Table     italics bold strikethrough  code    Code Blocks Code block with backticks html\r\u0026lt;!DOCTYPE html\u0026gt;\r\u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt;\r\u0026lt;head\u0026gt;\r\u0026lt;meta charset=\u0026quot;UTF-8\u0026quot;\u0026gt;\r\u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt;\r\u0026lt;/head\u0026gt;\r\u0026lt;body\u0026gt;\r\u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt;\r\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt;\rCode block indented with four spaces \u0026lt;!DOCTYPE html\u0026gt;\r\u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt;\r\u0026lt;head\u0026gt;\r\u0026lt;meta charset=\u0026quot;UTF-8\u0026quot;\u0026gt;\r\u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt;\r\u0026lt;/head\u0026gt;\r\u0026lt;body\u0026gt;\r\u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt;\r\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt;\r Code block with Hugo\u0026rsquo;s internal highlight shortcode 1 2 3 4 5 6 7 8 9 10  \u0026lt;!DOCTYPE html\u0026gt;\r\u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt;\r\u0026lt;head\u0026gt;\r\u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt;\r\u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt;\r\u0026lt;/head\u0026gt;\r\u0026lt;body\u0026gt;\r\u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt;\r\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt;   List Types Ordered List  First item Second item Third item  Unordered List  List item Another item And another item  Nested list  Item  First Sub-item Second Sub-item    Other Elements — abbr, sub, sup, kbd, mark GIF is a bitmap image format.\nH2O\nXn + Yn = Zn\nPress CTRL+ALT+Delete to end the session.\nMost salamanders are nocturnal, and hunt for insects, worms, and other small creatures.\n The above quote is excerpted from Rob Pike\u0026rsquo;s talk during Gopherfest, November 18, 2015. \u0026#x21a9;\u0026#xfe0e;\n  ","description":"Sample article showcasing basic Markdown syntax and formatting for HTML elements.","id":17,"section":"docs","tags":["markdown","css","html","themes"],"title":"Section","uri":"/ko/docs/contentmanagement/sections/"},{"content":"Lorem est tota propiore conpellat pectoribus de\npectora summo. Redit teque digerit hominumque toris verebor lumina non cervice\nsubde tollit usus habet Arctonque, furores quas nec ferunt. Quoque montibus nunc\ncaluere tempus\nHugo ships with several Built-in Shortcodes for rich content, along with a Privacy Config and a set of Simple Shortcodes that enable static and no-JS versions of various social media embeds.\n\rInstagram Simple Shortcode .__h_instagram.card { font-family: -apple-system,BlinkMacSystemFont,\"Segoe UI\",Roboto,Oxygen-Sans,Ubuntu,Cantarell,\"Helvetica Neue\",sans-serif; font-size: 14px; border: 1px solid rgb(219, 219, 219); padding: 0; margin-top: 30px; } .__h_instagram.card .card-header, .__h_instagram.card .card-body { padding: 10px 10px 10px; } .__h_instagram.card img { width: 100%; height: auto; }  koloot.design   View More on Instagram   YouTube Privacy Enhanced Shortcode   Twitter Simple Shortcode .twitter-tweet { font: 14px/1.45 -apple-system,BlinkMacSystemFont,\"Segoe UI\",Roboto,Oxygen-Sans,Ubuntu,Cantarell,\"Helvetica Neue\",sans-serif; border-left: 4px solid #2b7bb9; padding-left: 1.5em; color: #555; } .twitter-tweet a { color: #2b7bb9; text-decoration: none; } blockquote.twitter-tweet a:hover, blockquote.twitter-tweet a:focus { text-decoration: underline; }  “In addition to being more logical, asymmetry has the advantage that its complete appearance is far more optically effective than symmetry.”\n— Jan Tschichold pic.twitter.com/gcv7SrhvJb\n\u0026mdash; Graphic Design History (@DesignReviewed) January 17, 2019 Vimeo Simple Shortcode  .__h_video { position: relative; padding-bottom: 56.23%; height: 0; overflow: hidden; width: 100%; background: #000; } .__h_video img { width: 100%; height: auto; color: #000; } .__h_video .play { height: 72px; width: 72px; left: 50%; top: 50%; margin-left: -36px; margin-top: -36px; position: absolute; cursor: pointer; }  ","description":"","id":18,"section":"blog","tags":["shortcodes","privacy"],"title":"Rich Content","uri":"/ko/blog/rich-content/"},{"content":"Lorem est tota propiore conpellat pectoribus de\npectora summo. Redit teque digerit hominumque toris verebor lumina non cervice\nsubde tollit usus habet Arctonque, furores quas nec ferunt. Quoque montibus nunc\ncaluere tempus\ninhospita parcite confusaque translucet patri vestro qui optatis\nlumine cognoscere flos nubis! Fronde ipsamque patulos Dryopen deorum.\n Exierant elisi ambit vivere dedere Duce pollice Eris modo Spargitque ferrea quos palude  Rursus nulli murmur; hastile inridet ut ab gravi sententia! Nomine potitus\nsilentia flumen, sustinet placuit petis in dilapsa erat sunt. Atria\ntractus malis.\n Comas hunc haec pietate fetum procerum dixit Post torum vates letum Tiresia Flumen querellas Arcanaque montibus omnes Quidem et  Vagus elidunt \nThe Van de Graaf Canon\nMane refeci capiebant unda mulcebat Victa caducifer, malo vulnere contra\ndicere aurato, ludit regale, voca! Retorsit colit est profanae esse virescere\nfurit nec; iaculi matertera et visa est, viribus. Divesque creatis, tecta novat collumque vulnus est, parvas. Faces illo pepulere tempus adest. Tendit flamma, ab opes virum sustinet, sidus sequendo urbis.\nIubar proles corpore raptos vero auctor imperium; sed et huic: manus caeli\nLelegas tu lux. Verbis obstitit intus oblectamina fixis linguisque ausus sperare\nEchionides cornuaque tenent clausit possit. Omnia putatur. Praeteritae refert\nausus; ferebant e primus lora nutat, vici quae mea ipse. Et iter nil spectatae\nvulnus haerentia iuste et exercebat, sui et.\nEurytus Hector, materna ipsumque ut Politen, nec, nate, ignari, vernum cohaesit sequitur. Vel mitis temploque vocatus, inque alis, oculos nomen non silvis corpore coniunx ne displicet illa. Crescunt non unus, vidit visa quantum inmiti flumina mortis facto sic: undique a alios vincula sunt iactata abdita! Suspenderat ego fuit tendit: luna, ante urbem\nPropoetides parte.\n","description":"","id":19,"section":"blog","tags":["markdown","text"],"title":"Placeholder Text","uri":"/ko/blog/placeholder-text/"},{"content":"Lorem est tota propiore conpellat pectoribus de\npectora summo. Redit teque digerit hominumque toris verebor lumina non cervice\nsubde tollit usus habet Arctonque, furores quas nec ferunt. Quoque montibus nunc\ncaluere tempus\nEmoji can be enabled in a Hugo project in a number of ways.\n\rThe emojify function can be called directly in templates or Inline Shortcodes.\nTo enable emoji globally, set enableEmoji to true in your site’s configuration and then you can type emoji shorthand codes directly in content files; e.g.\n🙈 🙈 🙉 🙉 🙊 🙊\nThe Emoji cheat sheet is a useful reference for emoji shorthand codes.\nN.B. The above steps enable Unicode Standard emoji characters and sequences in Hugo, however the rendering of these glyphs depends on the browser and the platform. To style the emoji you can either use a third party emoji font or a font stack; e.g.\n1 2 3  .emoji {\rfont-family: Apple Color Emoji,Segoe UI Emoji,NotoColorEmoji,Segoe UI Symbol,Android Emoji,EmojiSymbols;\r}  ","description":"","id":20,"section":"blog","tags":["emoji"],"title":"Emoji Support","uri":"/ko/blog/emoji-support/"},{"content":"CROSS - RECIBOS v1.1.0  Scroll down for code samples, example requests and responses. Select a language for code samples from the tabs above or the mobile navigation menu.\n API que recoge todas las funcionalidades relativas a los recibos gestionados por la Mutua Madrileña en sus distintos ramos.\nBase URLs:\n https://$(catalog.host)/cross-recibos/api/v1  Email: Javier Moreno Lozano\nAuthentication  API Key (clientIdHeader)  Parameter Name: X-IBM-Client-Id, in: header. student    Recibos Agrupa la funcionalidad relacionada a la operativa de recibos asociados a pólizas\nrecuperarDetalleRecibo \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;https://$(catalog.host)/cross-recibos/api/v1/recibos/{id-recibo}\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;GET\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, \u0026#34;X-IBM-Client-Id\u0026#34;: []string{\u0026#34;API_KEY\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;GET\u0026#34;, \u0026#34;https://$(catalog.host)/cross-recibos/api/v1/recibos/{id-recibo}\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  var headers = { \u0026#39;Accept\u0026#39;:\u0026#39;application/json\u0026#39;, \u0026#39;X-IBM-Client-Id\u0026#39;:\u0026#39;API_KEY\u0026#39; }; $.ajax({ url: \u0026#39;https://$(catalog.host)/cross-recibos/api/v1/recibos/{id-recibo}\u0026#39;, method: \u0026#39;get\u0026#39;, headers: headers, success: function(data) { console.log(JSON.stringify(data)); } })   1 2 3 4  GET https://$(catalog.host)/cross-recibos/api/v1/recibos/{id-recibo} HTTP/1.1 Accept: application/json   GET /recibos/{id-recibo}\nConsulta del detalle de un recibo\nOperación que permite realizar la consulta del detalle de un recibo\nParameters    Name In Type Required Description     id-recibo path string true Identificador del recibo     Example responses\n  200 Response\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60  { \u0026#34;datosBasicosRecibo\u0026#34;: { \u0026#34;id\u0026#34;: \u0026#34;054\u0026#34;, \u0026#34;fechaEfecto\u0026#34;: \u0026#34;2019-03-30\u0026#34;, \u0026#34;fraccion\u0026#34;: \u0026#34;1/3\u0026#34;, \u0026#34;detalleImporte\u0026#34;: { \u0026#34;importeTotalRecibo\u0026#34;: 99.62, \u0026#34;primaNeta\u0026#34;: 83.61, \u0026#34;descuento\u0026#34;: 0, \u0026#34;consorcio\u0026#34;: 8.32, \u0026#34;ips\u0026#34;: 5.2, \u0026#34;lea\u0026#34;: 0.38, \u0026#34;arbitrio\u0026#34;: 2.11, \u0026#34;gastosFraccionamiento\u0026#34;: 1.06 }, \u0026#34;situacionReciboAFecha\u0026#34;: \u0026#34;Pagado\u0026#34; }, \u0026#34;numeroPoliza\u0026#34;: \u0026#34;25\u0026#34;, \u0026#34;movimientoPoliza\u0026#34;: \u0026#34;ACTIVA\u0026#34;, \u0026#34;empresa\u0026#34;: \u0026#34;Mutua\u0026#34;, \u0026#34;ramo\u0026#34;: \u0026#34;AUTOS\u0026#34;, \u0026#34;anualidad\u0026#34;: \u0026#34;2018\u0026#34;, \u0026#34;fechaEmision\u0026#34;: \u0026#34;21-06-2018\u0026#34;, \u0026#34;fechaVencimiento\u0026#34;: \u0026#34;31-07-2018\u0026#34;, \u0026#34;tipoRecibo\u0026#34;: \u0026#34;Vencimiento\u0026#34;, \u0026#34;estadoRecibo\u0026#34;: \u0026#34;Emitido\u0026#34;, \u0026#34;estadoCobroRecibo\u0026#34;: \u0026#34;Pendiente poner al cobro\u0026#34;, \u0026#34;nifRecibo\u0026#34;: \u0026#34;53450262X\u0026#34;, \u0026#34;cuentaBancaria\u0026#34;: { \u0026#34;idCuentaBancaria\u0026#34;: \u0026#34;01\u0026#34;, \u0026#34;tipoCuenta\u0026#34;: \u0026#34;Ahorro\u0026#34;, \u0026#34;iban\u0026#34;: \u0026#34;ES82 7139 7713 11 8283827121\u0026#34;, \u0026#34;nombreBanco\u0026#34;: \u0026#34;BBVA\u0026#34;, \u0026#34;direccionBanco\u0026#34;: \u0026#34;Avda. Ripolles, 55\u0026#34; }, \u0026#34;domicilioRecibo\u0026#34;: \u0026#34;Avda. Albufera, 62\u0026#34;, \u0026#34;movimientoRecibo\u0026#34;: { \u0026#34;idMovimiento\u0026#34;: \u0026#34;15\u0026#34;, \u0026#34;fechaMovimiento\u0026#34;: \u0026#34;2019-06-10\u0026#34;, \u0026#34;descripcionMovimiento\u0026#34;: \u0026#34;RECIBO EMITIDO\u0026#34;, \u0026#34;fechaSituacionRecibo\u0026#34;: \u0026#34;2019-04-30\u0026#34; }, \u0026#34;motivoDevolucionAnulacion\u0026#34;: \u0026#34;ANULADO POR IMPAGO\u0026#34;, \u0026#34;datosCobro\u0026#34;: { \u0026#34;datosBasicosCobro\u0026#34;: { \u0026#34;datosCuentaBancaria\u0026#34;: { \u0026#34;idCuentaBancaria\u0026#34;: \u0026#34;01\u0026#34;, \u0026#34;tipoCuenta\u0026#34;: \u0026#34;Ahorro\u0026#34;, \u0026#34;iban\u0026#34;: \u0026#34;ES82 7139 7713 11 8283827121\u0026#34;, \u0026#34;nombreBanco\u0026#34;: \u0026#34;BBVA\u0026#34;, \u0026#34;direccionBanco\u0026#34;: \u0026#34;Avda. Ripolles, 55\u0026#34; }, \u0026#34;formaPago\u0026#34;: \u0026#34;BANCO\u0026#34; }, \u0026#34;frecuenciaPago\u0026#34;: { \u0026#34;id\u0026#34;: \u0026#34;ANUAL\u0026#34;, \u0026#34;nombre\u0026#34;: \u0026#34;Frecuencia de pago anual\u0026#34; } } }   Responses    Status Meaning Description Schema     200 OK 200 OK - Recupera el detalle del recibo de una poliza Recibo   400 Bad Request 400 Bad Request Mensajes   404 Not Found 404 Not Found Mensajes   500 Internal Server Error 500 Internal Error Mensajes    To perform this operation, you must be authenticated by means of one of the following methods: clientIdHeader  recuperarRecibosPoliza \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;https://$(catalog.host)/cross-recibos/api/v1/polizas/{id-poliza}/recibos?desdeFecha=2020-02-26\u0026amp;hastaFecha=2020-02-26\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;GET\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, \u0026#34;X-IBM-Client-Id\u0026#34;: []string{\u0026#34;API_KEY\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;GET\u0026#34;, \u0026#34;https://$(catalog.host)/cross-recibos/api/v1/polizas/{id-poliza}/recibos\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  var headers = { \u0026#39;Accept\u0026#39;:\u0026#39;application/json\u0026#39;, \u0026#39;X-IBM-Client-Id\u0026#39;:\u0026#39;API_KEY\u0026#39; }; $.ajax({ url: \u0026#39;https://$(catalog.host)/cross-recibos/api/v1/polizas/{id-poliza}/recibos\u0026#39;, method: \u0026#39;get\u0026#39;, data: \u0026#39;?desdeFecha=2020-02-26\u0026amp;hastaFecha=2020-02-26\u0026#39;, headers: headers, success: function(data) { console.log(JSON.stringify(data)); } })   1 2 3 4  GET https://$(catalog.host)/cross-recibos/api/v1/polizas/{id-poliza}/recibos?desdeFecha=2020-02-26\u0026amp;hastaFecha=2020-02-26 HTTP/1.1 Accept: application/json   GET /polizas/{id-poliza}/recibos\nConsulta de la lista de recibos de una póliza\nOperación que permite realizar la consulta de la lista de recibos de una póliza\nParameters    Name In Type Required Description     id-poliza path string true Identificador de la póliza   estadoRecibo query string false Estado del recibo a consultar   desdeFecha query string(date) true Fecha a partir de la cual se consulta   hastaFecha query string(date) true Fecha hasta la cual se consulta     Example responses\n  200 Response\n 1 2 3 4 5 6 7  [ { \u0026#34;id\u0026#34;: \u0026#34;25\u0026#34;, \u0026#34;descripcion\u0026#34;: \u0026#34;Recurso\u0026#34;, \u0026#34;url\u0026#34;: \u0026#34;/recursos/{id-recurso}\u0026#34; } ]   Responses    Status Meaning Description Schema     200 OK 200 OK - Recupera los recibos vinculados a esa poliza según el estado y fechas de consulta indicadas Inline   400 Bad Request 400 Bad Request Mensajes   404 Not Found 404 Not Found Mensajes   500 Internal Server Error 500 Internal Error Mensajes    Response Schema Status Code 200\n   Name Type Required Restrictions Description     anonymous [Item] false none [Agrupa los datos relativos a una entidad.]   » id string false none Identificador de la entidad   » descripcion string false none Descripción de la entidad   » url string false none URL para acceder al detalle de la entidad    To perform this operation, you must be authenticated by means of one of the following methods: clientIdHeader  recuperarMovimientosRecibo \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;https://$(catalog.host)/cross-recibos/api/v1/recibos/{id-recibo}/movimientos\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;GET\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, \u0026#34;X-IBM-Client-Id\u0026#34;: []string{\u0026#34;API_KEY\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;GET\u0026#34;, \u0026#34;https://$(catalog.host)/cross-recibos/api/v1/recibos/{id-recibo}/movimientos\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  var headers = { \u0026#39;Accept\u0026#39;:\u0026#39;application/json\u0026#39;, \u0026#39;X-IBM-Client-Id\u0026#39;:\u0026#39;API_KEY\u0026#39; }; $.ajax({ url: \u0026#39;https://$(catalog.host)/cross-recibos/api/v1/recibos/{id-recibo}/movimientos\u0026#39;, method: \u0026#39;get\u0026#39;, headers: headers, success: function(data) { console.log(JSON.stringify(data)); } })   1 2 3 4  GET https://$(catalog.host)/cross-recibos/api/v1/recibos/{id-recibo}/movimientos HTTP/1.1 Accept: application/json   GET /recibos/{id-recibo}/movimientos\nConsulta del historico de movimientos de un recibo\nOperación que permite realizar la consulta del historico de movimientos de un recibo\nParameters    Name In Type Required Description     id-recibo path string true Identificador del recibo     Example responses\n  200 Response\n 1 2 3 4 5 6 7 8  [ { \u0026#34;idMovimiento\u0026#34;: \u0026#34;15\u0026#34;, \u0026#34;fechaMovimiento\u0026#34;: \u0026#34;2019-06-10\u0026#34;, \u0026#34;descripcionMovimiento\u0026#34;: \u0026#34;RECIBO EMITIDO\u0026#34;, \u0026#34;fechaSituacionRecibo\u0026#34;: \u0026#34;2019-04-30\u0026#34; } ]   Responses    Status Meaning Description Schema     200 OK 200 OK - Recupera los movimientos historicos de un recibo Inline   400 Bad Request 400 Bad Request Mensajes   404 Not Found 404 Not Found Mensajes   500 Internal Server Error 500 Internal Error Mensajes    Response Schema Status Code 200\n   Name Type Required Restrictions Description     anonymous [MovimientoRecibo] false none [Agrupa los datos relativos al movimiento de un recibo]   » idMovimiento string false none Identificador del movimiento del recibo   » fechaMovimiento string(date) false none Fecha del movimiento   » descripcionMovimiento string false none Descripcion del movimiento: recibo emitido, enviado por el banco\u0026hellip;   » fechaSituacionRecibo string(date) false none Fecha de efecto del cambio de situacion    To perform this operation, you must be authenticated by means of one of the following methods: clientIdHeader  recuperarMovimientoRecibo \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;https://$(catalog.host)/cross-recibos/api/v1/recibos/{id-recibo}/movimientos/{id-movimiento}\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;GET\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, \u0026#34;X-IBM-Client-Id\u0026#34;: []string{\u0026#34;API_KEY\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;GET\u0026#34;, \u0026#34;https://$(catalog.host)/cross-recibos/api/v1/recibos/{id-recibo}/movimientos/{id-movimiento}\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  var headers = { \u0026#39;Accept\u0026#39;:\u0026#39;application/json\u0026#39;, \u0026#39;X-IBM-Client-Id\u0026#39;:\u0026#39;API_KEY\u0026#39; }; $.ajax({ url: \u0026#39;https://$(catalog.host)/cross-recibos/api/v1/recibos/{id-recibo}/movimientos/{id-movimiento}\u0026#39;, method: \u0026#39;get\u0026#39;, headers: headers, success: function(data) { console.log(JSON.stringify(data)); } })   1 2 3 4  GET https://$(catalog.host)/cross-recibos/api/v1/recibos/{id-recibo}/movimientos/{id-movimiento} HTTP/1.1 Accept: application/json   GET /recibos/{id-recibo}/movimientos/{id-movimiento}\nConsulta del detalle de un movimiento de un recibo\nOperación que permite realizar la consulta del detalle del movimiento de un recibo\nParameters    Name In Type Required Description     id-recibo path string true Identificador del recibo   id-movimiento path string true Identificador del movimiento de un recibo     Example responses\n  200 Response\n 1 2 3 4 5 6  { \u0026#34;idMovimiento\u0026#34;: \u0026#34;15\u0026#34;, \u0026#34;fechaMovimiento\u0026#34;: \u0026#34;2019-06-10\u0026#34;, \u0026#34;descripcionMovimiento\u0026#34;: \u0026#34;RECIBO EMITIDO\u0026#34;, \u0026#34;fechaSituacionRecibo\u0026#34;: \u0026#34;2019-04-30\u0026#34; }   Responses    Status Meaning Description Schema     200 OK 200 OK - Recupera el detalle del movimiento de un recibo MovimientoRecibo   400 Bad Request 400 Bad Request Mensajes   404 Not Found 404 Not Found Mensajes   500 Internal Server Error 500 Internal Error Mensajes    To perform this operation, you must be authenticated by means of one of the following methods: clientIdHeader  recuperarRecibosPorNIF \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;https://$(catalog.host)/cross-recibos/api/v1/recibos-by-nif?fechaConsulta=2020-02-26\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;GET\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, \u0026#34;X-IBM-Client-Id\u0026#34;: []string{\u0026#34;API_KEY\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;GET\u0026#34;, \u0026#34;https://$(catalog.host)/cross-recibos/api/v1/recibos-by-nif\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  var headers = { \u0026#39;Accept\u0026#39;:\u0026#39;application/json\u0026#39;, \u0026#39;X-IBM-Client-Id\u0026#39;:\u0026#39;API_KEY\u0026#39; }; $.ajax({ url: \u0026#39;https://$(catalog.host)/cross-recibos/api/v1/recibos-by-nif\u0026#39;, method: \u0026#39;get\u0026#39;, data: \u0026#39;?fechaConsulta=2020-02-26\u0026#39;, headers: headers, success: function(data) { console.log(JSON.stringify(data)); } })   1 2 3 4  GET https://$(catalog.host)/cross-recibos/api/v1/recibos-by-nif?fechaConsulta=2020-02-26 HTTP/1.1 Accept: application/json   GET /recibos-by-nif\nConsulta de los recibos según NIF del cliente\nOperación que permite la consulta de los recibos según NIF del cliente\nParameters    Name In Type Required Description     nif query string false Identificador del documento de identidad de las personas   fechaConsulta query string(date) true Fecha de consulta     Example responses\n  200 Response\n 1 2 3 4 5 6 7  [ { \u0026#34;id\u0026#34;: \u0026#34;25\u0026#34;, \u0026#34;descripcion\u0026#34;: \u0026#34;Recurso\u0026#34;, \u0026#34;url\u0026#34;: \u0026#34;/recursos/{id-recurso}\u0026#34; } ]   Responses    Status Meaning Description Schema     200 OK 200 OK - Recupera los recibos del NIF del cliente Inline   400 Bad Request 400 Bad Request Mensajes   404 Not Found 404 Not Found Mensajes   500 Internal Server Error 500 Internal Error Mensajes    Response Schema Status Code 200\n   Name Type Required Restrictions Description     anonymous [Item] false none [Agrupa los datos relativos a una entidad.]   » id string false none Identificador de la entidad   » descripcion string false none Descripción de la entidad   » url string false none URL para acceder al detalle de la entidad    To perform this operation, you must be authenticated by means of one of the following methods: clientIdHeader  Documentación Agrupa la funcionalidad relacionada a la operativa de la documentación de los recibos asociados a pólizas\nrecuperarDocumentoRecibo \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;https://$(catalog.host)/cross-recibos/api/v1/recibos/{id-recibo}/pdf\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;GET\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, \u0026#34;X-IBM-Client-Id\u0026#34;: []string{\u0026#34;API_KEY\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;GET\u0026#34;, \u0026#34;https://$(catalog.host)/cross-recibos/api/v1/recibos/{id-recibo}/pdf\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  var headers = { \u0026#39;Accept\u0026#39;:\u0026#39;application/json\u0026#39;, \u0026#39;X-IBM-Client-Id\u0026#39;:\u0026#39;API_KEY\u0026#39; }; $.ajax({ url: \u0026#39;https://$(catalog.host)/cross-recibos/api/v1/recibos/{id-recibo}/pdf\u0026#39;, method: \u0026#39;get\u0026#39;, headers: headers, success: function(data) { console.log(JSON.stringify(data)); } })   1 2 3 4  GET https://$(catalog.host)/cross-recibos/api/v1/recibos/{id-recibo}/pdf HTTP/1.1 Accept: application/json   GET /recibos/{id-recibo}/pdf\nObtiene un documento con los datos del recibo en formato PDF\nOperación que permite obtener un documento con los datos del recibo\nParameters    Name In Type Required Description     id-recibo path string true Identificador del recibo     Example responses\n  200 Response\n 1 2 3 4  { \u0026#34;id\u0026#34;: \u0026#34;25\u0026#34;, \u0026#34;urlDescarga\u0026#34;: \u0026#34;https://aplicaciones.mutua.es/documentos/25\u0026#34; }   Responses    Status Meaning Description Schema     200 OK 200 OK - Recupera el documento del recibo de una poliza Documento   400 Bad Request 400 Bad Request Mensajes   404 Not Found 404 Not Found Mensajes   500 Internal Server Error 500 Internal Error Mensajes    To perform this operation, you must be authenticated by means of one of the following methods: clientIdHeader  solicitarReciboCarta \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;https://$(catalog.host)/cross-recibos/api/v1/recibos/{id-recibo}/carta\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;POST\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, \u0026#34;X-IBM-Client-Id\u0026#34;: []string{\u0026#34;API_KEY\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;POST\u0026#34;, \u0026#34;https://$(catalog.host)/cross-recibos/api/v1/recibos/{id-recibo}/carta\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  var headers = { \u0026#39;Accept\u0026#39;:\u0026#39;application/json\u0026#39;, \u0026#39;X-IBM-Client-Id\u0026#39;:\u0026#39;API_KEY\u0026#39; }; $.ajax({ url: \u0026#39;https://$(catalog.host)/cross-recibos/api/v1/recibos/{id-recibo}/carta\u0026#39;, method: \u0026#39;post\u0026#39;, headers: headers, success: function(data) { console.log(JSON.stringify(data)); } })   1 2 3 4  POST https://$(catalog.host)/cross-recibos/api/v1/recibos/{id-recibo}/carta HTTP/1.1 Accept: application/json   POST /recibos/{id-recibo}/carta\nEnvía una solicitud de recepción del recibo en forma de carta\nOperación que permite enviar una solicitud de recepción del recibo en forma de carta\nParameters    Name In Type Required Description     id-recibo path string true Identificador del recibo   direccionEnvio query string false Dirección a la cual se va a enviar el recibo en formato de carta     Example responses\n  201 Response\n 1 2 3 4 5 6 7 8 9 10  { \u0026#34;mensaje\u0026#34;: [ { \u0026#34;campo\u0026#34;: \u0026#34;id-poliza\u0026#34;, \u0026#34;codigo\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;descripcion\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;ampliacionInformacion\u0026#34;: \u0026#34;\u0026#34; } ] }   Responses    Status Meaning Description Schema     201 Created 201 OK - Envía la solicitud del recibo por carta Mensajes   400 Bad Request 400 Bad Request Mensajes   404 Not Found 404 Not Found Mensajes   500 Internal Server Error 500 Internal Error Mensajes    To perform this operation, you must be authenticated by means of one of the following methods: clientIdHeader  solicitarReciboEmail \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;https://$(catalog.host)/cross-recibos/api/v1/recibos/{id-recibo}/email\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;POST\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, \u0026#34;X-IBM-Client-Id\u0026#34;: []string{\u0026#34;API_KEY\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;POST\u0026#34;, \u0026#34;https://$(catalog.host)/cross-recibos/api/v1/recibos/{id-recibo}/email\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  var headers = { \u0026#39;Accept\u0026#39;:\u0026#39;application/json\u0026#39;, \u0026#39;X-IBM-Client-Id\u0026#39;:\u0026#39;API_KEY\u0026#39; }; $.ajax({ url: \u0026#39;https://$(catalog.host)/cross-recibos/api/v1/recibos/{id-recibo}/email\u0026#39;, method: \u0026#39;post\u0026#39;, headers: headers, success: function(data) { console.log(JSON.stringify(data)); } })   1 2 3 4  POST https://$(catalog.host)/cross-recibos/api/v1/recibos/{id-recibo}/email HTTP/1.1 Accept: application/json   POST /recibos/{id-recibo}/email\nEnvía una solicitud de recepción del recibo en forma de email\nOperación que permite enviar una solicitud de recepción del recibo en forma de email\nParameters    Name In Type Required Description     id-recibo path string true Identificador del recibo   direccionEmail query string false Dirección de email a la que se va a enviar el recibo     Example responses\n  201 Response\n 1 2 3 4 5 6 7 8 9 10  { \u0026#34;mensaje\u0026#34;: [ { \u0026#34;campo\u0026#34;: \u0026#34;id-poliza\u0026#34;, \u0026#34;codigo\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;descripcion\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;ampliacionInformacion\u0026#34;: \u0026#34;\u0026#34; } ] }   Responses    Status Meaning Description Schema     201 Created 201 OK - Envía la solicitud del recibo por email Mensajes   400 Bad Request 400 Bad Request Mensajes   404 Not Found 404 Not Found Mensajes   500 Internal Server Error 500 Internal Error Mensajes    To perform this operation, you must be authenticated by means of one of the following methods: clientIdHeader  solicitarReciboSms \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;https://$(catalog.host)/cross-recibos/api/v1/recibos/{id-recibo}/sms\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;POST\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, \u0026#34;X-IBM-Client-Id\u0026#34;: []string{\u0026#34;API_KEY\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;POST\u0026#34;, \u0026#34;https://$(catalog.host)/cross-recibos/api/v1/recibos/{id-recibo}/sms\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  var headers = { \u0026#39;Accept\u0026#39;:\u0026#39;application/json\u0026#39;, \u0026#39;X-IBM-Client-Id\u0026#39;:\u0026#39;API_KEY\u0026#39; }; $.ajax({ url: \u0026#39;https://$(catalog.host)/cross-recibos/api/v1/recibos/{id-recibo}/sms\u0026#39;, method: \u0026#39;post\u0026#39;, headers: headers, success: function(data) { console.log(JSON.stringify(data)); } })   1 2 3 4  POST https://$(catalog.host)/cross-recibos/api/v1/recibos/{id-recibo}/sms HTTP/1.1 Accept: application/json   POST /recibos/{id-recibo}/sms\nEnvia una solicitud de recepción del recibo en forma de SMS\nOperación que permite enviar una solicitud de recepción del recibo en forma de SMS\nParameters    Name In Type Required Description     id-recibo path string true Identificador del recibo   telefono query string false Número de teléfono al cual se va a enviar el recibo en formato SMS     Example responses\n  201 Response\n 1 2 3 4 5 6 7 8 9 10  { \u0026#34;mensaje\u0026#34;: [ { \u0026#34;campo\u0026#34;: \u0026#34;id-poliza\u0026#34;, \u0026#34;codigo\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;descripcion\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;ampliacionInformacion\u0026#34;: \u0026#34;\u0026#34; } ] }   Responses    Status Meaning Description Schema     201 Created 201 OK - Envía la solicitud del recibo por sms Mensajes   400 Bad Request 400 Bad Request Mensajes   404 Not Found 404 Not Found Mensajes   500 Internal Server Error 500 Internal Error Mensajes    To perform this operation, you must be authenticated by means of one of the following methods: clientIdHeader  Pagos Agrupa la funcionalidad relacionada a la operativa de los pagos asociados a pólizas\ncrearSolicitudReenvioBancoRecibo \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;https://$(catalog.host)/cross-recibos/api/v1/recibos/{id-recibo}/reenvios-bancos\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;POST\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, \u0026#34;X-IBM-Client-Id\u0026#34;: []string{\u0026#34;API_KEY\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;POST\u0026#34;, \u0026#34;https://$(catalog.host)/cross-recibos/api/v1/recibos/{id-recibo}/reenvios-bancos\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  var headers = { \u0026#39;Accept\u0026#39;:\u0026#39;application/json\u0026#39;, \u0026#39;X-IBM-Client-Id\u0026#39;:\u0026#39;API_KEY\u0026#39; }; $.ajax({ url: \u0026#39;https://$(catalog.host)/cross-recibos/api/v1/recibos/{id-recibo}/reenvios-bancos\u0026#39;, method: \u0026#39;post\u0026#39;, headers: headers, success: function(data) { console.log(JSON.stringify(data)); } })   1 2 3 4  POST https://$(catalog.host)/cross-recibos/api/v1/recibos/{id-recibo}/reenvios-bancos HTTP/1.1 Accept: application/json   POST /recibos/{id-recibo}/reenvios-bancos\nConfirma a Mutua que puede volver a enviar al banco el recibo que fue devuelto y se quedó sin cobrar\nOperación que permite confirmar a Mutua que puede volver a enviar al banco el recibo que fue devuelto y se quedó sin cobrar\nParameters    Name In Type Required Description     id-recibo path string true Identificador del recibo     Example responses\n  201 Response\n 1 2 3 4 5 6 7 8 9 10  { \u0026#34;mensaje\u0026#34;: [ { \u0026#34;campo\u0026#34;: \u0026#34;id-poliza\u0026#34;, \u0026#34;codigo\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;descripcion\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;ampliacionInformacion\u0026#34;: \u0026#34;\u0026#34; } ] }   Responses    Status Meaning Description Schema     201 Created 201 OK - Confirma el envío del recibo al banco Mensajes   400 Bad Request 400 Bad Request Mensajes   404 Not Found 404 Not Found Mensajes   500 Internal Server Error 500 Internal Error Mensajes    To perform this operation, you must be authenticated by means of one of the following methods: clientIdHeader  crearPagoRecibo \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;https://$(catalog.host)/cross-recibos/api/v1/recibos/{id-recibo}/confirmaciones-pagos\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;POST\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, \u0026#34;X-IBM-Client-Id\u0026#34;: []string{\u0026#34;API_KEY\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;POST\u0026#34;, \u0026#34;https://$(catalog.host)/cross-recibos/api/v1/recibos/{id-recibo}/confirmaciones-pagos\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  var headers = { \u0026#39;Accept\u0026#39;:\u0026#39;application/json\u0026#39;, \u0026#39;X-IBM-Client-Id\u0026#39;:\u0026#39;API_KEY\u0026#39; }; $.ajax({ url: \u0026#39;https://$(catalog.host)/cross-recibos/api/v1/recibos/{id-recibo}/confirmaciones-pagos\u0026#39;, method: \u0026#39;post\u0026#39;, headers: headers, success: function(data) { console.log(JSON.stringify(data)); } })   1 2 3 4  POST https://$(catalog.host)/cross-recibos/api/v1/recibos/{id-recibo}/confirmaciones-pagos HTTP/1.1 Accept: application/json   POST /recibos/{id-recibo}/confirmaciones-pagos\nConfirma a Mutua el pago de un recibo realizado por un cliente de forma explícita, por ejemplo porque se quedó impagado o devuelto por el banco\nOperación que permite confirmar a Mutua el pago de un recibo realizado por un cliente de forma explícita, por ejemplo porque se quedó impagado o devuelto por el banco\nParameters    Name In Type Required Description     id-recibo path string true Identificador del recibo     Example responses\n  201 Response\n 1 2 3 4 5 6 7 8 9 10  { \u0026#34;mensaje\u0026#34;: [ { \u0026#34;campo\u0026#34;: \u0026#34;id-poliza\u0026#34;, \u0026#34;codigo\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;descripcion\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;ampliacionInformacion\u0026#34;: \u0026#34;\u0026#34; } ] }   Responses    Status Meaning Description Schema     201 Created 201 Confirma el pago de un recibo de forma explícita Mensajes   400 Bad Request 400 Bad Request Mensajes   404 Not Found 404 Not Found Mensajes   500 Internal Server Error 500 Internal Error Mensajes    To perform this operation, you must be authenticated by means of one of the following methods: clientIdHeader  Schemas Recibo \n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61  { \u0026#34;datosBasicosRecibo\u0026#34;: { \u0026#34;id\u0026#34;: \u0026#34;054\u0026#34;, \u0026#34;fechaEfecto\u0026#34;: \u0026#34;2019-03-30\u0026#34;, \u0026#34;fraccion\u0026#34;: \u0026#34;1/3\u0026#34;, \u0026#34;detalleImporte\u0026#34;: { \u0026#34;importeTotalRecibo\u0026#34;: 99.62, \u0026#34;primaNeta\u0026#34;: 83.61, \u0026#34;descuento\u0026#34;: 0, \u0026#34;consorcio\u0026#34;: 8.32, \u0026#34;ips\u0026#34;: 5.2, \u0026#34;lea\u0026#34;: 0.38, \u0026#34;arbitrio\u0026#34;: 2.11, \u0026#34;gastosFraccionamiento\u0026#34;: 1.06 }, \u0026#34;situacionReciboAFecha\u0026#34;: \u0026#34;Pagado\u0026#34; }, \u0026#34;numeroPoliza\u0026#34;: \u0026#34;25\u0026#34;, \u0026#34;movimientoPoliza\u0026#34;: \u0026#34;ACTIVA\u0026#34;, \u0026#34;empresa\u0026#34;: \u0026#34;Mutua\u0026#34;, \u0026#34;ramo\u0026#34;: \u0026#34;AUTOS\u0026#34;, \u0026#34;anualidad\u0026#34;: \u0026#34;2018\u0026#34;, \u0026#34;fechaEmision\u0026#34;: \u0026#34;21-06-2018\u0026#34;, \u0026#34;fechaVencimiento\u0026#34;: \u0026#34;31-07-2018\u0026#34;, \u0026#34;tipoRecibo\u0026#34;: \u0026#34;Vencimiento\u0026#34;, \u0026#34;estadoRecibo\u0026#34;: \u0026#34;Emitido\u0026#34;, \u0026#34;estadoCobroRecibo\u0026#34;: \u0026#34;Pendiente poner al cobro\u0026#34;, \u0026#34;nifRecibo\u0026#34;: \u0026#34;53450262X\u0026#34;, \u0026#34;cuentaBancaria\u0026#34;: { \u0026#34;idCuentaBancaria\u0026#34;: \u0026#34;01\u0026#34;, \u0026#34;tipoCuenta\u0026#34;: \u0026#34;Ahorro\u0026#34;, \u0026#34;iban\u0026#34;: \u0026#34;ES82 7139 7713 11 8283827121\u0026#34;, \u0026#34;nombreBanco\u0026#34;: \u0026#34;BBVA\u0026#34;, \u0026#34;direccionBanco\u0026#34;: \u0026#34;Avda. Ripolles, 55\u0026#34; }, \u0026#34;domicilioRecibo\u0026#34;: \u0026#34;Avda. Albufera, 62\u0026#34;, \u0026#34;movimientoRecibo\u0026#34;: { \u0026#34;idMovimiento\u0026#34;: \u0026#34;15\u0026#34;, \u0026#34;fechaMovimiento\u0026#34;: \u0026#34;2019-06-10\u0026#34;, \u0026#34;descripcionMovimiento\u0026#34;: \u0026#34;RECIBO EMITIDO\u0026#34;, \u0026#34;fechaSituacionRecibo\u0026#34;: \u0026#34;2019-04-30\u0026#34; }, \u0026#34;motivoDevolucionAnulacion\u0026#34;: \u0026#34;ANULADO POR IMPAGO\u0026#34;, \u0026#34;datosCobro\u0026#34;: { \u0026#34;datosBasicosCobro\u0026#34;: { \u0026#34;datosCuentaBancaria\u0026#34;: { \u0026#34;idCuentaBancaria\u0026#34;: \u0026#34;01\u0026#34;, \u0026#34;tipoCuenta\u0026#34;: \u0026#34;Ahorro\u0026#34;, \u0026#34;iban\u0026#34;: \u0026#34;ES82 7139 7713 11 8283827121\u0026#34;, \u0026#34;nombreBanco\u0026#34;: \u0026#34;BBVA\u0026#34;, \u0026#34;direccionBanco\u0026#34;: \u0026#34;Avda. Ripolles, 55\u0026#34; }, \u0026#34;formaPago\u0026#34;: \u0026#34;BANCO\u0026#34; }, \u0026#34;frecuenciaPago\u0026#34;: { \u0026#34;id\u0026#34;: \u0026#34;ANUAL\u0026#34;, \u0026#34;nombre\u0026#34;: \u0026#34;Frecuencia de pago anual\u0026#34; } } }   Agrupa los datos relativos a un recibo de pago de una póliza\nProperties    Name Type Required Restrictions Description     datosBasicosRecibo DatosBasicosRecibo false none Datos básicos del recibo   numeroPoliza string false none Número de póliza   movimientoPoliza string false none Movimiento de la póliza al que se asocia al recibo   empresa string false none Empresa del recibo   ramo string false none Ramo del recibo   anualidad string false none Anualidad de efecto del recibo   fechaEmision string(date) false none Fecha de puesto al cobro del recibo (remesado para banco)   fechaVencimiento string(date) false none Fin de vigencia del recibo   tipoRecibo string false none Tipo de recibo: vencimiento, nueva produción o suplemento   estadoRecibo string false none Estado del recibo: emitido, retirado por suplemento, devuelto, anulado emision o anulado falta de pago   estadoCobroRecibo string false none Estado de cobro del recibo: pendiente poner al cobro, puesto al cobro o fuera de cobro   nifRecibo string false none NIF del pagador del recibo   cuentaBancaria CuentaBancaria false none Cuenta Bancaria asociada al pago de recibos de la póliza   domicilioRecibo string false none Domicilio al que se asocia el recibo   movimientoRecibo MovimientoRecibo false none Movimiento que origina el cambio sobre el recibo   motivoDevolucionAnulacion string false none Motivo por el que se devuelve o anula un recibo   datosCobro DatosCobro false none Datos relativos al cobro de un recibo    Enumerated Values    Property Value     tipoRecibo VENCIMIENTO   tipoRecibo NUEVA_PRODUCCCION   tipoRecibo SUPLEMENTOS   estadoRecibo EMITIDO   estadoRecibo RETIRADO_POR_SUPLEMENTO   estadoRecibo DEVUELTO   estadoRecibo ANULADO_EMISION   estadoRecibo ANULADO_FALTA_PAGO    DatosCobro \n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  { \u0026#34;datosBasicosCobro\u0026#34;: { \u0026#34;datosCuentaBancaria\u0026#34;: { \u0026#34;idCuentaBancaria\u0026#34;: \u0026#34;01\u0026#34;, \u0026#34;tipoCuenta\u0026#34;: \u0026#34;Ahorro\u0026#34;, \u0026#34;iban\u0026#34;: \u0026#34;ES82 7139 7713 11 8283827121\u0026#34;, \u0026#34;nombreBanco\u0026#34;: \u0026#34;BBVA\u0026#34;, \u0026#34;direccionBanco\u0026#34;: \u0026#34;Avda. Ripolles, 55\u0026#34; }, \u0026#34;formaPago\u0026#34;: \u0026#34;BANCO\u0026#34; }, \u0026#34;frecuenciaPago\u0026#34;: { \u0026#34;id\u0026#34;: \u0026#34;ANUAL\u0026#34;, \u0026#34;nombre\u0026#34;: \u0026#34;Frecuencia de pago anual\u0026#34; } }   Agrupa los datos relativos a un cobro\nProperties    Name Type Required Restrictions Description     datosBasicosCobro DatosBasicosCobro true none Datos básicos de cobro   frecuenciaPago FrecuenciaPago true none Frecuencia de pago    DatosBasicosCobro \n1 2 3 4 5 6 7 8 9 10 11  { \u0026#34;datosCuentaBancaria\u0026#34;: { \u0026#34;idCuentaBancaria\u0026#34;: \u0026#34;01\u0026#34;, \u0026#34;tipoCuenta\u0026#34;: \u0026#34;Ahorro\u0026#34;, \u0026#34;iban\u0026#34;: \u0026#34;ES82 7139 7713 11 8283827121\u0026#34;, \u0026#34;nombreBanco\u0026#34;: \u0026#34;BBVA\u0026#34;, \u0026#34;direccionBanco\u0026#34;: \u0026#34;Avda. Ripolles, 55\u0026#34; }, \u0026#34;formaPago\u0026#34;: \u0026#34;BANCO\u0026#34; }   Agrupa los datos básicos relativos a un cobro\nProperties    Name Type Required Restrictions Description     datosCuentaBancaria CuentaBancaria true none Datos de la cuenta bancaria   formaPago string false none Formas de pagar un recibo    Enumerated Values    Property Value     formaPago BANCO   formaPago TARJETA   formaPago VENTANILLA   formaPago DOMICILIADO   formaPago EFECTIVO    CuentaBancaria \n1 2 3 4 5 6 7 8  { \u0026#34;idCuentaBancaria\u0026#34;: \u0026#34;01\u0026#34;, \u0026#34;tipoCuenta\u0026#34;: \u0026#34;Ahorro\u0026#34;, \u0026#34;iban\u0026#34;: \u0026#34;ES82 7139 7713 11 8283827121\u0026#34;, \u0026#34;nombreBanco\u0026#34;: \u0026#34;BBVA\u0026#34;, \u0026#34;direccionBanco\u0026#34;: \u0026#34;Avda. Ripolles, 55\u0026#34; }   Datos relativos a una cuenta bancaria\nProperties    Name Type Required Restrictions Description     idCuentaBancaria string true none Identificador de la cuenta   tipoCuenta string false none Tipo de cuenta   iban string true none IBAN de la cuenta   nombreBanco string false none Nombre del banco de la cuenta   direccionBanco string false none Dirección de la sucursal en la que está abierta la cuenta    FrecuenciaPago \n1 2 3 4 5  { \u0026#34;id\u0026#34;: \u0026#34;ANUAL\u0026#34;, \u0026#34;nombre\u0026#34;: \u0026#34;Frecuencia de pago anual\u0026#34; }   Agrupa los datos de las frecuencias de pago disponibles\nProperties    Name Type Required Restrictions Description     id string false none Identificador de la frecuencia de pago   nombre string false none Descripción de la frecuencia de pago    Enumerated Values    Property Value     id ANUAL   id MENSUAL   id APLAZADO   id BIMESTRAL   id TRIMESTRAL   id CUATRIMESTRAL   id SEMESTRAL    ImporteRecibo \n1 2 3 4 5 6 7 8 9 10 11  { \u0026#34;importeTotalRecibo\u0026#34;: 99.62, \u0026#34;primaNeta\u0026#34;: 83.61, \u0026#34;descuento\u0026#34;: 0, \u0026#34;consorcio\u0026#34;: 8.32, \u0026#34;ips\u0026#34;: 5.2, \u0026#34;lea\u0026#34;: 0.38, \u0026#34;arbitrio\u0026#34;: 2.11, \u0026#34;gastosFraccionamiento\u0026#34;: 1.06 }   Agrupa los datos relativos a un importe.\nProperties    Name Type Required Restrictions Description     importeTotalRecibo number(float) false none Importe total del recibo   primaNeta number(float) false none Prima neta   descuento number(float) false none Descuento aplicado   consorcio number(float) false none Consorcio de Compensación de Seguros   ips number(float) false none Impuestos sobre Primas de Seguros   lea number(float) false none Liquidación Entidades Aseguradoras   arbitrio number(float) false none Arbitrio de bomberos   gastosFraccionamiento number(float) false none Gastos derivados del fraccionamiento del pago    DatosBasicosRecibo \n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  { \u0026#34;id\u0026#34;: \u0026#34;054\u0026#34;, \u0026#34;fechaEfecto\u0026#34;: \u0026#34;2019-03-30\u0026#34;, \u0026#34;fraccion\u0026#34;: \u0026#34;1/3\u0026#34;, \u0026#34;detalleImporte\u0026#34;: { \u0026#34;importeTotalRecibo\u0026#34;: 99.62, \u0026#34;primaNeta\u0026#34;: 83.61, \u0026#34;descuento\u0026#34;: 0, \u0026#34;consorcio\u0026#34;: 8.32, \u0026#34;ips\u0026#34;: 5.2, \u0026#34;lea\u0026#34;: 0.38, \u0026#34;arbitrio\u0026#34;: 2.11, \u0026#34;gastosFraccionamiento\u0026#34;: 1.06 }, \u0026#34;situacionReciboAFecha\u0026#34;: \u0026#34;Pagado\u0026#34; }   Agrupa los datos relativos a un recibo.\nProperties    Name Type Required Restrictions Description     id string false none Identificador del recibo   fechaEfecto string(date) false none Fecha de efecto del recibo   fraccion string false none Fracción del recibo   detalleImporte ImporteRecibo false none Detalle del importe del recibo   situacionReciboAFecha string false none Situacion del recibo a la fecha de consulta: pendiente, pagado, impagado o anulado    Enumerated Values    Property Value     situacionReciboAFecha PENDIENTE   situacionReciboAFecha PAGADO   situacionReciboAFecha IMPAGADO   situacionReciboAFecha ANULADO    Item \n1 2 3 4 5 6  { \u0026#34;id\u0026#34;: \u0026#34;25\u0026#34;, \u0026#34;descripcion\u0026#34;: \u0026#34;Recurso\u0026#34;, \u0026#34;url\u0026#34;: \u0026#34;/recursos/{id-recurso}\u0026#34; }   Agrupa los datos relativos a una entidad.\nProperties    Name Type Required Restrictions Description     id string false none Identificador de la entidad   descripcion string false none Descripción de la entidad   url string false none URL para acceder al detalle de la entidad    Documento \n1 2 3 4 5  { \u0026#34;id\u0026#34;: \u0026#34;25\u0026#34;, \u0026#34;urlDescarga\u0026#34;: \u0026#34;https://aplicaciones.mutua.es/documentos/25\u0026#34; }   Contiene la información necesaria para acceder a un documento\nProperties    Name Type Required Restrictions Description     id string false none Identificador del documento   urlDescarga string false none Dirección URL para la descarga del documento    Mensajes \n1 2 3 4 5 6 7 8 9 10 11  { \u0026#34;mensaje\u0026#34;: [ { \u0026#34;campo\u0026#34;: \u0026#34;id-poliza\u0026#34;, \u0026#34;codigo\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;descripcion\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;ampliacionInformacion\u0026#34;: \u0026#34;\u0026#34; } ] }   Objeto que permite agrupar los datos relativos a los mensajes.\nProperties    Name Type Required Restrictions Description     mensaje [DatosMensaje] false none Lista de mensajes al consumidor de la API    DatosMensaje \n1 2 3 4 5 6 7  { \u0026#34;campo\u0026#34;: \u0026#34;id-poliza\u0026#34;, \u0026#34;codigo\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;descripcion\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;ampliacionInformacion\u0026#34;: \u0026#34;\u0026#34; }   Objeto que permite agrupar los datos de mensaje.\nProperties    Name Type Required Restrictions Description     campo string false none Nombre del campo sobre el que se informa: del error producido en el caso de mensaje de error, del objeto actualizado/eliminado/creado en caso de actualización/eliminación/creación   codigo string false none Codigo descriptivo del mensaje al consumidor de la API   descripcion string false none Descripción del mensaje para el consumidor de la API   ampliacionInformacion string false none Detalle ampliado sobre el mensaje al consumidor. En el caso de fallo en la creación de un objeto, informa sobre el detalle de este fallo. En el caso de éxito de creación de un objeto, contiene un json con el id del objeto creado y el path relativo /entidad/{id-entidad}.    MovimientoRecibo \n1 2 3 4 5 6 7  { \u0026#34;idMovimiento\u0026#34;: \u0026#34;15\u0026#34;, \u0026#34;fechaMovimiento\u0026#34;: \u0026#34;2019-06-10\u0026#34;, \u0026#34;descripcionMovimiento\u0026#34;: \u0026#34;RECIBO EMITIDO\u0026#34;, \u0026#34;fechaSituacionRecibo\u0026#34;: \u0026#34;2019-04-30\u0026#34; }   Agrupa los datos relativos al movimiento de un recibo\nProperties    Name Type Required Restrictions Description     idMovimiento string false none Identificador del movimiento del recibo   fechaMovimiento string(date) false none Fecha del movimiento   descripcionMovimiento string false none Descripcion del movimiento: recibo emitido, enviado por el banco\u0026hellip;   fechaSituacionRecibo string(date) false none Fecha de efecto del cambio de situacion    ","description":"","id":21,"section":"docs","tags":null,"title":"CROSS - RECIBOS","uri":"/ko/docs/apis/recibos/"},{"content":"Rakam API Documentation v1.0  Scroll down for code samples, example requests and responses. Select a language for code samples from the tabs above or the mobile navigation menu.\n An analytics platform API that lets you create your own analytics services.\nBase URLs:\n //https://app.getrakam.com/  Email: Support\nLicense: Apache License 2.0\nAuthentication   API Key (ui_read_key)\n Parameter Name: undefined, in: header.    API Key (read_key)\n Parameter Name: read_key, in: header.    API Key (ui_master_key)\n Parameter Name: undefined, in: header.    API Key (master_key)\n Parameter Name: master_key, in: header.    API Key (write_key)\n Parameter Name: undefined, in: header.    event-stream Event Stream Module\nRakam Documentation\nsubscribe \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;/https://app.getrakam.com/stream/subscribe\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;GET\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;GET\u0026#34;, \u0026#34;/https://app.getrakam.com/stream/subscribe\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   1 2 3 4 5 6 7 8 9 10  $.ajax({ url: \u0026#39;/https://app.getrakam.com/stream/subscribe\u0026#39;, method: \u0026#39;get\u0026#39;, success: function(data) { console.log(JSON.stringify(data)); } })   1 2  GET /https://app.getrakam.com/stream/subscribe HTTP/1.1   GET /stream/subscribe\nSubscribe Event Stream\nSubscribes the event stream periodically to the client.\nResponses    Status Meaning Description Schema     400 Bad Request Project does not exist. None    This operation does not require authentication  funnel Funnel Analyzer module\nRakam Documentation\nanalyze \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;/https://app.getrakam.com/funnel/analyze\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;GET\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Content-Type\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, \u0026#34;read_key\u0026#34;: []string{\u0026#34;API_KEY\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;GET\u0026#34;, \u0026#34;/https://app.getrakam.com/funnel/analyze\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  var headers = { \u0026#39;Content-Type\u0026#39;:\u0026#39;application/json\u0026#39;, \u0026#39;read_key\u0026#39;:\u0026#39;API_KEY\u0026#39; }; $.ajax({ url: \u0026#39;/https://app.getrakam.com/funnel/analyze\u0026#39;, method: \u0026#39;get\u0026#39;, headers: headers, success: function(data) { console.log(JSON.stringify(data)); } })   1 2 3 4  GET /https://app.getrakam.com/funnel/analyze HTTP/1.1 Content-Type: application/json   GET /funnel/analyze\nExecute query\n Body parameter\n 1 2 3 4 5 6 7 8 9 10 11 12 13  { \u0026#34;project\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;steps\u0026#34;: [ { \u0026#34;collection\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;filterExpression\u0026#34;: \u0026#34;string\u0026#34; } ], \u0026#34;dimension\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;startDate\u0026#34;: \u0026#34;2020-02-26\u0026#34;, \u0026#34;endDate\u0026#34;: \u0026#34;2020-02-26\u0026#34;, \u0026#34;enableOtherGrouping\u0026#34;: true }   Parameters    Name In Type Required Description     body body FunnelQuery true none    Responses    Status Meaning Description Schema     default Default successful operation None    To perform this operation, you must be authenticated by means of one of the following methods: read_key  retention Retention Analyzer module\nRakam Documentation\nexecute \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;/https://app.getrakam.com/retention/analyze\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;GET\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;read_key\u0026#34;: []string{\u0026#34;API_KEY\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;GET\u0026#34;, \u0026#34;/https://app.getrakam.com/retention/analyze\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  var headers = { \u0026#39;read_key\u0026#39;:\u0026#39;API_KEY\u0026#39; }; $.ajax({ url: \u0026#39;/https://app.getrakam.com/retention/analyze\u0026#39;, method: \u0026#39;get\u0026#39;, headers: headers, success: function(data) { console.log(JSON.stringify(data)); } })   1 2  GET /https://app.getrakam.com/retention/analyze HTTP/1.1   GET /retention/analyze\nExecute query\nResponses    Status Meaning Description Schema     default Default successful operation None    To perform this operation, you must be authenticated by means of one of the following methods: read_key  user User module for Rakam\nRakam Documentation\ncreate \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;/https://app.getrakam.com/user/create\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;POST\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Content-Type\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;POST\u0026#34;, \u0026#34;/https://app.getrakam.com/user/create\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  var headers = { \u0026#39;Content-Type\u0026#39;:\u0026#39;application/json\u0026#39;, \u0026#39;Accept\u0026#39;:\u0026#39;application/json\u0026#39; }; $.ajax({ url: \u0026#39;/https://app.getrakam.com/user/create\u0026#39;, method: \u0026#39;post\u0026#39;, headers: headers, success: function(data) { console.log(JSON.stringify(data)); } })   1 2 3 4 5  POST /https://app.getrakam.com/user/create HTTP/1.1 Content-Type: application/json Accept: application/json   POST /user/create\nCreate new user\n Body parameter\n 1 2 3 4 5 6 7  { \u0026#34;project\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;properties\u0026#34;: { \u0026#34;property1\u0026#34;: {}, \u0026#34;property2\u0026#34;: {} } }   Parameters    Name In Type Required Description     body body UserHttpService_create true none     Example responses\n  200 Response\n 1 2 3  { \u0026#34;identifier\u0026#34;: {} }   Responses    Status Meaning Description Schema     200 OK successful operation CreateUserResponse   400 Bad Request Project does not exist. None    This operation does not require authentication  getUser \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;/https://app.getrakam.com/user/get\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;POST\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Content-Type\u0026#34;: []string{\u0026#34;application/x-www-form-urlencoded\u0026#34;}, \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;POST\u0026#34;, \u0026#34;/https://app.getrakam.com/user/get\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  var headers = { \u0026#39;Content-Type\u0026#39;:\u0026#39;application/x-www-form-urlencoded\u0026#39;, \u0026#39;Accept\u0026#39;:\u0026#39;application/json\u0026#39; }; $.ajax({ url: \u0026#39;/https://app.getrakam.com/user/get\u0026#39;, method: \u0026#39;post\u0026#39;, headers: headers, success: function(data) { console.log(JSON.stringify(data)); } })   1 2 3 4 5  POST /https://app.getrakam.com/user/get HTTP/1.1 Content-Type: application/x-www-form-urlencoded Accept: application/json   POST /user/get\nGet user\n Body parameter\n 1 2 3  project:stringuser:string  Parameters    Name In Type Required Description     body body object false none   » project body string false none   » user body string false none     Example responses\n  200 Response\n 1 2 3 4 5 6 7 8  { \u0026#34;project\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;id\u0026#34;: {}, \u0026#34;properties\u0026#34;: { \u0026#34;property1\u0026#34;: {}, \u0026#34;property2\u0026#34;: {} } }   Responses    Status Meaning Description Schema     200 OK successful operation User   400 Bad Request User does not exist. None    This operation does not require authentication  getEvents \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;/https://app.getrakam.com/user/get_events\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;POST\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Content-Type\u0026#34;: []string{\u0026#34;application/x-www-form-urlencoded\u0026#34;}, \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;POST\u0026#34;, \u0026#34;/https://app.getrakam.com/user/get_events\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  var headers = { \u0026#39;Content-Type\u0026#39;:\u0026#39;application/x-www-form-urlencoded\u0026#39;, \u0026#39;Accept\u0026#39;:\u0026#39;application/json\u0026#39; }; $.ajax({ url: \u0026#39;/https://app.getrakam.com/user/get_events\u0026#39;, method: \u0026#39;post\u0026#39;, headers: headers, success: function(data) { console.log(JSON.stringify(data)); } })   1 2 3 4 5  POST /https://app.getrakam.com/user/get_events HTTP/1.1 Content-Type: application/x-www-form-urlencoded Accept: application/json   POST /user/get_events\nGet events of the user\n Body parameter\n 1 2 3 4 5  project:stringuser:stringlimit:0offset:0  Parameters    Name In Type Required Description     body body object false none   » project body string false none   » user body string false none   » limit body integer(int32) false none   » offset body integer(int64) false none     Example responses\n  200 Response\n 1 2 3  [ {} ]   Responses    Status Meaning Description Schema     200 OK successful operation Inline   400 Bad Request User does not exist. None    Response Schema This operation does not require authentication  metadata \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;/https://app.getrakam.com/user/metadata\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;POST\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Content-Type\u0026#34;: []string{\u0026#34;application/x-www-form-urlencoded\u0026#34;}, \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;POST\u0026#34;, \u0026#34;/https://app.getrakam.com/user/metadata\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  var headers = { \u0026#39;Content-Type\u0026#39;:\u0026#39;application/x-www-form-urlencoded\u0026#39;, \u0026#39;Accept\u0026#39;:\u0026#39;application/json\u0026#39; }; $.ajax({ url: \u0026#39;/https://app.getrakam.com/user/metadata\u0026#39;, method: \u0026#39;post\u0026#39;, headers: headers, success: function(data) { console.log(JSON.stringify(data)); } })   1 2 3 4 5  POST /https://app.getrakam.com/user/metadata HTTP/1.1 Content-Type: application/x-www-form-urlencoded Accept: application/json   POST /user/metadata\nGet user storage metadata\n Body parameter\n 1 2  project:string  Parameters    Name In Type Required Description     body body listQueries false none   » project body string false none     Example responses\n  200 Response\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  { \u0026#34;columns\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;STRING\u0026#34;, \u0026#34;nullable\u0026#34;: false, \u0026#34;unique\u0026#34;: false, \u0026#34;descriptiveName\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;category\u0026#34;: \u0026#34;string\u0026#34; } ], \u0026#34;identifierColumn\u0026#34;: \u0026#34;string\u0026#34; }   Responses    Status Meaning Description Schema     200 OK successful operation MetadataResponse   400 Bad Request Project does not exist. None    This operation does not require authentication  search \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;/https://app.getrakam.com/user/search\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;POST\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Content-Type\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;POST\u0026#34;, \u0026#34;/https://app.getrakam.com/user/search\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  var headers = { \u0026#39;Content-Type\u0026#39;:\u0026#39;application/json\u0026#39;, \u0026#39;Accept\u0026#39;:\u0026#39;application/json\u0026#39; }; $.ajax({ url: \u0026#39;/https://app.getrakam.com/user/search\u0026#39;, method: \u0026#39;post\u0026#39;, headers: headers, success: function(data) { console.log(JSON.stringify(data)); } })   1 2 3 4 5  POST /https://app.getrakam.com/user/search HTTP/1.1 Content-Type: application/json Accept: application/json   POST /user/search\nSearch users\n Body parameter\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22  { \u0026#34;project\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;filter\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;event_filters\u0026#34;: [ { \u0026#34;collection\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;aggregation\u0026#34;: { \u0026#34;field\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;minimum\u0026#34;: 0, \u0026#34;maximum\u0026#34;: 0, \u0026#34;type\u0026#34;: \u0026#34;COUNT\u0026#34; }, \u0026#34;filterExpression\u0026#34;: \u0026#34;string\u0026#34; } ], \u0026#34;sorting\u0026#34;: { \u0026#34;column\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;order\u0026#34;: \u0026#34;asc\u0026#34; }, \u0026#34;offset\u0026#34;: 0, \u0026#34;limit\u0026#34;: 0 }   Parameters    Name In Type Required Description     body body UserHttpService_search true none     Example responses\n  200 Response\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28  { \u0026#34;metadata\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;STRING\u0026#34;, \u0026#34;nullable\u0026#34;: false, \u0026#34;unique\u0026#34;: false, \u0026#34;descriptiveName\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;category\u0026#34;: \u0026#34;string\u0026#34; } ], \u0026#34;result\u0026#34;: [ [ {} ] ], \u0026#34;error\u0026#34;: { \u0026#34;message\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;sqlState\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;errorCode\u0026#34;: 0 }, \u0026#34;properties\u0026#34;: { \u0026#34;property1\u0026#34;: {}, \u0026#34;property2\u0026#34;: {} }, \u0026#34;failed\u0026#34;: false }   Responses    Status Meaning Description Schema     200 OK successful operation QueryResult   400 Bad Request Project does not exist. None    This operation does not require authentication  setUserProperty \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;/https://app.getrakam.com/user/set_property\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;POST\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Content-Type\u0026#34;: []string{\u0026#34;application/x-www-form-urlencoded\u0026#34;}, \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;POST\u0026#34;, \u0026#34;/https://app.getrakam.com/user/set_property\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  var headers = { \u0026#39;Content-Type\u0026#39;:\u0026#39;application/x-www-form-urlencoded\u0026#39;, \u0026#39;Accept\u0026#39;:\u0026#39;application/json\u0026#39; }; $.ajax({ url: \u0026#39;/https://app.getrakam.com/user/set_property\u0026#39;, method: \u0026#39;post\u0026#39;, headers: headers, success: function(data) { console.log(JSON.stringify(data)); } })   1 2 3 4 5  POST /https://app.getrakam.com/user/set_property HTTP/1.1 Content-Type: application/x-www-form-urlencoded Accept: application/json   POST /user/set_property\nSet user property\n Body parameter\n 1 2 3 4 5  project:stringuser:stringproperty:stringvalue:string  Parameters    Name In Type Required Description     body body object false none   » project body string false none   » user body string false none   » property body string false none   » value body string false none     Example responses\n  200 Response\n 1 2 3 4  { \u0026#34;success\u0026#34;: false, \u0026#34;message\u0026#34;: \u0026#34;string\u0026#34; }   Responses    Status Meaning Description Schema     200 OK successful operation JsonResponse   400 Bad Request User does not exist. None    This operation does not require authentication  user-mailbox Rakam Documentation\nget \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;/https://app.getrakam.com/user/mailbox/get\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;POST\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Content-Type\u0026#34;: []string{\u0026#34;application/x-www-form-urlencoded\u0026#34;}, \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, \u0026#34;read_key\u0026#34;: []string{\u0026#34;API_KEY\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;POST\u0026#34;, \u0026#34;/https://app.getrakam.com/user/mailbox/get\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  var headers = { \u0026#39;Content-Type\u0026#39;:\u0026#39;application/x-www-form-urlencoded\u0026#39;, \u0026#39;Accept\u0026#39;:\u0026#39;application/json\u0026#39;, \u0026#39;read_key\u0026#39;:\u0026#39;API_KEY\u0026#39; }; $.ajax({ url: \u0026#39;/https://app.getrakam.com/user/mailbox/get\u0026#39;, method: \u0026#39;post\u0026#39;, headers: headers, success: function(data) { console.log(JSON.stringify(data)); } })   1 2 3 4 5  POST /https://app.getrakam.com/user/mailbox/get HTTP/1.1 Content-Type: application/x-www-form-urlencoded Accept: application/json   POST /user/mailbox/get\nGet user mailbox\nReturns the last mails sent to the user\n Body parameter\n 1 2 3 4 5 6  project:stringuser:stringparent:0limit:0offset:0  Parameters    Name In Type Required Description     body body object false none   » project body string false none   » user body string false none   » parent body integer(int32) false none   » limit body integer(int32) false none   » offset body integer(int64) false none     Example responses\n  200 Response\n 1 2 3 4 5 6 7 8 9 10 11 12  [ { \u0026#34;id\u0026#34;: 0, \u0026#34;content\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;from_user\u0026#34;: {}, \u0026#34;to_user\u0026#34;: {}, \u0026#34;parentId\u0026#34;: 0, \u0026#34;seen\u0026#34;: false, \u0026#34;time\u0026#34;: 0, \u0026#34;project\u0026#34;: \u0026#34;string\u0026#34; } ]   Responses    Status Meaning Description Schema     200 OK successful operation Inline   400 Bad Request Project does not exist. None   404 Not Found User does not exist. None    Response Schema Status Code 200\n   Name Type Required Restrictions Description     anonymous [Message] false none none   » id integer(int32) false none none   » content string false none none   » from_user object false none none   » to_user object false none none   » parentId integer(int32) false none none   » seen boolean false none none   » time integer(int64) false none none   » project string false none none    To perform this operation, you must be authenticated by means of one of the following methods: read_key  getConnectedUsers \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;/https://app.getrakam.com/user/mailbox/getOnlineUsers\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;POST\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Content-Type\u0026#34;: []string{\u0026#34;application/x-www-form-urlencoded\u0026#34;}, \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, \u0026#34;read_key\u0026#34;: []string{\u0026#34;API_KEY\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;POST\u0026#34;, \u0026#34;/https://app.getrakam.com/user/mailbox/getOnlineUsers\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  var headers = { \u0026#39;Content-Type\u0026#39;:\u0026#39;application/x-www-form-urlencoded\u0026#39;, \u0026#39;Accept\u0026#39;:\u0026#39;application/json\u0026#39;, \u0026#39;read_key\u0026#39;:\u0026#39;API_KEY\u0026#39; }; $.ajax({ url: \u0026#39;/https://app.getrakam.com/user/mailbox/getOnlineUsers\u0026#39;, method: \u0026#39;post\u0026#39;, headers: headers, success: function(data) { console.log(JSON.stringify(data)); } })   1 2 3 4 5  POST /https://app.getrakam.com/user/mailbox/getOnlineUsers HTTP/1.1 Content-Type: application/x-www-form-urlencoded Accept: application/json   POST /user/mailbox/getOnlineUsers\nGet connected users\n Body parameter\n 1 2  project:string  Parameters    Name In Type Required Description     body body listQueries false none   » project body string false none     Example responses\n  200 Response\n 1 2 3  [ {} ]   Responses    Status Meaning Description Schema     200 OK successful operation Inline   400 Bad Request Project does not exist. None    Response Schema To perform this operation, you must be authenticated by means of one of the following methods: read_key  listen \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;/https://app.getrakam.com/user/mailbox/listen\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;GET\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;read_key\u0026#34;: []string{\u0026#34;API_KEY\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;GET\u0026#34;, \u0026#34;/https://app.getrakam.com/user/mailbox/listen\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  var headers = { \u0026#39;read_key\u0026#39;:\u0026#39;API_KEY\u0026#39; }; $.ajax({ url: \u0026#39;/https://app.getrakam.com/user/mailbox/listen\u0026#39;, method: \u0026#39;get\u0026#39;, headers: headers, success: function(data) { console.log(JSON.stringify(data)); } })   1 2  GET /https://app.getrakam.com/user/mailbox/listen HTTP/1.1   GET /user/mailbox/listen\nListen all mailboxes\nParameters    Name In Type Required Description     project query string false none    Responses    Status Meaning Description Schema     default Default successful operation None    To perform this operation, you must be authenticated by means of one of the following methods: read_key  markAsRead \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;/https://app.getrakam.com/user/mailbox/mark_as_read\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;POST\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Content-Type\u0026#34;: []string{\u0026#34;application/x-www-form-urlencoded\u0026#34;}, \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, \u0026#34;undefined\u0026#34;: []string{\u0026#34;API_KEY\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;POST\u0026#34;, \u0026#34;/https://app.getrakam.com/user/mailbox/mark_as_read\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  var headers = { \u0026#39;Content-Type\u0026#39;:\u0026#39;application/x-www-form-urlencoded\u0026#39;, \u0026#39;Accept\u0026#39;:\u0026#39;application/json\u0026#39;, \u0026#39;undefined\u0026#39;:\u0026#39;API_KEY\u0026#39; }; $.ajax({ url: \u0026#39;/https://app.getrakam.com/user/mailbox/mark_as_read\u0026#39;, method: \u0026#39;post\u0026#39;, headers: headers, success: function(data) { console.log(JSON.stringify(data)); } })   1 2 3 4 5  POST /https://app.getrakam.com/user/mailbox/mark_as_read HTTP/1.1 Content-Type: application/x-www-form-urlencoded Accept: application/json   POST /user/mailbox/mark_as_read\nMark mail as read\nMarks the specified mails as read.\n Body parameter\n 1 2 3 4 5  project:stringuser:stringmessage_ids:- 0  Parameters    Name In Type Required Description     body body object false none   » project body string false none   » user body string false none   » message_ids body [integer] false none     Example responses\n  200 Response\n 1 2 3 4  { \u0026#34;success\u0026#34;: false, \u0026#34;message\u0026#34;: \u0026#34;string\u0026#34; }   Responses    Status Meaning Description Schema     200 OK successful operation JsonResponse   400 Bad Request Project does not exist. None   404 Not Found User does not exist. None    To perform this operation, you must be authenticated by means of one of the following methods: write_key  send \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;/https://app.getrakam.com/user/mailbox/send\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;POST\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Content-Type\u0026#34;: []string{\u0026#34;application/x-www-form-urlencoded\u0026#34;}, \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, \u0026#34;undefined\u0026#34;: []string{\u0026#34;API_KEY\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;POST\u0026#34;, \u0026#34;/https://app.getrakam.com/user/mailbox/send\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  var headers = { \u0026#39;Content-Type\u0026#39;:\u0026#39;application/x-www-form-urlencoded\u0026#39;, \u0026#39;Accept\u0026#39;:\u0026#39;application/json\u0026#39;, \u0026#39;undefined\u0026#39;:\u0026#39;API_KEY\u0026#39; }; $.ajax({ url: \u0026#39;/https://app.getrakam.com/user/mailbox/send\u0026#39;, method: \u0026#39;post\u0026#39;, headers: headers, success: function(data) { console.log(JSON.stringify(data)); } })   1 2 3 4 5  POST /https://app.getrakam.com/user/mailbox/send HTTP/1.1 Content-Type: application/x-www-form-urlencoded Accept: application/json   POST /user/mailbox/send\nSend mail to user\nSends a mail to users mailbox\n Body parameter\n 1 2 3 4 5 6 7  project:stringfrom_user:stringto_user:stringparent:0message:stringtimestamp:0  Parameters    Name In Type Required Description     body body object false none   » project body string false none   » from_user body string false none   » to_user body string false none   » parent body integer(int32) false none   » message body string false none   » timestamp body integer(int64) false none     Example responses\n  200 Response\n 1 2 3 4 5 6 7 8 9 10  { \u0026#34;id\u0026#34;: 0, \u0026#34;content\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;from_user\u0026#34;: {}, \u0026#34;to_user\u0026#34;: {}, \u0026#34;parentId\u0026#34;: 0, \u0026#34;seen\u0026#34;: false, \u0026#34;time\u0026#34;: 0, \u0026#34;project\u0026#34;: \u0026#34;string\u0026#34; }   Responses    Status Meaning Description Schema     200 OK successful operation Message   400 Bad Request Project does not exist. None   404 Not Found User does not exist. None    To perform this operation, you must be authenticated by means of one of the following methods: write_key  realtime Rakam Documentation\ncreate \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;/https://app.getrakam.com/realtime/create\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;POST\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Content-Type\u0026#34;: []string{\u0026#34;application/x-www-form-urlencoded\u0026#34;}, \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, \u0026#34;read_key\u0026#34;: []string{\u0026#34;API_KEY\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;POST\u0026#34;, \u0026#34;/https://app.getrakam.com/realtime/create\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  var headers = { \u0026#39;Content-Type\u0026#39;:\u0026#39;application/x-www-form-urlencoded\u0026#39;, \u0026#39;Accept\u0026#39;:\u0026#39;application/json\u0026#39;, \u0026#39;read_key\u0026#39;:\u0026#39;API_KEY\u0026#39; }; $.ajax({ url: \u0026#39;/https://app.getrakam.com/realtime/create\u0026#39;, method: \u0026#39;post\u0026#39;, headers: headers, success: function(data) { console.log(JSON.stringify(data)); } })   1 2 3 4 5  POST /https://app.getrakam.com/realtime/create HTTP/1.1 Content-Type: application/x-www-form-urlencoded Accept: application/json   POST /realtime/create\nCreate report\n Body parameter\n 1 2 3 4 5 6 7 8 9 10 11  project:stringname:stringchart:stringcollections:- stringaggregation:stringtable_name:stringfilter:stringmeasure:stringdimension:string  Parameters    Name In Type Required Description     body body object false none   » project body string false none   » name body string false none   » chart body string false none   » collections body [string] false none   » aggregation body string false none   » table_name body string false none   » filter body string false none   » measure body string false none   » dimension body string false none     Example responses\n  200 Response\n 1 2 3 4  { \u0026#34;success\u0026#34;: false, \u0026#34;message\u0026#34;: \u0026#34;string\u0026#34; }   Responses    Status Meaning Description Schema     200 OK successful operation JsonResponse   400 Bad Request Project does not exist. None    To perform this operation, you must be authenticated by means of one of the following methods: read_key  delete \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;/https://app.getrakam.com/realtime/delete\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;POST\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Content-Type\u0026#34;: []string{\u0026#34;application/x-www-form-urlencoded\u0026#34;}, \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, \u0026#34;read_key\u0026#34;: []string{\u0026#34;API_KEY\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;POST\u0026#34;, \u0026#34;/https://app.getrakam.com/realtime/delete\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  var headers = { \u0026#39;Content-Type\u0026#39;:\u0026#39;application/x-www-form-urlencoded\u0026#39;, \u0026#39;Accept\u0026#39;:\u0026#39;application/json\u0026#39;, \u0026#39;read_key\u0026#39;:\u0026#39;API_KEY\u0026#39; }; $.ajax({ url: \u0026#39;/https://app.getrakam.com/realtime/delete\u0026#39;, method: \u0026#39;post\u0026#39;, headers: headers, success: function(data) { console.log(JSON.stringify(data)); } })   1 2 3 4 5  POST /https://app.getrakam.com/realtime/delete HTTP/1.1 Content-Type: application/x-www-form-urlencoded Accept: application/json   POST /realtime/delete\nDelete report\n Body parameter\n 1 2 3  project:stringname:string  Parameters    Name In Type Required Description     body body delete false none   » project body string false none   » name body string false none     Example responses\n  200 Response\n 1  {}   Responses    Status Meaning Description Schema     200 OK successful operation Inline    Response Schema To perform this operation, you must be authenticated by means of one of the following methods: read_key  get \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;/https://app.getrakam.com/realtime/get\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;POST\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Content-Type\u0026#34;: []string{\u0026#34;application/x-www-form-urlencoded\u0026#34;}, \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, \u0026#34;read_key\u0026#34;: []string{\u0026#34;API_KEY\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;POST\u0026#34;, \u0026#34;/https://app.getrakam.com/realtime/get\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  var headers = { \u0026#39;Content-Type\u0026#39;:\u0026#39;application/x-www-form-urlencoded\u0026#39;, \u0026#39;Accept\u0026#39;:\u0026#39;application/json\u0026#39;, \u0026#39;read_key\u0026#39;:\u0026#39;API_KEY\u0026#39; }; $.ajax({ url: \u0026#39;/https://app.getrakam.com/realtime/get\u0026#39;, method: \u0026#39;post\u0026#39;, headers: headers, success: function(data) { console.log(JSON.stringify(data)); } })   1 2 3 4 5  POST /https://app.getrakam.com/realtime/get HTTP/1.1 Content-Type: application/x-www-form-urlencoded Accept: application/json   POST /realtime/get\nGet report\n Body parameter\n 1 2 3 4 5 6 7  project:stringtable_name:stringfilter:stringaggregate:truedate_start:\u0026#39;2020-02-26T14:50:19Z\u0026#39;date_end:\u0026#39;2020-02-26T14:50:19Z\u0026#39;  Parameters    Name In Type Required Description     body body object false none   » project body string false none   » table_name body string false none   » filter body string false none   » aggregate body boolean false none   » date_start body string(date-time) false none   » date_end body string(date-time) false none     Example responses\n  200 Response\n 1  {}   Responses    Status Meaning Description Schema     200 OK successful operation Inline   400 Bad Request Report does not exist. None    Response Schema To perform this operation, you must be authenticated by means of one of the following methods: read_key  listReports \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;/https://app.getrakam.com/realtime/list\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;POST\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Content-Type\u0026#34;: []string{\u0026#34;application/x-www-form-urlencoded\u0026#34;}, \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, \u0026#34;read_key\u0026#34;: []string{\u0026#34;API_KEY\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;POST\u0026#34;, \u0026#34;/https://app.getrakam.com/realtime/list\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  var headers = { \u0026#39;Content-Type\u0026#39;:\u0026#39;application/x-www-form-urlencoded\u0026#39;, \u0026#39;Accept\u0026#39;:\u0026#39;application/json\u0026#39;, \u0026#39;read_key\u0026#39;:\u0026#39;API_KEY\u0026#39; }; $.ajax({ url: \u0026#39;/https://app.getrakam.com/realtime/list\u0026#39;, method: \u0026#39;post\u0026#39;, headers: headers, success: function(data) { console.log(JSON.stringify(data)); } })   1 2 3 4 5  POST /https://app.getrakam.com/realtime/list HTTP/1.1 Content-Type: application/x-www-form-urlencoded Accept: application/json   POST /realtime/list\nList reports\n Body parameter\n 1 2  project:string  Parameters    Name In Type Required Description     body body listQueries false none   » project body string false none     Example responses\n  200 Response\n 1 2 3  [ {} ]   Responses    Status Meaning Description Schema     200 OK successful operation Inline    Response Schema To perform this operation, you must be authenticated by means of one of the following methods: read_key  admin System related actions\nRakam Documentation\ngetModules \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;/https://app.getrakam.com/admin/modules\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;GET\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, \u0026#34;master_key\u0026#34;: []string{\u0026#34;API_KEY\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;GET\u0026#34;, \u0026#34;/https://app.getrakam.com/admin/modules\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  var headers = { \u0026#39;Accept\u0026#39;:\u0026#39;application/json\u0026#39;, \u0026#39;master_key\u0026#39;:\u0026#39;API_KEY\u0026#39; }; $.ajax({ url: \u0026#39;/https://app.getrakam.com/admin/modules\u0026#39;, method: \u0026#39;get\u0026#39;, headers: headers, success: function(data) { console.log(JSON.stringify(data)); } })   1 2 3 4  GET /https://app.getrakam.com/admin/modules HTTP/1.1 Accept: application/json   GET /admin/modules\nList installed modules\n Example responses\n  200 Response\n 1 2 3  [ {} ]   Responses    Status Meaning Description Schema     200 OK successful operation Inline    Response Schema To perform this operation, you must be authenticated by means of one of the following methods: master_key  event Event Analyzer\nRakam Documentation\ncollect \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;/https://app.getrakam.com/event/collect\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;POST\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Content-Type\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, \u0026#34;undefined\u0026#34;: []string{\u0026#34;API_KEY\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;POST\u0026#34;, \u0026#34;/https://app.getrakam.com/event/collect\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  var headers = { \u0026#39;Content-Type\u0026#39;:\u0026#39;application/json\u0026#39;, \u0026#39;undefined\u0026#39;:\u0026#39;API_KEY\u0026#39; }; $.ajax({ url: \u0026#39;/https://app.getrakam.com/event/collect\u0026#39;, method: \u0026#39;post\u0026#39;, headers: headers, success: function(data) { console.log(JSON.stringify(data)); } })   1 2 3 4  POST /https://app.getrakam.com/event/collect HTTP/1.1 Content-Type: application/json   POST /event/collect\nCollect event\n Body parameter\n 1 2 3 4 5  { \u0026#34;project\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;collection\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;properties\u0026#34;: {} }   Parameters    Name In Type Required Description     body body org.rakam.collection.event.EventCollectionHttpService.collect false none    Responses    Status Meaning Description Schema     400 Bad Request Project does not exist. None    To perform this operation, you must be authenticated by means of one of the following methods: write_key  execute \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;/https://app.getrakam.com/query/execute\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;POST\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Content-Type\u0026#34;: []string{\u0026#34;application/x-www-form-urlencoded\u0026#34;}, \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, \u0026#34;read_key\u0026#34;: []string{\u0026#34;API_KEY\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;POST\u0026#34;, \u0026#34;/https://app.getrakam.com/query/execute\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  var headers = { \u0026#39;Content-Type\u0026#39;:\u0026#39;application/x-www-form-urlencoded\u0026#39;, \u0026#39;Accept\u0026#39;:\u0026#39;application/json\u0026#39;, \u0026#39;read_key\u0026#39;:\u0026#39;API_KEY\u0026#39; }; $.ajax({ url: \u0026#39;/https://app.getrakam.com/query/execute\u0026#39;, method: \u0026#39;post\u0026#39;, headers: headers, success: function(data) { console.log(JSON.stringify(data)); } })   1 2 3 4 5  POST /https://app.getrakam.com/query/execute HTTP/1.1 Content-Type: application/x-www-form-urlencoded Accept: application/json   POST /query/execute\nAnalyze events\n Body parameter\n 1 2 3 4  project:stringquery:stringlimit:0  Parameters    Name In Type Required Description     body body execute false none   » project body string false none   » query body string false none   » limit body integer(int32) false none     Example responses\n  200 Response\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28  { \u0026#34;metadata\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;STRING\u0026#34;, \u0026#34;nullable\u0026#34;: false, \u0026#34;unique\u0026#34;: false, \u0026#34;descriptiveName\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;category\u0026#34;: \u0026#34;string\u0026#34; } ], \u0026#34;result\u0026#34;: [ [ {} ] ], \u0026#34;error\u0026#34;: { \u0026#34;message\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;sqlState\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;errorCode\u0026#34;: 0 }, \u0026#34;properties\u0026#34;: { \u0026#34;property1\u0026#34;: {}, \u0026#34;property2\u0026#34;: {} }, \u0026#34;failed\u0026#34;: false }   Responses    Status Meaning Description Schema     200 OK successful operation QueryResult    To perform this operation, you must be authenticated by means of one of the following methods: read_key  materialized-view Materialized view\nRakam Documentation\ncreate \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;/https://app.getrakam.com/materialized-view/create\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;POST\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Content-Type\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;POST\u0026#34;, \u0026#34;/https://app.getrakam.com/materialized-view/create\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  var headers = { \u0026#39;Content-Type\u0026#39;:\u0026#39;application/json\u0026#39;, \u0026#39;Accept\u0026#39;:\u0026#39;application/json\u0026#39; }; $.ajax({ url: \u0026#39;/https://app.getrakam.com/materialized-view/create\u0026#39;, method: \u0026#39;post\u0026#39;, headers: headers, success: function(data) { console.log(JSON.stringify(data)); } })   1 2 3 4 5  POST /https://app.getrakam.com/materialized-view/create HTTP/1.1 Content-Type: application/json Accept: application/json   POST /materialized-view/create\nCreate view\n Body parameter\n 1 2 3 4 5 6 7 8 9 10 11  { \u0026#34;project\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;table_name\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;query\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;update_interval\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;options\u0026#34;: { \u0026#34;property1\u0026#34;: {}, \u0026#34;property2\u0026#34;: {} } }   Parameters    Name In Type Required Description     body body MaterializedView true none     Example responses\n  200 Response\n 1 2 3 4  { \u0026#34;success\u0026#34;: false, \u0026#34;message\u0026#34;: \u0026#34;string\u0026#34; }   Responses    Status Meaning Description Schema     200 OK successful operation JsonResponse   400 Bad Request Project does not exist. None    This operation does not require authentication  delete \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;/https://app.getrakam.com/materialized-view/delete\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;POST\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Content-Type\u0026#34;: []string{\u0026#34;application/x-www-form-urlencoded\u0026#34;}, \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;POST\u0026#34;, \u0026#34;/https://app.getrakam.com/materialized-view/delete\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  var headers = { \u0026#39;Content-Type\u0026#39;:\u0026#39;application/x-www-form-urlencoded\u0026#39;, \u0026#39;Accept\u0026#39;:\u0026#39;application/json\u0026#39; }; $.ajax({ url: \u0026#39;/https://app.getrakam.com/materialized-view/delete\u0026#39;, method: \u0026#39;post\u0026#39;, headers: headers, success: function(data) { console.log(JSON.stringify(data)); } })   1 2 3 4 5  POST /https://app.getrakam.com/materialized-view/delete HTTP/1.1 Content-Type: application/x-www-form-urlencoded Accept: application/json   POST /materialized-view/delete\nDelete materialized view\n Body parameter\n 1 2 3  project:stringname:string  Parameters    Name In Type Required Description     body body delete false none   » project body string false none   » name body string false none     Example responses\n  200 Response\n 1 2 3 4  { \u0026#34;success\u0026#34;: false, \u0026#34;message\u0026#34;: \u0026#34;string\u0026#34; }   Responses    Status Meaning Description Schema     200 OK successful operation JsonResponse   400 Bad Request Project does not exist. None    This operation does not require authentication  get \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;/https://app.getrakam.com/materialized-view/get\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;POST\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Content-Type\u0026#34;: []string{\u0026#34;application/x-www-form-urlencoded\u0026#34;}, \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;POST\u0026#34;, \u0026#34;/https://app.getrakam.com/materialized-view/get\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  var headers = { \u0026#39;Content-Type\u0026#39;:\u0026#39;application/x-www-form-urlencoded\u0026#39;, \u0026#39;Accept\u0026#39;:\u0026#39;application/json\u0026#39; }; $.ajax({ url: \u0026#39;/https://app.getrakam.com/materialized-view/get\u0026#39;, method: \u0026#39;post\u0026#39;, headers: headers, success: function(data) { console.log(JSON.stringify(data)); } })   1 2 3 4 5  POST /https://app.getrakam.com/materialized-view/get HTTP/1.1 Content-Type: application/x-www-form-urlencoded Accept: application/json   POST /materialized-view/get\nGet view\n Body parameter\n 1 2 3  project:stringname:string  Parameters    Name In Type Required Description     body body delete false none   » project body string false none   » name body string false none     Example responses\n  200 Response\n 1  {}   Responses    Status Meaning Description Schema     200 OK successful operation Inline   400 Bad Request Project does not exist. None    Response Schema This operation does not require authentication  listViews \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;/https://app.getrakam.com/materialized-view/list\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;POST\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Content-Type\u0026#34;: []string{\u0026#34;application/x-www-form-urlencoded\u0026#34;}, \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;POST\u0026#34;, \u0026#34;/https://app.getrakam.com/materialized-view/list\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  var headers = { \u0026#39;Content-Type\u0026#39;:\u0026#39;application/x-www-form-urlencoded\u0026#39;, \u0026#39;Accept\u0026#39;:\u0026#39;application/json\u0026#39; }; $.ajax({ url: \u0026#39;/https://app.getrakam.com/materialized-view/list\u0026#39;, method: \u0026#39;post\u0026#39;, headers: headers, success: function(data) { console.log(JSON.stringify(data)); } })   1 2 3 4 5  POST /https://app.getrakam.com/materialized-view/list HTTP/1.1 Content-Type: application/x-www-form-urlencoded Accept: application/json   POST /materialized-view/list\nList views\n Body parameter\n 1 2  project:string  Parameters    Name In Type Required Description     body body listQueries false none   » project body string false none     Example responses\n  200 Response\n 1  {}   Responses    Status Meaning Description Schema     200 OK successful operation Inline   400 Bad Request Project does not exist. None    Response Schema This operation does not require authentication  schema \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;/https://app.getrakam.com/materialized-view/schema\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;POST\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Content-Type\u0026#34;: []string{\u0026#34;application/x-www-form-urlencoded\u0026#34;}, \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;POST\u0026#34;, \u0026#34;/https://app.getrakam.com/materialized-view/schema\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  var headers = { \u0026#39;Content-Type\u0026#39;:\u0026#39;application/x-www-form-urlencoded\u0026#39;, \u0026#39;Accept\u0026#39;:\u0026#39;application/json\u0026#39; }; $.ajax({ url: \u0026#39;/https://app.getrakam.com/materialized-view/schema\u0026#39;, method: \u0026#39;post\u0026#39;, headers: headers, success: function(data) { console.log(JSON.stringify(data)); } })   1 2 3 4 5  POST /https://app.getrakam.com/materialized-view/schema HTTP/1.1 Content-Type: application/x-www-form-urlencoded Accept: application/json   POST /materialized-view/schema\nGet schemas\n Body parameter\n 1 2  project:string  Parameters    Name In Type Required Description     body body listQueries false none   » project body string false none     Example responses\n  200 Response\n 1 2 3  [ {} ]   Responses    Status Meaning Description Schema     200 OK successful operation Inline   400 Bad Request Project does not exist. None    Response Schema This operation does not require authentication  update \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;/https://app.getrakam.com/materialized-view/update\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;GET\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;GET\u0026#34;, \u0026#34;/https://app.getrakam.com/materialized-view/update\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   1 2 3 4 5 6 7 8 9 10  $.ajax({ url: \u0026#39;/https://app.getrakam.com/materialized-view/update\u0026#39;, method: \u0026#39;get\u0026#39;, success: function(data) { console.log(JSON.stringify(data)); } })   1 2  GET /https://app.getrakam.com/materialized-view/update HTTP/1.1   GET /materialized-view/update\nUpdate view\nResponses    Status Meaning Description Schema     400 Bad Request Project does not exist. None    This operation does not require authentication  continuous-query Continuous query\nRakam Documentation\ncreate \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;/https://app.getrakam.com/continuous-query/create\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;POST\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Content-Type\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;POST\u0026#34;, \u0026#34;/https://app.getrakam.com/continuous-query/create\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  var headers = { \u0026#39;Content-Type\u0026#39;:\u0026#39;application/json\u0026#39;, \u0026#39;Accept\u0026#39;:\u0026#39;application/json\u0026#39; }; $.ajax({ url: \u0026#39;/https://app.getrakam.com/continuous-query/create\u0026#39;, method: \u0026#39;post\u0026#39;, headers: headers, success: function(data) { console.log(JSON.stringify(data)); } })   1 2 3 4 5  POST /https://app.getrakam.com/continuous-query/create HTTP/1.1 Content-Type: application/json Accept: application/json   POST /continuous-query/create\nCreate stream\n Body parameter\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  { \u0026#34;project\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;query\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;table_name\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;collections\u0026#34;: [ \u0026#34;string\u0026#34; ], \u0026#34;partition_keys\u0026#34;: [ \u0026#34;string\u0026#34; ], \u0026#34;options\u0026#34;: { \u0026#34;property1\u0026#34;: {}, \u0026#34;property2\u0026#34;: {} } }   Parameters    Name In Type Required Description     body body ContinuousQuery true none     Example responses\n  200 Response\n 1 2 3 4  { \u0026#34;success\u0026#34;: false, \u0026#34;message\u0026#34;: \u0026#34;string\u0026#34; }   Responses    Status Meaning Description Schema     200 OK successful operation JsonResponse   400 Bad Request Project does not exist. None    This operation does not require authentication  delete \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;/https://app.getrakam.com/continuous-query/delete\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;POST\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Content-Type\u0026#34;: []string{\u0026#34;application/x-www-form-urlencoded\u0026#34;}, \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;POST\u0026#34;, \u0026#34;/https://app.getrakam.com/continuous-query/delete\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  var headers = { \u0026#39;Content-Type\u0026#39;:\u0026#39;application/x-www-form-urlencoded\u0026#39;, \u0026#39;Accept\u0026#39;:\u0026#39;application/json\u0026#39; }; $.ajax({ url: \u0026#39;/https://app.getrakam.com/continuous-query/delete\u0026#39;, method: \u0026#39;post\u0026#39;, headers: headers, success: function(data) { console.log(JSON.stringify(data)); } })   1 2 3 4 5  POST /https://app.getrakam.com/continuous-query/delete HTTP/1.1 Content-Type: application/x-www-form-urlencoded Accept: application/json   POST /continuous-query/delete\nDelete stream\n Body parameter\n 1 2 3  project:stringname:string  Parameters    Name In Type Required Description     body body delete false none   » project body string false none   » name body string false none     Example responses\n  200 Response\n 1  {}   Responses    Status Meaning Description Schema     200 OK successful operation Inline   400 Bad Request Project does not exist. None    Response Schema This operation does not require authentication  listQueries \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;/https://app.getrakam.com/continuous-query/list\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;POST\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Content-Type\u0026#34;: []string{\u0026#34;application/x-www-form-urlencoded\u0026#34;}, \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;POST\u0026#34;, \u0026#34;/https://app.getrakam.com/continuous-query/list\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  var headers = { \u0026#39;Content-Type\u0026#39;:\u0026#39;application/x-www-form-urlencoded\u0026#39;, \u0026#39;Accept\u0026#39;:\u0026#39;application/json\u0026#39; }; $.ajax({ url: \u0026#39;/https://app.getrakam.com/continuous-query/list\u0026#39;, method: \u0026#39;post\u0026#39;, headers: headers, success: function(data) { console.log(JSON.stringify(data)); } })   1 2 3 4 5  POST /https://app.getrakam.com/continuous-query/list HTTP/1.1 Content-Type: application/x-www-form-urlencoded Accept: application/json   POST /continuous-query/list\nList queries\n Body parameter\n 1 2  project:string  Parameters    Name In Type Required Description     body body listQueries false none   » project body string false none     Example responses\n  200 Response\n 1  {}   Responses    Status Meaning Description Schema     200 OK successful operation Inline   400 Bad Request Project does not exist. None    Response Schema This operation does not require authentication  schema \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;/https://app.getrakam.com/continuous-query/schema\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;POST\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Content-Type\u0026#34;: []string{\u0026#34;application/x-www-form-urlencoded\u0026#34;}, \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;POST\u0026#34;, \u0026#34;/https://app.getrakam.com/continuous-query/schema\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  var headers = { \u0026#39;Content-Type\u0026#39;:\u0026#39;application/x-www-form-urlencoded\u0026#39;, \u0026#39;Accept\u0026#39;:\u0026#39;application/json\u0026#39; }; $.ajax({ url: \u0026#39;/https://app.getrakam.com/continuous-query/schema\u0026#39;, method: \u0026#39;post\u0026#39;, headers: headers, success: function(data) { console.log(JSON.stringify(data)); } })   1 2 3 4 5  POST /https://app.getrakam.com/continuous-query/schema HTTP/1.1 Content-Type: application/x-www-form-urlencoded Accept: application/json   POST /continuous-query/schema\nGet query schema\n Body parameter\n 1 2  project:string  Parameters    Name In Type Required Description     body body listQueries false none   » project body string false none     Example responses\n  200 Response\n 1 2 3  [ {} ]   Responses    Status Meaning Description Schema     200 OK successful operation Inline   400 Bad Request Project does not exist. None    Response Schema This operation does not require authentication  event-explorer execute \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;/https://app.getrakam.com/event-explorer/analyze\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;POST\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Content-Type\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, \u0026#34;read_key\u0026#34;: []string{\u0026#34;API_KEY\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;POST\u0026#34;, \u0026#34;/https://app.getrakam.com/event-explorer/analyze\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  var headers = { \u0026#39;Content-Type\u0026#39;:\u0026#39;application/json\u0026#39;, \u0026#39;Accept\u0026#39;:\u0026#39;application/json\u0026#39;, \u0026#39;read_key\u0026#39;:\u0026#39;API_KEY\u0026#39; }; $.ajax({ url: \u0026#39;/https://app.getrakam.com/event-explorer/analyze\u0026#39;, method: \u0026#39;post\u0026#39;, headers: headers, success: function(data) { console.log(JSON.stringify(data)); } })   1 2 3 4 5  POST /https://app.getrakam.com/event-explorer/analyze HTTP/1.1 Content-Type: application/json Accept: application/json   POST /event-explorer/analyze\nPerform simple query on event data\n Body parameter\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21  { \u0026#34;project\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;measure\u0026#34;: { \u0026#34;column\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;aggregation\u0026#34;: \u0026#34;COUNT\u0026#34; }, \u0026#34;grouping\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;COLUMN\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;string\u0026#34; }, \u0026#34;segment\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;COLUMN\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;string\u0026#34; }, \u0026#34;filterExpression\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;startDate\u0026#34;: \u0026#34;2020-02-26\u0026#34;, \u0026#34;endDate\u0026#34;: \u0026#34;2020-02-26\u0026#34;, \u0026#34;collections\u0026#34;: [ \u0026#34;string\u0026#34; ] }   Parameters    Name In Type Required Description     body body EventExplorerHttpService_execute true none     Example responses\n  200 Response\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28  { \u0026#34;metadata\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;STRING\u0026#34;, \u0026#34;nullable\u0026#34;: false, \u0026#34;unique\u0026#34;: false, \u0026#34;descriptiveName\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;category\u0026#34;: \u0026#34;string\u0026#34; } ], \u0026#34;result\u0026#34;: [ [ {} ] ], \u0026#34;error\u0026#34;: { \u0026#34;message\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;sqlState\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;errorCode\u0026#34;: 0 }, \u0026#34;properties\u0026#34;: { \u0026#34;property1\u0026#34;: {}, \u0026#34;property2\u0026#34;: {} }, \u0026#34;failed\u0026#34;: false }   Responses    Status Meaning Description Schema     200 OK successful operation QueryResult    To perform this operation, you must be authenticated by means of one of the following methods: read_key  getEventDimensions \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;/https://app.getrakam.com/event-explorer/event_dimensions\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;POST\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Content-Type\u0026#34;: []string{\u0026#34;application/x-www-form-urlencoded\u0026#34;}, \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, \u0026#34;read_key\u0026#34;: []string{\u0026#34;API_KEY\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;POST\u0026#34;, \u0026#34;/https://app.getrakam.com/event-explorer/event_dimensions\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  var headers = { \u0026#39;Content-Type\u0026#39;:\u0026#39;application/x-www-form-urlencoded\u0026#39;, \u0026#39;Accept\u0026#39;:\u0026#39;application/json\u0026#39;, \u0026#39;read_key\u0026#39;:\u0026#39;API_KEY\u0026#39; }; $.ajax({ url: \u0026#39;/https://app.getrakam.com/event-explorer/event_dimensions\u0026#39;, method: \u0026#39;post\u0026#39;, headers: headers, success: function(data) { console.log(JSON.stringify(data)); } })   1 2 3 4 5  POST /https://app.getrakam.com/event-explorer/event_dimensions HTTP/1.1 Content-Type: application/x-www-form-urlencoded Accept: application/json   POST /event-explorer/event_dimensions\nEvent statistics\n Body parameter\n 1 2  project:string  Parameters    Name In Type Required Description     body body listQueries false none   » project body string false none     Example responses\n  200 Response\n 1 2 3  [ {} ]   Responses    Status Meaning Description Schema     200 OK successful operation Inline    Response Schema To perform this operation, you must be authenticated by means of one of the following methods: read_key  getExtraDimensions \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;/https://app.getrakam.com/event-explorer/extra_dimensions\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;POST\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Content-Type\u0026#34;: []string{\u0026#34;application/x-www-form-urlencoded\u0026#34;}, \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, \u0026#34;read_key\u0026#34;: []string{\u0026#34;API_KEY\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;POST\u0026#34;, \u0026#34;/https://app.getrakam.com/event-explorer/extra_dimensions\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  var headers = { \u0026#39;Content-Type\u0026#39;:\u0026#39;application/x-www-form-urlencoded\u0026#39;, \u0026#39;Accept\u0026#39;:\u0026#39;application/json\u0026#39;, \u0026#39;read_key\u0026#39;:\u0026#39;API_KEY\u0026#39; }; $.ajax({ url: \u0026#39;/https://app.getrakam.com/event-explorer/extra_dimensions\u0026#39;, method: \u0026#39;post\u0026#39;, headers: headers, success: function(data) { console.log(JSON.stringify(data)); } })   1 2 3 4 5  POST /https://app.getrakam.com/event-explorer/extra_dimensions HTTP/1.1 Content-Type: application/x-www-form-urlencoded Accept: application/json   POST /event-explorer/extra_dimensions\nEvent statistics\n Body parameter\n 1 2  project:string  Parameters    Name In Type Required Description     body body listQueries false none   » project body string false none     Example responses\n  200 Response\n 1 2 3  [ {} ]   Responses    Status Meaning Description Schema     200 OK successful operation Inline    Response Schema To perform this operation, you must be authenticated by means of one of the following methods: read_key  getEventStatistics \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;/https://app.getrakam.com/event-explorer/statistics\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;POST\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Content-Type\u0026#34;: []string{\u0026#34;application/x-www-form-urlencoded\u0026#34;}, \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, \u0026#34;read_key\u0026#34;: []string{\u0026#34;API_KEY\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;POST\u0026#34;, \u0026#34;/https://app.getrakam.com/event-explorer/statistics\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  var headers = { \u0026#39;Content-Type\u0026#39;:\u0026#39;application/x-www-form-urlencoded\u0026#39;, \u0026#39;Accept\u0026#39;:\u0026#39;application/json\u0026#39;, \u0026#39;read_key\u0026#39;:\u0026#39;API_KEY\u0026#39; }; $.ajax({ url: \u0026#39;/https://app.getrakam.com/event-explorer/statistics\u0026#39;, method: \u0026#39;post\u0026#39;, headers: headers, success: function(data) { console.log(JSON.stringify(data)); } })   1 2 3 4 5  POST /https://app.getrakam.com/event-explorer/statistics HTTP/1.1 Content-Type: application/x-www-form-urlencoded Accept: application/json   POST /event-explorer/statistics\nEvent statistics\n Body parameter\n 1 2 3 4 5  project:stringdimension:stringstartDate:\u0026#39;2020-02-26\u0026#39;endDate:\u0026#39;2020-02-26\u0026#39;  Parameters    Name In Type Required Description     body body object false none   » project body string false none   » dimension body string false none   » startDate body string(date) false none   » endDate body string(date) false none     Example responses\n  200 Response\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28  { \u0026#34;metadata\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;STRING\u0026#34;, \u0026#34;nullable\u0026#34;: false, \u0026#34;unique\u0026#34;: false, \u0026#34;descriptiveName\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;category\u0026#34;: \u0026#34;string\u0026#34; } ], \u0026#34;result\u0026#34;: [ [ {} ] ], \u0026#34;error\u0026#34;: { \u0026#34;message\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;sqlState\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;errorCode\u0026#34;: 0 }, \u0026#34;properties\u0026#34;: { \u0026#34;property1\u0026#34;: {}, \u0026#34;property2\u0026#34;: {} }, \u0026#34;failed\u0026#34;: false }   Responses    Status Meaning Description Schema     200 OK successful operation QueryResult    To perform this operation, you must be authenticated by means of one of the following methods: read_key  project createProject \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;/https://app.getrakam.com/project/create\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;POST\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Content-Type\u0026#34;: []string{\u0026#34;application/x-www-form-urlencoded\u0026#34;}, \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, \u0026#34;master_key\u0026#34;: []string{\u0026#34;API_KEY\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;POST\u0026#34;, \u0026#34;/https://app.getrakam.com/project/create\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  var headers = { \u0026#39;Content-Type\u0026#39;:\u0026#39;application/x-www-form-urlencoded\u0026#39;, \u0026#39;Accept\u0026#39;:\u0026#39;application/json\u0026#39;, \u0026#39;master_key\u0026#39;:\u0026#39;API_KEY\u0026#39; }; $.ajax({ url: \u0026#39;/https://app.getrakam.com/project/create\u0026#39;, method: \u0026#39;post\u0026#39;, headers: headers, success: function(data) { console.log(JSON.stringify(data)); } })   1 2 3 4 5  POST /https://app.getrakam.com/project/create HTTP/1.1 Content-Type: application/x-www-form-urlencoded Accept: application/json   POST /project/create\nCreate project\n Body parameter\n 1 2  name:string  Parameters    Name In Type Required Description     body body object false none   » name body string false none     Example responses\n  200 Response\n 1 2 3 4  { \u0026#34;success\u0026#34;: false, \u0026#34;message\u0026#34;: \u0026#34;string\u0026#34; }   Responses    Status Meaning Description Schema     200 OK successful operation JsonResponse    To perform this operation, you must be authenticated by means of one of the following methods: master_key  getProjects \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;/https://app.getrakam.com/project/list\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;GET\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, \u0026#34;master_key\u0026#34;: []string{\u0026#34;API_KEY\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;GET\u0026#34;, \u0026#34;/https://app.getrakam.com/project/list\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  var headers = { \u0026#39;Accept\u0026#39;:\u0026#39;application/json\u0026#39;, \u0026#39;master_key\u0026#39;:\u0026#39;API_KEY\u0026#39; }; $.ajax({ url: \u0026#39;/https://app.getrakam.com/project/list\u0026#39;, method: \u0026#39;get\u0026#39;, headers: headers, success: function(data) { console.log(JSON.stringify(data)); } })   1 2 3 4  GET /https://app.getrakam.com/project/list HTTP/1.1 Accept: application/json   GET /project/list\nList created projects\n Example responses\n  200 Response\n 1 2 3  [ {} ]   Responses    Status Meaning Description Schema     200 OK successful operation Inline    Response Schema To perform this operation, you must be authenticated by means of one of the following methods: master_key  schema \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;/https://app.getrakam.com/project/schema\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;POST\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Content-Type\u0026#34;: []string{\u0026#34;application/x-www-form-urlencoded\u0026#34;}, \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, \u0026#34;master_key\u0026#34;: []string{\u0026#34;API_KEY\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;POST\u0026#34;, \u0026#34;/https://app.getrakam.com/project/schema\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  var headers = { \u0026#39;Content-Type\u0026#39;:\u0026#39;application/x-www-form-urlencoded\u0026#39;, \u0026#39;Accept\u0026#39;:\u0026#39;application/json\u0026#39;, \u0026#39;master_key\u0026#39;:\u0026#39;API_KEY\u0026#39; }; $.ajax({ url: \u0026#39;/https://app.getrakam.com/project/schema\u0026#39;, method: \u0026#39;post\u0026#39;, headers: headers, success: function(data) { console.log(JSON.stringify(data)); } })   1 2 3 4 5  POST /https://app.getrakam.com/project/schema HTTP/1.1 Content-Type: application/x-www-form-urlencoded Accept: application/json   POST /project/schema\nGet collection schema\n Body parameter\n 1 2  project:string  Parameters    Name In Type Required Description     body body listQueries false none   » project body string false none     Example responses\n  200 Response\n 1 2 3  [ {} ]   Responses    Status Meaning Description Schema     200 OK successful operation Inline   400 Bad Request Project does not exist. None    Response Schema To perform this operation, you must be authenticated by means of one of the following methods: master_key  Schemas UserHttpService_search \n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  { \u0026#34;project\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;filter\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;event_filters\u0026#34;: [ { \u0026#34;collection\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;aggregation\u0026#34;: { \u0026#34;field\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;minimum\u0026#34;: 0, \u0026#34;maximum\u0026#34;: 0, \u0026#34;type\u0026#34;: \u0026#34;COUNT\u0026#34; }, \u0026#34;filterExpression\u0026#34;: \u0026#34;string\u0026#34; } ], \u0026#34;sorting\u0026#34;: { \u0026#34;column\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;order\u0026#34;: \u0026#34;asc\u0026#34; }, \u0026#34;offset\u0026#34;: 0, \u0026#34;limit\u0026#34;: 0 }   Properties    Name Type Required Restrictions Description     project string false none none   filter string false none none   event_filters [EventFilter] false none none   sorting Sorting false none none   offset integer(int32) false none none   limit integer(int32) false none none    User \n1 2 3 4 5 6 7 8 9  { \u0026#34;project\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;id\u0026#34;: {}, \u0026#34;properties\u0026#34;: { \u0026#34;property1\u0026#34;: {}, \u0026#34;property2\u0026#34;: {} } }   Properties    Name Type Required Restrictions Description     project string false none none   id object false none none   properties object false none none   » additionalProperties object false none none    Message \n1 2 3 4 5 6 7 8 9 10 11  { \u0026#34;id\u0026#34;: 0, \u0026#34;content\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;from_user\u0026#34;: {}, \u0026#34;to_user\u0026#34;: {}, \u0026#34;parentId\u0026#34;: 0, \u0026#34;seen\u0026#34;: false, \u0026#34;time\u0026#34;: 0, \u0026#34;project\u0026#34;: \u0026#34;string\u0026#34; }   Properties    Name Type Required Restrictions Description     id integer(int32) false none none   content string false none none   from_user object false none none   to_user object false none none   parentId integer(int32) false none none   seen boolean false none none   time integer(int64) false none none   project string false none none    Reference \n1 2 3 4 5  { \u0026#34;type\u0026#34;: \u0026#34;COLUMN\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;string\u0026#34; }   Properties    Name Type Required Restrictions Description     type string false none none   value string false none none    Enumerated Values    Property Value     type COLUMN   type REFERENCE    UserHttpService_create \n1 2 3 4 5 6 7 8  { \u0026#34;project\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;properties\u0026#34;: { \u0026#34;property1\u0026#34;: {}, \u0026#34;property2\u0026#34;: {} } }   Properties    Name Type Required Restrictions Description     project string false none none   properties object false none none   » additionalProperties object false none none    EventFilter \n1 2 3 4 5 6 7 8 9 10 11  { \u0026#34;collection\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;aggregation\u0026#34;: { \u0026#34;field\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;minimum\u0026#34;: 0, \u0026#34;maximum\u0026#34;: 0, \u0026#34;type\u0026#34;: \u0026#34;COUNT\u0026#34; }, \u0026#34;filterExpression\u0026#34;: \u0026#34;string\u0026#34; }   Properties    Name Type Required Restrictions Description     collection string false none none   aggregation EventFilterAggregation false none none   filterExpression string false none none    JsonResponse \n1 2 3 4 5  { \u0026#34;success\u0026#34;: false, \u0026#34;message\u0026#34;: \u0026#34;string\u0026#34; }   Properties    Name Type Required Restrictions Description     success boolean false none none   message string false none none    Sorting \n1 2 3 4 5  { \u0026#34;column\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;order\u0026#34;: \u0026#34;asc\u0026#34; }   Properties    Name Type Required Restrictions Description     column string false none none   order string false none none    Enumerated Values    Property Value     order asc   order desc    SchemaField \n1 2 3 4 5 6 7 8 9 10  { \u0026#34;name\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;STRING\u0026#34;, \u0026#34;nullable\u0026#34;: false, \u0026#34;unique\u0026#34;: false, \u0026#34;descriptiveName\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;category\u0026#34;: \u0026#34;string\u0026#34; }   Properties    Name Type Required Restrictions Description     name string false read-only none   type string false read-only none   nullable boolean false read-only none   unique boolean false read-only none   descriptiveName string false read-only none   description string false read-only none   category string false read-only none    Enumerated Values    Property Value     type STRING   type ARRAY   type LONG   type DOUBLE   type BOOLEAN   type DATE   type HYPERLOGLOG   type TIME   type TIMESTAMP    QueryResult \n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29  { \u0026#34;metadata\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;STRING\u0026#34;, \u0026#34;nullable\u0026#34;: false, \u0026#34;unique\u0026#34;: false, \u0026#34;descriptiveName\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;category\u0026#34;: \u0026#34;string\u0026#34; } ], \u0026#34;result\u0026#34;: [ [ {} ] ], \u0026#34;error\u0026#34;: { \u0026#34;message\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;sqlState\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;errorCode\u0026#34;: 0 }, \u0026#34;properties\u0026#34;: { \u0026#34;property1\u0026#34;: {}, \u0026#34;property2\u0026#34;: {} }, \u0026#34;failed\u0026#34;: false }   Properties    Name Type Required Restrictions Description     metadata [SchemaField] false none none   result [array] false none none   error QueryError false none none   properties object false none none   » additionalProperties object false none none   failed boolean false none none    ContinuousQuery \n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  { \u0026#34;project\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;query\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;table_name\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;collections\u0026#34;: [ \u0026#34;string\u0026#34; ], \u0026#34;partition_keys\u0026#34;: [ \u0026#34;string\u0026#34; ], \u0026#34;options\u0026#34;: { \u0026#34;property1\u0026#34;: {}, \u0026#34;property2\u0026#34;: {} } }   Properties    Name Type Required Restrictions Description     project string false none none   name string false none none   query string false none none   table_name string false none none   collections [string] false none none   partition_keys [string] false none none   options object false none none   » additionalProperties object false none none    EventExplorerHttpService_execute \n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22  { \u0026#34;project\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;measure\u0026#34;: { \u0026#34;column\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;aggregation\u0026#34;: \u0026#34;COUNT\u0026#34; }, \u0026#34;grouping\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;COLUMN\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;string\u0026#34; }, \u0026#34;segment\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;COLUMN\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;string\u0026#34; }, \u0026#34;filterExpression\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;startDate\u0026#34;: \u0026#34;2020-02-26\u0026#34;, \u0026#34;endDate\u0026#34;: \u0026#34;2020-02-26\u0026#34;, \u0026#34;collections\u0026#34;: [ \u0026#34;string\u0026#34; ] }   Properties    Name Type Required Restrictions Description     project string false none none   measure Measure false none none   grouping Reference false none none   segment Reference false none none   filterExpression string false none none   startDate string(date) false none none   endDate string(date) false none none   collections [string] false none none    Measure \n1 2 3 4 5  { \u0026#34;column\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;aggregation\u0026#34;: \u0026#34;COUNT\u0026#34; }   Properties    Name Type Required Restrictions Description     column string false none none   aggregation string false none none    Enumerated Values    Property Value     aggregation COUNT   aggregation COUNT_UNIQUE   aggregation SUM   aggregation MINIMUM   aggregation MAXIMUM   aggregation APPROXIMATE_UNIQUE   aggregation VARIANCE   aggregation POPULATION_VARIANCE   aggregation STANDARD_DEVIATION   aggregation AVERAGE    CreateUserResponse \n1 2 3 4  { \u0026#34;identifier\u0026#34;: {} }   Properties    Name Type Required Restrictions Description     identifier object false none none    MetadataResponse \n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  { \u0026#34;columns\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;STRING\u0026#34;, \u0026#34;nullable\u0026#34;: false, \u0026#34;unique\u0026#34;: false, \u0026#34;descriptiveName\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;category\u0026#34;: \u0026#34;string\u0026#34; } ], \u0026#34;identifierColumn\u0026#34;: \u0026#34;string\u0026#34; }   Properties    Name Type Required Restrictions Description     columns [SchemaField] false none none   identifierColumn string false none none    org.rakam.collection.event.EventCollectionHttpService.collect \n1 2 3 4 5 6  { \u0026#34;project\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;collection\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;properties\u0026#34;: {} }   Properties    Name Type Required Restrictions Description     project string true none none   collection string true none none   properties object true none none    MaterializedView \n1 2 3 4 5 6 7 8 9 10 11 12  { \u0026#34;project\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;table_name\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;query\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;update_interval\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;options\u0026#34;: { \u0026#34;property1\u0026#34;: {}, \u0026#34;property2\u0026#34;: {} } }   Properties    Name Type Required Restrictions Description     project string false none none   name string false none none   table_name string false none none   query string false none none   update_interval string false none none   options object false none none   » additionalProperties object false none none    QueryError \n1 2 3 4 5 6  { \u0026#34;message\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;sqlState\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;errorCode\u0026#34;: 0 }   Properties    Name Type Required Restrictions Description     message string false none none   sqlState string false none none   errorCode integer(int32) false none none    EventFilterAggregation \n1 2 3 4 5 6 7  { \u0026#34;field\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;minimum\u0026#34;: 0, \u0026#34;maximum\u0026#34;: 0, \u0026#34;type\u0026#34;: \u0026#34;COUNT\u0026#34; }   Properties    Name Type Required Restrictions Description     field string false none none   minimum integer(int64) false none none   maximum integer(int64) false none none   type string false none none    Enumerated Values    Property Value     type COUNT   type COUNT_UNIQUE   type SUM   type MINIMUM   type MAXIMUM   type APPROXIMATE_UNIQUE   type VARIANCE   type POPULATION_VARIANCE   type STANDARD_DEVIATION   type AVERAGE    FunnelQuery \n1 2 3 4 5 6 7 8 9 10 11 12 13 14  { \u0026#34;project\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;steps\u0026#34;: [ { \u0026#34;collection\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;filterExpression\u0026#34;: \u0026#34;string\u0026#34; } ], \u0026#34;dimension\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;startDate\u0026#34;: \u0026#34;2020-02-26\u0026#34;, \u0026#34;endDate\u0026#34;: \u0026#34;2020-02-26\u0026#34;, \u0026#34;enableOtherGrouping\u0026#34;: true }   Properties    Name Type Required Restrictions Description     project string false none none   steps [FunnelStep] false none none   dimension string false none none   startDate string(date) false none none   endDate string(date) false none none   enableOtherGrouping boolean false none none    FunnelStep \n1 2 3 4 5  { \u0026#34;collection\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;filterExpression\u0026#34;: \u0026#34;string\u0026#34; }   Properties    Name Type Required Restrictions Description     collection string false none none   filterExpression string false none none    ","description":"","id":22,"section":"docs","tags":null,"title":"Rakam API Documentation","uri":"/ko/docs/apis/rakam/"},{"content":"Swagger Petstore v1.0.3  Scroll down for code samples, example requests and responses. Select a language for code samples from the tabs above or the mobile navigation menu.\n This is a sample server Petstore server. You can find out more about Swagger at http://swagger.io or on irc.freenode.net, #swagger. For this sample, you can use the api key special-key to test the authorization filters.\nBase URLs:\n  https://petstore.swagger.io/v2\n  http://petstore.swagger.io/v2\n  Terms of service\nEmail: Support\nLicense: Apache 2.0\nAuthentication  API Key (api_key)  Parameter Name: api_key, in: header.      oAuth2 authentication.\n Flow: implicit Authorization URL = https://petstore.swagger.io/oauth/authorize       Scope Scope Description     read:pets read your pets   write:pets modify pets in your account    pet Everything about your Pets\nFind out more\ngetPetById \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;https://petstore.swagger.io/v2/pet/{petId}\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;GET\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, \u0026#34;api_key\u0026#34;: []string{\u0026#34;API_KEY\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;GET\u0026#34;, \u0026#34;https://petstore.swagger.io/v2/pet/{petId}\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  var headers = { \u0026#39;Accept\u0026#39;:\u0026#39;application/json\u0026#39;, \u0026#39;api_key\u0026#39;:\u0026#39;API_KEY\u0026#39; }; $.ajax({ url: \u0026#39;https://petstore.swagger.io/v2/pet/{petId}\u0026#39;, method: \u0026#39;get\u0026#39;, headers: headers, success: function(data) { console.log(JSON.stringify(data)); } })   1 2 3 4  GET https://petstore.swagger.io/v2/pet/{petId} HTTP/1.1 Host: petstore.swagger.io Accept: application/json   GET /pet/{petId}\nFind pet by ID\nReturns a single pet\nParameters    Name In Type Required Description     petId path integer(int64) true ID of pet to return     Example responses\n  200 Response\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  { \u0026#34;id\u0026#34;: 0, \u0026#34;category\u0026#34;: { \u0026#34;id\u0026#34;: 0, \u0026#34;name\u0026#34;: \u0026#34;string\u0026#34; }, \u0026#34;name\u0026#34;: \u0026#34;doggie\u0026#34;, \u0026#34;photoUrls\u0026#34;: [ \u0026#34;string\u0026#34; ], \u0026#34;tags\u0026#34;: [ { \u0026#34;id\u0026#34;: 0, \u0026#34;name\u0026#34;: \u0026#34;string\u0026#34; } ], \u0026#34;status\u0026#34;: \u0026#34;available\u0026#34; }   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34; ?\u0026gt; \u0026lt;Pet\u0026gt; \u0026lt;id\u0026gt;0\u0026lt;/id\u0026gt; \u0026lt;category\u0026gt; \u0026lt;id\u0026gt;0\u0026lt;/id\u0026gt; \u0026lt;name\u0026gt;string\u0026lt;/name\u0026gt; \u0026lt;/category\u0026gt; \u0026lt;name\u0026gt;doggie\u0026lt;/name\u0026gt; \u0026lt;photoUrls\u0026gt;string\u0026lt;/photoUrls\u0026gt; \u0026lt;tags\u0026gt; \u0026lt;id\u0026gt;0\u0026lt;/id\u0026gt; \u0026lt;name\u0026gt;string\u0026lt;/name\u0026gt; \u0026lt;/tags\u0026gt; \u0026lt;status\u0026gt;available\u0026lt;/status\u0026gt; \u0026lt;/Pet\u0026gt;   Responses    Status Meaning Description Schema     200 OK successful operation Pet   400 Bad Request Invalid ID supplied None   404 Not Found Pet not found None    To perform this operation, you must be authenticated by means of one of the following methods: api_key  updatePetWithForm \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;https://petstore.swagger.io/v2/pet/{petId}\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;POST\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Content-Type\u0026#34;: []string{\u0026#34;application/x-www-form-urlencoded\u0026#34;}, \u0026#34;Authorization\u0026#34;: []string{\u0026#34;Bearer {access-token}\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;POST\u0026#34;, \u0026#34;https://petstore.swagger.io/v2/pet/{petId}\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  var headers = { \u0026#39;Content-Type\u0026#39;:\u0026#39;application/x-www-form-urlencoded\u0026#39;, \u0026#39;Authorization\u0026#39;:\u0026#39;Bearer {access-token}\u0026#39; }; $.ajax({ url: \u0026#39;https://petstore.swagger.io/v2/pet/{petId}\u0026#39;, method: \u0026#39;post\u0026#39;, headers: headers, success: function(data) { console.log(JSON.stringify(data)); } })   1 2 3 4  POST https://petstore.swagger.io/v2/pet/{petId} HTTP/1.1 Host: petstore.swagger.io Content-Type: application/x-www-form-urlencoded   POST /pet/{petId}\nUpdates a pet in the store with form data\n Body parameter\n 1 2 3  name:stringstatus:string  Parameters    Name In Type Required Description     petId path integer(int64) true ID of pet that needs to be updated   body body object false none   » name body string false Updated name of the pet   » status body string false Updated status of the pet    Responses    Status Meaning Description Schema     405 Method Not Allowed Invalid input None    To perform this operation, you must be authenticated by means of one of the following methods: petstore_auth ( Scopes: write:pets read:pets )  deletePet \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;https://petstore.swagger.io/v2/pet/{petId}\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;DELETE\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;api_key\u0026#34;: []string{\u0026#34;string\u0026#34;}, \u0026#34;Authorization\u0026#34;: []string{\u0026#34;Bearer {access-token}\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;DELETE\u0026#34;, \u0026#34;https://petstore.swagger.io/v2/pet/{petId}\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  var headers = { \u0026#39;api_key\u0026#39;:\u0026#39;string\u0026#39;, \u0026#39;Authorization\u0026#39;:\u0026#39;Bearer {access-token}\u0026#39; }; $.ajax({ url: \u0026#39;https://petstore.swagger.io/v2/pet/{petId}\u0026#39;, method: \u0026#39;delete\u0026#39;, headers: headers, success: function(data) { console.log(JSON.stringify(data)); } })   1 2 3 4 5  DELETE https://petstore.swagger.io/v2/pet/{petId} HTTP/1.1 Host: petstore.swagger.io api_key: string   DELETE /pet/{petId}\nDeletes a pet\nParameters    Name In Type Required Description     api_key header string false none   petId path integer(int64) true Pet id to delete    Responses    Status Meaning Description Schema     400 Bad Request Invalid ID supplied None   404 Not Found Pet not found None    To perform this operation, you must be authenticated by means of one of the following methods: petstore_auth ( Scopes: write:pets read:pets )  uploadFile \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;https://petstore.swagger.io/v2/pet/{petId}/uploadImage\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;POST\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Content-Type\u0026#34;: []string{\u0026#34;multipart/form-data\u0026#34;}, \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, \u0026#34;Authorization\u0026#34;: []string{\u0026#34;Bearer {access-token}\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;POST\u0026#34;, \u0026#34;https://petstore.swagger.io/v2/pet/{petId}/uploadImage\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  var headers = { \u0026#39;Content-Type\u0026#39;:\u0026#39;multipart/form-data\u0026#39;, \u0026#39;Accept\u0026#39;:\u0026#39;application/json\u0026#39;, \u0026#39;Authorization\u0026#39;:\u0026#39;Bearer {access-token}\u0026#39; }; $.ajax({ url: \u0026#39;https://petstore.swagger.io/v2/pet/{petId}/uploadImage\u0026#39;, method: \u0026#39;post\u0026#39;, headers: headers, success: function(data) { console.log(JSON.stringify(data)); } })   1 2 3 4 5  POST https://petstore.swagger.io/v2/pet/{petId}/uploadImage HTTP/1.1 Host: petstore.swagger.io Content-Type: multipart/form-data Accept: application/json   POST /pet/{petId}/uploadImage\nuploads an image\n Body parameter\n 1 2 3  additionalMetadata:stringfile:string  Parameters    Name In Type Required Description     petId path integer(int64) true ID of pet to update   body body object false none   » additionalMetadata body string false Additional data to pass to server   » file body string(binary) false file to upload     Example responses\n  200 Response\n 1 2 3 4 5  { \u0026#34;code\u0026#34;: 0, \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;message\u0026#34;: \u0026#34;string\u0026#34; }   Responses    Status Meaning Description Schema     200 OK successful operation ApiResponse    To perform this operation, you must be authenticated by means of one of the following methods: petstore_auth ( Scopes: write:pets read:pets )  addPet \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;https://petstore.swagger.io/v2/pet\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;POST\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Content-Type\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, \u0026#34;Authorization\u0026#34;: []string{\u0026#34;Bearer {access-token}\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;POST\u0026#34;, \u0026#34;https://petstore.swagger.io/v2/pet\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  var headers = { \u0026#39;Content-Type\u0026#39;:\u0026#39;application/json\u0026#39;, \u0026#39;Authorization\u0026#39;:\u0026#39;Bearer {access-token}\u0026#39; }; $.ajax({ url: \u0026#39;https://petstore.swagger.io/v2/pet\u0026#39;, method: \u0026#39;post\u0026#39;, headers: headers, success: function(data) { console.log(JSON.stringify(data)); } })   1 2 3 4  POST https://petstore.swagger.io/v2/pet HTTP/1.1 Host: petstore.swagger.io Content-Type: application/json   POST /pet\nAdd a new pet to the store\n Body parameter\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  { \u0026#34;id\u0026#34;: 0, \u0026#34;category\u0026#34;: { \u0026#34;id\u0026#34;: 0, \u0026#34;name\u0026#34;: \u0026#34;string\u0026#34; }, \u0026#34;name\u0026#34;: \u0026#34;doggie\u0026#34;, \u0026#34;photoUrls\u0026#34;: [ \u0026#34;string\u0026#34; ], \u0026#34;tags\u0026#34;: [ { \u0026#34;id\u0026#34;: 0, \u0026#34;name\u0026#34;: \u0026#34;string\u0026#34; } ], \u0026#34;status\u0026#34;: \u0026#34;available\u0026#34; }   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34; ?\u0026gt; \u0026lt;Pet\u0026gt; \u0026lt;id\u0026gt;0\u0026lt;/id\u0026gt; \u0026lt;category\u0026gt; \u0026lt;id\u0026gt;0\u0026lt;/id\u0026gt; \u0026lt;name\u0026gt;string\u0026lt;/name\u0026gt; \u0026lt;/category\u0026gt; \u0026lt;name\u0026gt;doggie\u0026lt;/name\u0026gt; \u0026lt;photoUrls\u0026gt;string\u0026lt;/photoUrls\u0026gt; \u0026lt;tags\u0026gt; \u0026lt;id\u0026gt;0\u0026lt;/id\u0026gt; \u0026lt;name\u0026gt;string\u0026lt;/name\u0026gt; \u0026lt;/tags\u0026gt; \u0026lt;status\u0026gt;available\u0026lt;/status\u0026gt; \u0026lt;/Pet\u0026gt;   Parameters    Name In Type Required Description     body body Pet true Pet object that needs to be added to the store    Responses    Status Meaning Description Schema     405 Method Not Allowed Invalid input None    To perform this operation, you must be authenticated by means of one of the following methods: petstore_auth ( Scopes: write:pets read:pets )  updatePet \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;https://petstore.swagger.io/v2/pet\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;PUT\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Content-Type\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, \u0026#34;Authorization\u0026#34;: []string{\u0026#34;Bearer {access-token}\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;PUT\u0026#34;, \u0026#34;https://petstore.swagger.io/v2/pet\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  var headers = { \u0026#39;Content-Type\u0026#39;:\u0026#39;application/json\u0026#39;, \u0026#39;Authorization\u0026#39;:\u0026#39;Bearer {access-token}\u0026#39; }; $.ajax({ url: \u0026#39;https://petstore.swagger.io/v2/pet\u0026#39;, method: \u0026#39;put\u0026#39;, headers: headers, success: function(data) { console.log(JSON.stringify(data)); } })   1 2 3 4  PUT https://petstore.swagger.io/v2/pet HTTP/1.1 Host: petstore.swagger.io Content-Type: application/json   PUT /pet\nUpdate an existing pet\n Body parameter\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  { \u0026#34;id\u0026#34;: 0, \u0026#34;category\u0026#34;: { \u0026#34;id\u0026#34;: 0, \u0026#34;name\u0026#34;: \u0026#34;string\u0026#34; }, \u0026#34;name\u0026#34;: \u0026#34;doggie\u0026#34;, \u0026#34;photoUrls\u0026#34;: [ \u0026#34;string\u0026#34; ], \u0026#34;tags\u0026#34;: [ { \u0026#34;id\u0026#34;: 0, \u0026#34;name\u0026#34;: \u0026#34;string\u0026#34; } ], \u0026#34;status\u0026#34;: \u0026#34;available\u0026#34; }   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34; ?\u0026gt; \u0026lt;Pet\u0026gt; \u0026lt;id\u0026gt;0\u0026lt;/id\u0026gt; \u0026lt;category\u0026gt; \u0026lt;id\u0026gt;0\u0026lt;/id\u0026gt; \u0026lt;name\u0026gt;string\u0026lt;/name\u0026gt; \u0026lt;/category\u0026gt; \u0026lt;name\u0026gt;doggie\u0026lt;/name\u0026gt; \u0026lt;photoUrls\u0026gt;string\u0026lt;/photoUrls\u0026gt; \u0026lt;tags\u0026gt; \u0026lt;id\u0026gt;0\u0026lt;/id\u0026gt; \u0026lt;name\u0026gt;string\u0026lt;/name\u0026gt; \u0026lt;/tags\u0026gt; \u0026lt;status\u0026gt;available\u0026lt;/status\u0026gt; \u0026lt;/Pet\u0026gt;   Parameters    Name In Type Required Description     body body Pet true Pet object that needs to be added to the store    Responses    Status Meaning Description Schema     400 Bad Request Invalid ID supplied None   404 Not Found Pet not found None   405 Method Not Allowed Validation exception None    To perform this operation, you must be authenticated by means of one of the following methods: petstore_auth ( Scopes: write:pets read:pets )  findPetsByStatus \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;https://petstore.swagger.io/v2/pet/findByStatus?status=available\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;GET\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, \u0026#34;Authorization\u0026#34;: []string{\u0026#34;Bearer {access-token}\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;GET\u0026#34;, \u0026#34;https://petstore.swagger.io/v2/pet/findByStatus\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  var headers = { \u0026#39;Accept\u0026#39;:\u0026#39;application/json\u0026#39;, \u0026#39;Authorization\u0026#39;:\u0026#39;Bearer {access-token}\u0026#39; }; $.ajax({ url: \u0026#39;https://petstore.swagger.io/v2/pet/findByStatus\u0026#39;, method: \u0026#39;get\u0026#39;, data: \u0026#39;?status=available\u0026#39;, headers: headers, success: function(data) { console.log(JSON.stringify(data)); } })   1 2 3 4  GET https://petstore.swagger.io/v2/pet/findByStatus?status=available HTTP/1.1 Host: petstore.swagger.io Accept: application/json   GET /pet/findByStatus\nFinds Pets by status\nMultiple status values can be provided with comma separated strings\nParameters    Name In Type Required Description     status query array[string] true Status values that need to be considered for filter    Enumerated Values    Parameter Value     status available   status pending   status sold     Example responses\n  200 Response\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  [ { \u0026#34;id\u0026#34;: 0, \u0026#34;category\u0026#34;: { \u0026#34;id\u0026#34;: 0, \u0026#34;name\u0026#34;: \u0026#34;string\u0026#34; }, \u0026#34;name\u0026#34;: \u0026#34;doggie\u0026#34;, \u0026#34;photoUrls\u0026#34;: [ \u0026#34;string\u0026#34; ], \u0026#34;tags\u0026#34;: [ { \u0026#34;id\u0026#34;: 0, \u0026#34;name\u0026#34;: \u0026#34;string\u0026#34; } ], \u0026#34;status\u0026#34;: \u0026#34;available\u0026#34; } ]   1 2 3 4 5 6 7 8 9 10 11 12 13  \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34; ?\u0026gt; \u0026lt;id\u0026gt;0\u0026lt;/id\u0026gt; \u0026lt;category\u0026gt; \u0026lt;id\u0026gt;0\u0026lt;/id\u0026gt; \u0026lt;name\u0026gt;string\u0026lt;/name\u0026gt; \u0026lt;/category\u0026gt; \u0026lt;name\u0026gt;doggie\u0026lt;/name\u0026gt; \u0026lt;photoUrls\u0026gt;string\u0026lt;/photoUrls\u0026gt; \u0026lt;tags\u0026gt; \u0026lt;id\u0026gt;0\u0026lt;/id\u0026gt; \u0026lt;name\u0026gt;string\u0026lt;/name\u0026gt; \u0026lt;/tags\u0026gt; \u0026lt;status\u0026gt;available\u0026lt;/status\u0026gt;   Responses    Status Meaning Description Schema     200 OK successful operation Inline   400 Bad Request Invalid status value None    Response Schema Status Code 200\n   Name Type Required Restrictions Description     anonymous [Pet] false none none   » id integer(int64) false none none   » category Category false none none   »» id integer(int64) false none none   »» name string false none none   » name string true none none   » photoUrls [string] true none none   » tags [Tag] false none none   »» id integer(int64) false none none   »» name string false none none   » status string false none pet status in the store    Enumerated Values    Property Value     status available   status pending   status sold    To perform this operation, you must be authenticated by means of one of the following methods: petstore_auth ( Scopes: write:pets read:pets )  findPetsByTags \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;https://petstore.swagger.io/v2/pet/findByTags?tags=string\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;GET\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, \u0026#34;Authorization\u0026#34;: []string{\u0026#34;Bearer {access-token}\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;GET\u0026#34;, \u0026#34;https://petstore.swagger.io/v2/pet/findByTags\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  var headers = { \u0026#39;Accept\u0026#39;:\u0026#39;application/json\u0026#39;, \u0026#39;Authorization\u0026#39;:\u0026#39;Bearer {access-token}\u0026#39; }; $.ajax({ url: \u0026#39;https://petstore.swagger.io/v2/pet/findByTags\u0026#39;, method: \u0026#39;get\u0026#39;, data: \u0026#39;?tags=string\u0026#39;, headers: headers, success: function(data) { console.log(JSON.stringify(data)); } })   1 2 3 4  GET https://petstore.swagger.io/v2/pet/findByTags?tags=string HTTP/1.1 Host: petstore.swagger.io Accept: application/json   GET /pet/findByTags\nFinds Pets by tags\nMultiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.\nParameters    Name In Type Required Description     tags query array[string] true Tags to filter by     Example responses\n  200 Response\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  [ { \u0026#34;id\u0026#34;: 0, \u0026#34;category\u0026#34;: { \u0026#34;id\u0026#34;: 0, \u0026#34;name\u0026#34;: \u0026#34;string\u0026#34; }, \u0026#34;name\u0026#34;: \u0026#34;doggie\u0026#34;, \u0026#34;photoUrls\u0026#34;: [ \u0026#34;string\u0026#34; ], \u0026#34;tags\u0026#34;: [ { \u0026#34;id\u0026#34;: 0, \u0026#34;name\u0026#34;: \u0026#34;string\u0026#34; } ], \u0026#34;status\u0026#34;: \u0026#34;available\u0026#34; } ]   1 2 3 4 5 6 7 8 9 10 11 12 13  \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34; ?\u0026gt; \u0026lt;id\u0026gt;0\u0026lt;/id\u0026gt; \u0026lt;category\u0026gt; \u0026lt;id\u0026gt;0\u0026lt;/id\u0026gt; \u0026lt;name\u0026gt;string\u0026lt;/name\u0026gt; \u0026lt;/category\u0026gt; \u0026lt;name\u0026gt;doggie\u0026lt;/name\u0026gt; \u0026lt;photoUrls\u0026gt;string\u0026lt;/photoUrls\u0026gt; \u0026lt;tags\u0026gt; \u0026lt;id\u0026gt;0\u0026lt;/id\u0026gt; \u0026lt;name\u0026gt;string\u0026lt;/name\u0026gt; \u0026lt;/tags\u0026gt; \u0026lt;status\u0026gt;available\u0026lt;/status\u0026gt;   Responses    Status Meaning Description Schema     200 OK successful operation Inline   400 Bad Request Invalid tag value None    Response Schema Status Code 200\n   Name Type Required Restrictions Description     anonymous [Pet] false none none   » id integer(int64) false none none   » category Category false none none   »» id integer(int64) false none none   »» name string false none none   » name string true none none   » photoUrls [string] true none none   » tags [Tag] false none none   »» id integer(int64) false none none   »» name string false none none   » status string false none pet status in the store    Enumerated Values    Property Value     status available   status pending   status sold    To perform this operation, you must be authenticated by means of one of the following methods: petstore_auth ( Scopes: write:pets read:pets )  store Access to Petstore orders\ngetInventory \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;https://petstore.swagger.io/v2/store/inventory\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;GET\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, \u0026#34;api_key\u0026#34;: []string{\u0026#34;API_KEY\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;GET\u0026#34;, \u0026#34;https://petstore.swagger.io/v2/store/inventory\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  var headers = { \u0026#39;Accept\u0026#39;:\u0026#39;application/json\u0026#39;, \u0026#39;api_key\u0026#39;:\u0026#39;API_KEY\u0026#39; }; $.ajax({ url: \u0026#39;https://petstore.swagger.io/v2/store/inventory\u0026#39;, method: \u0026#39;get\u0026#39;, headers: headers, success: function(data) { console.log(JSON.stringify(data)); } })   1 2 3 4  GET https://petstore.swagger.io/v2/store/inventory HTTP/1.1 Host: petstore.swagger.io Accept: application/json   GET /store/inventory\nReturns pet inventories by status\nReturns a map of status codes to quantities\n Example responses\n  200 Response\n 1 2 3 4  { \u0026#34;property1\u0026#34;: 0, \u0026#34;property2\u0026#34;: 0 }   Responses    Status Meaning Description Schema     200 OK successful operation Inline    Response Schema Status Code 200\n   Name Type Required Restrictions Description     » additionalProperties integer(int32) false none none    To perform this operation, you must be authenticated by means of one of the following methods: api_key  getOrderById \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;https://petstore.swagger.io/v2/store/order/{orderId}\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;GET\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;GET\u0026#34;, \u0026#34;https://petstore.swagger.io/v2/store/order/{orderId}\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  var headers = { \u0026#39;Accept\u0026#39;:\u0026#39;application/json\u0026#39; }; $.ajax({ url: \u0026#39;https://petstore.swagger.io/v2/store/order/{orderId}\u0026#39;, method: \u0026#39;get\u0026#39;, headers: headers, success: function(data) { console.log(JSON.stringify(data)); } })   1 2 3 4  GET https://petstore.swagger.io/v2/store/order/{orderId} HTTP/1.1 Host: petstore.swagger.io Accept: application/json   GET /store/order/{orderId}\nFind purchase order by ID\nFor valid response try integer IDs with value \u0026gt;= 1 and \u0026lt;= 10. Other values will generated exceptions\nParameters    Name In Type Required Description     orderId path integer(int64) true ID of pet that needs to be fetched     Example responses\n  200 Response\n 1 2 3 4 5 6 7 8  { \u0026#34;id\u0026#34;: 0, \u0026#34;petId\u0026#34;: 0, \u0026#34;quantity\u0026#34;: 0, \u0026#34;shipDate\u0026#34;: \u0026#34;2020-02-26T14:49:53Z\u0026#34;, \u0026#34;status\u0026#34;: \u0026#34;placed\u0026#34;, \u0026#34;complete\u0026#34;: true }   1 2 3 4 5 6 7 8 9  \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34; ?\u0026gt; \u0026lt;Order\u0026gt; \u0026lt;id\u0026gt;0\u0026lt;/id\u0026gt; \u0026lt;petId\u0026gt;0\u0026lt;/petId\u0026gt; \u0026lt;quantity\u0026gt;0\u0026lt;/quantity\u0026gt; \u0026lt;shipDate\u0026gt;2020-02-26T14:49:53Z\u0026lt;/shipDate\u0026gt; \u0026lt;status\u0026gt;placed\u0026lt;/status\u0026gt; \u0026lt;complete\u0026gt;true\u0026lt;/complete\u0026gt; \u0026lt;/Order\u0026gt;   Responses    Status Meaning Description Schema     200 OK successful operation Order   400 Bad Request Invalid ID supplied None   404 Not Found Order not found None    This operation does not require authentication  deleteOrder \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;https://petstore.swagger.io/v2/store/order/{orderId}\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;DELETE\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;DELETE\u0026#34;, \u0026#34;https://petstore.swagger.io/v2/store/order/{orderId}\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   1 2 3 4 5 6 7 8 9 10  $.ajax({ url: \u0026#39;https://petstore.swagger.io/v2/store/order/{orderId}\u0026#39;, method: \u0026#39;delete\u0026#39;, success: function(data) { console.log(JSON.stringify(data)); } })   1 2 3  DELETE https://petstore.swagger.io/v2/store/order/{orderId} HTTP/1.1 Host: petstore.swagger.io   DELETE /store/order/{orderId}\nDelete purchase order by ID\nFor valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors\nParameters    Name In Type Required Description     orderId path integer(int64) true ID of the order that needs to be deleted    Responses    Status Meaning Description Schema     400 Bad Request Invalid ID supplied None   404 Not Found Order not found None    This operation does not require authentication  placeOrder \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;https://petstore.swagger.io/v2/store/order\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;POST\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Content-Type\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;POST\u0026#34;, \u0026#34;https://petstore.swagger.io/v2/store/order\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  var headers = { \u0026#39;Content-Type\u0026#39;:\u0026#39;application/json\u0026#39;, \u0026#39;Accept\u0026#39;:\u0026#39;application/json\u0026#39; }; $.ajax({ url: \u0026#39;https://petstore.swagger.io/v2/store/order\u0026#39;, method: \u0026#39;post\u0026#39;, headers: headers, success: function(data) { console.log(JSON.stringify(data)); } })   1 2 3 4 5  POST https://petstore.swagger.io/v2/store/order HTTP/1.1 Host: petstore.swagger.io Content-Type: application/json Accept: application/json   POST /store/order\nPlace an order for a pet\n Body parameter\n 1 2 3 4 5 6 7 8  { \u0026#34;id\u0026#34;: 0, \u0026#34;petId\u0026#34;: 0, \u0026#34;quantity\u0026#34;: 0, \u0026#34;shipDate\u0026#34;: \u0026#34;2020-02-26T14:49:53Z\u0026#34;, \u0026#34;status\u0026#34;: \u0026#34;placed\u0026#34;, \u0026#34;complete\u0026#34;: true }   Parameters    Name In Type Required Description     body body Order true order placed for purchasing the pet     Example responses\n  200 Response\n 1 2 3 4 5 6 7 8  { \u0026#34;id\u0026#34;: 0, \u0026#34;petId\u0026#34;: 0, \u0026#34;quantity\u0026#34;: 0, \u0026#34;shipDate\u0026#34;: \u0026#34;2020-02-26T14:49:53Z\u0026#34;, \u0026#34;status\u0026#34;: \u0026#34;placed\u0026#34;, \u0026#34;complete\u0026#34;: true }   1 2 3 4 5 6 7 8 9  \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34; ?\u0026gt; \u0026lt;Order\u0026gt; \u0026lt;id\u0026gt;0\u0026lt;/id\u0026gt; \u0026lt;petId\u0026gt;0\u0026lt;/petId\u0026gt; \u0026lt;quantity\u0026gt;0\u0026lt;/quantity\u0026gt; \u0026lt;shipDate\u0026gt;2020-02-26T14:49:53Z\u0026lt;/shipDate\u0026gt; \u0026lt;status\u0026gt;placed\u0026lt;/status\u0026gt; \u0026lt;complete\u0026gt;true\u0026lt;/complete\u0026gt; \u0026lt;/Order\u0026gt;   Responses    Status Meaning Description Schema     200 OK successful operation Order   400 Bad Request Invalid Order None    This operation does not require authentication  user Operations about user\nFind out more about our store\ngetUserByName \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;https://petstore.swagger.io/v2/user/{username}\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;GET\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;GET\u0026#34;, \u0026#34;https://petstore.swagger.io/v2/user/{username}\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  var headers = { \u0026#39;Accept\u0026#39;:\u0026#39;application/json\u0026#39; }; $.ajax({ url: \u0026#39;https://petstore.swagger.io/v2/user/{username}\u0026#39;, method: \u0026#39;get\u0026#39;, headers: headers, success: function(data) { console.log(JSON.stringify(data)); } })   1 2 3 4  GET https://petstore.swagger.io/v2/user/{username} HTTP/1.1 Host: petstore.swagger.io Accept: application/json   GET /user/{username}\nGet user by user name\nParameters    Name In Type Required Description     username path string true The name that needs to be fetched. Use user1 for testing.     Example responses\n  200 Response\n 1 2 3 4 5 6 7 8 9 10  { \u0026#34;id\u0026#34;: 0, \u0026#34;username\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;firstName\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;lastName\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;password\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;userStatus\u0026#34;: 0 }   1 2 3 4 5 6 7 8 9 10 11  \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34; ?\u0026gt; \u0026lt;User\u0026gt; \u0026lt;id\u0026gt;0\u0026lt;/id\u0026gt; \u0026lt;username\u0026gt;string\u0026lt;/username\u0026gt; \u0026lt;firstName\u0026gt;string\u0026lt;/firstName\u0026gt; \u0026lt;lastName\u0026gt;string\u0026lt;/lastName\u0026gt; \u0026lt;email\u0026gt;string\u0026lt;/email\u0026gt; \u0026lt;password\u0026gt;string\u0026lt;/password\u0026gt; \u0026lt;phone\u0026gt;string\u0026lt;/phone\u0026gt; \u0026lt;userStatus\u0026gt;0\u0026lt;/userStatus\u0026gt; \u0026lt;/User\u0026gt;   Responses    Status Meaning Description Schema     200 OK successful operation User   400 Bad Request Invalid username supplied None   404 Not Found User not found None    This operation does not require authentication  updateUser \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;https://petstore.swagger.io/v2/user/{username}\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;PUT\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Content-Type\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;PUT\u0026#34;, \u0026#34;https://petstore.swagger.io/v2/user/{username}\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  var headers = { \u0026#39;Content-Type\u0026#39;:\u0026#39;application/json\u0026#39; }; $.ajax({ url: \u0026#39;https://petstore.swagger.io/v2/user/{username}\u0026#39;, method: \u0026#39;put\u0026#39;, headers: headers, success: function(data) { console.log(JSON.stringify(data)); } })   1 2 3 4  PUT https://petstore.swagger.io/v2/user/{username} HTTP/1.1 Host: petstore.swagger.io Content-Type: application/json   PUT /user/{username}\nUpdated user\nThis can only be done by the logged in user.\n Body parameter\n 1 2 3 4 5 6 7 8 9 10  { \u0026#34;id\u0026#34;: 0, \u0026#34;username\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;firstName\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;lastName\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;password\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;userStatus\u0026#34;: 0 }   Parameters    Name In Type Required Description     username path string true name that need to be updated   body body User true Updated user object    Responses    Status Meaning Description Schema     400 Bad Request Invalid user supplied None   404 Not Found User not found None    This operation does not require authentication  deleteUser \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;https://petstore.swagger.io/v2/user/{username}\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;DELETE\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;DELETE\u0026#34;, \u0026#34;https://petstore.swagger.io/v2/user/{username}\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   1 2 3 4 5 6 7 8 9 10  $.ajax({ url: \u0026#39;https://petstore.swagger.io/v2/user/{username}\u0026#39;, method: \u0026#39;delete\u0026#39;, success: function(data) { console.log(JSON.stringify(data)); } })   1 2 3  DELETE https://petstore.swagger.io/v2/user/{username} HTTP/1.1 Host: petstore.swagger.io   DELETE /user/{username}\nDelete user\nThis can only be done by the logged in user.\nParameters    Name In Type Required Description     username path string true The name that needs to be deleted    Responses    Status Meaning Description Schema     400 Bad Request Invalid username supplied None   404 Not Found User not found None    This operation does not require authentication  loginUser \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;https://petstore.swagger.io/v2/user/login?username=string\u0026amp;password=string\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;GET\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;GET\u0026#34;, \u0026#34;https://petstore.swagger.io/v2/user/login\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  var headers = { \u0026#39;Accept\u0026#39;:\u0026#39;application/json\u0026#39; }; $.ajax({ url: \u0026#39;https://petstore.swagger.io/v2/user/login\u0026#39;, method: \u0026#39;get\u0026#39;, data: \u0026#39;?username=string\u0026amp;password=string\u0026#39;, headers: headers, success: function(data) { console.log(JSON.stringify(data)); } })   1 2 3 4  GET https://petstore.swagger.io/v2/user/login?username=string\u0026amp;password=string HTTP/1.1 Host: petstore.swagger.io Accept: application/json   GET /user/login\nLogs user into the system\nParameters    Name In Type Required Description     username query string true The user name for login   password query string true The password for login in clear text     Example responses\n  200 Response\n 1  \u0026#34;string\u0026#34;   Responses    Status Meaning Description Schema     200 OK successful operation string   400 Bad Request Invalid username/password supplied None    Response Headers    Status Header Type Format Description     200 X-Expires-After string date-time date in UTC when token expires   200 X-Rate-Limit integer int32 calls per hour allowed by the user    This operation does not require authentication  logoutUser \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;https://petstore.swagger.io/v2/user/logout\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;GET\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;GET\u0026#34;, \u0026#34;https://petstore.swagger.io/v2/user/logout\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   1 2 3 4 5 6 7 8 9 10  $.ajax({ url: \u0026#39;https://petstore.swagger.io/v2/user/logout\u0026#39;, method: \u0026#39;get\u0026#39;, success: function(data) { console.log(JSON.stringify(data)); } })   1 2 3  GET https://petstore.swagger.io/v2/user/logout HTTP/1.1 Host: petstore.swagger.io   GET /user/logout\nLogs out current logged in user session\nResponses    Status Meaning Description Schema     default Default successful operation None    This operation does not require authentication  createUser \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;https://petstore.swagger.io/v2/user\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;POST\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Content-Type\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;POST\u0026#34;, \u0026#34;https://petstore.swagger.io/v2/user\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  var headers = { \u0026#39;Content-Type\u0026#39;:\u0026#39;application/json\u0026#39; }; $.ajax({ url: \u0026#39;https://petstore.swagger.io/v2/user\u0026#39;, method: \u0026#39;post\u0026#39;, headers: headers, success: function(data) { console.log(JSON.stringify(data)); } })   1 2 3 4  POST https://petstore.swagger.io/v2/user HTTP/1.1 Host: petstore.swagger.io Content-Type: application/json   POST /user\nCreate user\nThis can only be done by the logged in user.\n Body parameter\n 1 2 3 4 5 6 7 8 9 10  { \u0026#34;id\u0026#34;: 0, \u0026#34;username\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;firstName\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;lastName\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;password\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;userStatus\u0026#34;: 0 }   Parameters    Name In Type Required Description     body body User true Created user object    Responses    Status Meaning Description Schema     default Default successful operation None    This operation does not require authentication  createUsersWithArrayInput \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;https://petstore.swagger.io/v2/user/createWithArray\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;POST\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Content-Type\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;POST\u0026#34;, \u0026#34;https://petstore.swagger.io/v2/user/createWithArray\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  var headers = { \u0026#39;Content-Type\u0026#39;:\u0026#39;application/json\u0026#39; }; $.ajax({ url: \u0026#39;https://petstore.swagger.io/v2/user/createWithArray\u0026#39;, method: \u0026#39;post\u0026#39;, headers: headers, success: function(data) { console.log(JSON.stringify(data)); } })   1 2 3 4  POST https://petstore.swagger.io/v2/user/createWithArray HTTP/1.1 Host: petstore.swagger.io Content-Type: application/json   POST /user/createWithArray\nCreates list of users with given input array\n Body parameter\n 1 2 3 4 5 6 7 8 9 10 11 12  [ { \u0026#34;id\u0026#34;: 0, \u0026#34;username\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;firstName\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;lastName\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;password\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;userStatus\u0026#34;: 0 } ]   Parameters    Name In Type Required Description     body body UserArray true List of user object    Responses    Status Meaning Description Schema     default Default successful operation None    This operation does not require authentication  createUsersWithListInput \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;https://petstore.swagger.io/v2/user/createWithList\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;POST\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Content-Type\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;POST\u0026#34;, \u0026#34;https://petstore.swagger.io/v2/user/createWithList\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  var headers = { \u0026#39;Content-Type\u0026#39;:\u0026#39;application/json\u0026#39; }; $.ajax({ url: \u0026#39;https://petstore.swagger.io/v2/user/createWithList\u0026#39;, method: \u0026#39;post\u0026#39;, headers: headers, success: function(data) { console.log(JSON.stringify(data)); } })   1 2 3 4  POST https://petstore.swagger.io/v2/user/createWithList HTTP/1.1 Host: petstore.swagger.io Content-Type: application/json   POST /user/createWithList\nCreates list of users with given input array\n Body parameter\n 1 2 3 4 5 6 7 8 9 10 11 12  [ { \u0026#34;id\u0026#34;: 0, \u0026#34;username\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;firstName\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;lastName\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;password\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;userStatus\u0026#34;: 0 } ]   Parameters    Name In Type Required Description     body body UserArray true List of user object    Responses    Status Meaning Description Schema     default Default successful operation None    This operation does not require authentication  Schemas Category \n1 2 3 4 5  { \u0026#34;id\u0026#34;: 0, \u0026#34;name\u0026#34;: \u0026#34;string\u0026#34; }   Properties    Name Type Required Restrictions Description     id integer(int64) false none none   name string false none none    Pet \n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  { \u0026#34;id\u0026#34;: 0, \u0026#34;category\u0026#34;: { \u0026#34;id\u0026#34;: 0, \u0026#34;name\u0026#34;: \u0026#34;string\u0026#34; }, \u0026#34;name\u0026#34;: \u0026#34;doggie\u0026#34;, \u0026#34;photoUrls\u0026#34;: [ \u0026#34;string\u0026#34; ], \u0026#34;tags\u0026#34;: [ { \u0026#34;id\u0026#34;: 0, \u0026#34;name\u0026#34;: \u0026#34;string\u0026#34; } ], \u0026#34;status\u0026#34;: \u0026#34;available\u0026#34; }   Properties    Name Type Required Restrictions Description     id integer(int64) false none none   category Category false none none   name string true none none   photoUrls [string] true none none   tags [Tag] false none none   status string false none pet status in the store    Enumerated Values    Property Value     status available   status pending   status sold    Tag \n1 2 3 4 5  { \u0026#34;id\u0026#34;: 0, \u0026#34;name\u0026#34;: \u0026#34;string\u0026#34; }   Properties    Name Type Required Restrictions Description     id integer(int64) false none none   name string false none none    ApiResponse \n1 2 3 4 5 6  { \u0026#34;code\u0026#34;: 0, \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;message\u0026#34;: \u0026#34;string\u0026#34; }   Properties    Name Type Required Restrictions Description     code integer(int32) false none none   type string false none none   message string false none none    Order \n1 2 3 4 5 6 7 8 9  { \u0026#34;id\u0026#34;: 0, \u0026#34;petId\u0026#34;: 0, \u0026#34;quantity\u0026#34;: 0, \u0026#34;shipDate\u0026#34;: \u0026#34;2020-02-26T14:49:53Z\u0026#34;, \u0026#34;status\u0026#34;: \u0026#34;placed\u0026#34;, \u0026#34;complete\u0026#34;: true }   Properties    Name Type Required Restrictions Description     id integer(int64) false none none   petId integer(int64) false none none   quantity integer(int32) false none none   shipDate string(date-time) false none none   status string false none Order Status   complete boolean false none none    Enumerated Values    Property Value     status placed   status approved   status delivered    User \n1 2 3 4 5 6 7 8 9 10 11  { \u0026#34;id\u0026#34;: 0, \u0026#34;username\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;firstName\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;lastName\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;password\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;userStatus\u0026#34;: 0 }   Properties    Name Type Required Restrictions Description     id integer(int64) false none none   username string false none none   firstName string false none none   lastName string false none none   email string false none none   password string false none none   phone string false none none   userStatus integer(int32) false none User Status    ","description":"","id":23,"section":"docs","tags":null,"title":"Swagger Petstore","uri":"/ko/docs/apis/petstore/"},{"content":"Swagger Petstore v1.0.3  Scroll down for code samples, example requests and responses. Select a language for code samples from the tabs above or the mobile navigation menu.\n This is a sample server Petstore server. You can find out more about Swagger at http://swagger.io or on irc.freenode.net, #swagger. For this sample, you can use the api key special-key to test the authorization filters.\nBase URLs:\n  https://petstore.swagger.io/v2\n  http://petstore.swagger.io/v2\n  Terms of service\nEmail: Support\nLicense: Apache 2.0\nAuthentication  API Key (api_key)  Parameter Name: api_key, in: header.      oAuth2 authentication.\n Flow: implicit Authorization URL = https://petstore.swagger.io/oauth/authorize       Scope Scope Description     read:pets read your pets   write:pets modify pets in your account    pet Everything about your Pets\nFind out more\ngetPetById \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;https://petstore.swagger.io/v2/pet/{petId}\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;GET\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   GET /pet/{petId}\nFind pet by ID\nReturns a single pet\nParameters    Name In Type Required Description     petId path integer(int64) true ID of pet to return     Example responses\n  200 Response\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  { \u0026#34;id\u0026#34;: 0, \u0026#34;category\u0026#34;: { \u0026#34;id\u0026#34;: 0, \u0026#34;name\u0026#34;: \u0026#34;string\u0026#34; }, \u0026#34;name\u0026#34;: \u0026#34;doggie\u0026#34;, \u0026#34;photoUrls\u0026#34;: [ \u0026#34;string\u0026#34; ], \u0026#34;tags\u0026#34;: [ { \u0026#34;id\u0026#34;: 0, \u0026#34;name\u0026#34;: \u0026#34;string\u0026#34; } ], \u0026#34;status\u0026#34;: \u0026#34;available\u0026#34; }   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34; ?\u0026gt; \u0026lt;Pet\u0026gt; \u0026lt;id\u0026gt;0\u0026lt;/id\u0026gt; \u0026lt;category\u0026gt; \u0026lt;id\u0026gt;0\u0026lt;/id\u0026gt; \u0026lt;name\u0026gt;string\u0026lt;/name\u0026gt; \u0026lt;/category\u0026gt; \u0026lt;name\u0026gt;doggie\u0026lt;/name\u0026gt; \u0026lt;photoUrls\u0026gt;string\u0026lt;/photoUrls\u0026gt; \u0026lt;tags\u0026gt; \u0026lt;id\u0026gt;0\u0026lt;/id\u0026gt; \u0026lt;name\u0026gt;string\u0026lt;/name\u0026gt; \u0026lt;/tags\u0026gt; \u0026lt;status\u0026gt;available\u0026lt;/status\u0026gt; \u0026lt;/Pet\u0026gt;   Responses    Status Meaning Description Schema     200 OK successful operation Pet   400 Bad Request Invalid ID supplied None   404 Not Found Pet not found None    To perform this operation, you must be authenticated by means of one of the following methods: api_key  updatePetWithForm \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;https://petstore.swagger.io/v2/pet/{petId}\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;POST\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   POST /pet/{petId}\nUpdates a pet in the store with form data\n Body parameter\n 1 2 3  name:stringstatus:string  Parameters    Name In Type Required Description     petId path integer(int64) true ID of pet that needs to be updated   body body object false none   » name body string false Updated name of the pet   » status body string false Updated status of the pet    Responses    Status Meaning Description Schema     405 Method Not Allowed Invalid input None    To perform this operation, you must be authenticated by means of one of the following methods: petstore_auth ( Scopes: write:pets read:pets )  deletePet \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;https://petstore.swagger.io/v2/pet/{petId}\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;DELETE\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   DELETE /pet/{petId}\nDeletes a pet\nParameters    Name In Type Required Description     api_key header string false none   petId path integer(int64) true Pet id to delete    Responses    Status Meaning Description Schema     400 Bad Request Invalid ID supplied None   404 Not Found Pet not found None    To perform this operation, you must be authenticated by means of one of the following methods: petstore_auth ( Scopes: write:pets read:pets )  uploadFile \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;https://petstore.swagger.io/v2/pet/{petId}/uploadImage\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;POST\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   POST /pet/{petId}/uploadImage\nuploads an image\n Body parameter\n 1 2 3  additionalMetadata:stringfile:string  Parameters    Name In Type Required Description     petId path integer(int64) true ID of pet to update   body body object false none   » additionalMetadata body string false Additional data to pass to server   » file body string(binary) false file to upload     Example responses\n  200 Response\n 1 2 3 4 5  { \u0026#34;code\u0026#34;: 0, \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;message\u0026#34;: \u0026#34;string\u0026#34; }   Responses    Status Meaning Description Schema     200 OK successful operation ApiResponse    To perform this operation, you must be authenticated by means of one of the following methods: petstore_auth ( Scopes: write:pets read:pets )  addPet \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;https://petstore.swagger.io/v2/pet\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;POST\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   POST /pet\nAdd a new pet to the store\n Body parameter\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  { \u0026#34;id\u0026#34;: 0, \u0026#34;category\u0026#34;: { \u0026#34;id\u0026#34;: 0, \u0026#34;name\u0026#34;: \u0026#34;string\u0026#34; }, \u0026#34;name\u0026#34;: \u0026#34;doggie\u0026#34;, \u0026#34;photoUrls\u0026#34;: [ \u0026#34;string\u0026#34; ], \u0026#34;tags\u0026#34;: [ { \u0026#34;id\u0026#34;: 0, \u0026#34;name\u0026#34;: \u0026#34;string\u0026#34; } ], \u0026#34;status\u0026#34;: \u0026#34;available\u0026#34; }   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34; ?\u0026gt; \u0026lt;Pet\u0026gt; \u0026lt;id\u0026gt;0\u0026lt;/id\u0026gt; \u0026lt;category\u0026gt; \u0026lt;id\u0026gt;0\u0026lt;/id\u0026gt; \u0026lt;name\u0026gt;string\u0026lt;/name\u0026gt; \u0026lt;/category\u0026gt; \u0026lt;name\u0026gt;doggie\u0026lt;/name\u0026gt; \u0026lt;photoUrls\u0026gt;string\u0026lt;/photoUrls\u0026gt; \u0026lt;tags\u0026gt; \u0026lt;id\u0026gt;0\u0026lt;/id\u0026gt; \u0026lt;name\u0026gt;string\u0026lt;/name\u0026gt; \u0026lt;/tags\u0026gt; \u0026lt;status\u0026gt;available\u0026lt;/status\u0026gt; \u0026lt;/Pet\u0026gt;   Parameters    Name In Type Required Description     body body Pet true Pet object that needs to be added to the store    Responses    Status Meaning Description Schema     405 Method Not Allowed Invalid input None    To perform this operation, you must be authenticated by means of one of the following methods: petstore_auth ( Scopes: write:pets read:pets )  updatePet \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;https://petstore.swagger.io/v2/pet\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;PUT\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   PUT /pet\nUpdate an existing pet\n Body parameter\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  { \u0026#34;id\u0026#34;: 0, \u0026#34;category\u0026#34;: { \u0026#34;id\u0026#34;: 0, \u0026#34;name\u0026#34;: \u0026#34;string\u0026#34; }, \u0026#34;name\u0026#34;: \u0026#34;doggie\u0026#34;, \u0026#34;photoUrls\u0026#34;: [ \u0026#34;string\u0026#34; ], \u0026#34;tags\u0026#34;: [ { \u0026#34;id\u0026#34;: 0, \u0026#34;name\u0026#34;: \u0026#34;string\u0026#34; } ], \u0026#34;status\u0026#34;: \u0026#34;available\u0026#34; }   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34; ?\u0026gt; \u0026lt;Pet\u0026gt; \u0026lt;id\u0026gt;0\u0026lt;/id\u0026gt; \u0026lt;category\u0026gt; \u0026lt;id\u0026gt;0\u0026lt;/id\u0026gt; \u0026lt;name\u0026gt;string\u0026lt;/name\u0026gt; \u0026lt;/category\u0026gt; \u0026lt;name\u0026gt;doggie\u0026lt;/name\u0026gt; \u0026lt;photoUrls\u0026gt;string\u0026lt;/photoUrls\u0026gt; \u0026lt;tags\u0026gt; \u0026lt;id\u0026gt;0\u0026lt;/id\u0026gt; \u0026lt;name\u0026gt;string\u0026lt;/name\u0026gt; \u0026lt;/tags\u0026gt; \u0026lt;status\u0026gt;available\u0026lt;/status\u0026gt; \u0026lt;/Pet\u0026gt;   Parameters    Name In Type Required Description     body body Pet true Pet object that needs to be added to the store    Responses    Status Meaning Description Schema     400 Bad Request Invalid ID supplied None   404 Not Found Pet not found None   405 Method Not Allowed Validation exception None    To perform this operation, you must be authenticated by means of one of the following methods: petstore_auth ( Scopes: write:pets read:pets )  findPetsByStatus \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;https://petstore.swagger.io/v2/pet/findByStatus?status=available\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;GET\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   GET /pet/findByStatus\nFinds Pets by status\nMultiple status values can be provided with comma separated strings\nParameters    Name In Type Required Description     status query array[string] true Status values that need to be considered for filter    Enumerated Values    Parameter Value     status available   status pending   status sold     Example responses\n  200 Response\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  [ { \u0026#34;id\u0026#34;: 0, \u0026#34;category\u0026#34;: { \u0026#34;id\u0026#34;: 0, \u0026#34;name\u0026#34;: \u0026#34;string\u0026#34; }, \u0026#34;name\u0026#34;: \u0026#34;doggie\u0026#34;, \u0026#34;photoUrls\u0026#34;: [ \u0026#34;string\u0026#34; ], \u0026#34;tags\u0026#34;: [ { \u0026#34;id\u0026#34;: 0, \u0026#34;name\u0026#34;: \u0026#34;string\u0026#34; } ], \u0026#34;status\u0026#34;: \u0026#34;available\u0026#34; } ]   1 2 3 4 5 6 7 8 9 10 11 12 13  \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34; ?\u0026gt; \u0026lt;id\u0026gt;0\u0026lt;/id\u0026gt; \u0026lt;category\u0026gt; \u0026lt;id\u0026gt;0\u0026lt;/id\u0026gt; \u0026lt;name\u0026gt;string\u0026lt;/name\u0026gt; \u0026lt;/category\u0026gt; \u0026lt;name\u0026gt;doggie\u0026lt;/name\u0026gt; \u0026lt;photoUrls\u0026gt;string\u0026lt;/photoUrls\u0026gt; \u0026lt;tags\u0026gt; \u0026lt;id\u0026gt;0\u0026lt;/id\u0026gt; \u0026lt;name\u0026gt;string\u0026lt;/name\u0026gt; \u0026lt;/tags\u0026gt; \u0026lt;status\u0026gt;available\u0026lt;/status\u0026gt;   Responses    Status Meaning Description Schema     200 OK successful operation Inline   400 Bad Request Invalid status value None    Response Schema Status Code 200\n   Name Type Required Restrictions Description     anonymous [Pet] false none none   » id integer(int64) false none none   » category Category false none none   »» id integer(int64) false none none   »» name string false none none   » name string true none none   » photoUrls [string] true none none   » tags [Tag] false none none   »» id integer(int64) false none none   »» name string false none none   » status string false none pet status in the store    Enumerated Values    Property Value     status available   status pending   status sold    To perform this operation, you must be authenticated by means of one of the following methods: petstore_auth ( Scopes: write:pets read:pets )  findPetsByTags \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;https://petstore.swagger.io/v2/pet/findByTags?tags=string\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;GET\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   GET /pet/findByTags\nFinds Pets by tags\nMultiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.\nParameters    Name In Type Required Description     tags query array[string] true Tags to filter by     Example responses\n  200 Response\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  [ { \u0026#34;id\u0026#34;: 0, \u0026#34;category\u0026#34;: { \u0026#34;id\u0026#34;: 0, \u0026#34;name\u0026#34;: \u0026#34;string\u0026#34; }, \u0026#34;name\u0026#34;: \u0026#34;doggie\u0026#34;, \u0026#34;photoUrls\u0026#34;: [ \u0026#34;string\u0026#34; ], \u0026#34;tags\u0026#34;: [ { \u0026#34;id\u0026#34;: 0, \u0026#34;name\u0026#34;: \u0026#34;string\u0026#34; } ], \u0026#34;status\u0026#34;: \u0026#34;available\u0026#34; } ]   1 2 3 4 5 6 7 8 9 10 11 12 13  \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34; ?\u0026gt; \u0026lt;id\u0026gt;0\u0026lt;/id\u0026gt; \u0026lt;category\u0026gt; \u0026lt;id\u0026gt;0\u0026lt;/id\u0026gt; \u0026lt;name\u0026gt;string\u0026lt;/name\u0026gt; \u0026lt;/category\u0026gt; \u0026lt;name\u0026gt;doggie\u0026lt;/name\u0026gt; \u0026lt;photoUrls\u0026gt;string\u0026lt;/photoUrls\u0026gt; \u0026lt;tags\u0026gt; \u0026lt;id\u0026gt;0\u0026lt;/id\u0026gt; \u0026lt;name\u0026gt;string\u0026lt;/name\u0026gt; \u0026lt;/tags\u0026gt; \u0026lt;status\u0026gt;available\u0026lt;/status\u0026gt;   Responses    Status Meaning Description Schema     200 OK successful operation Inline   400 Bad Request Invalid tag value None    Response Schema Status Code 200\n   Name Type Required Restrictions Description     anonymous [Pet] false none none   » id integer(int64) false none none   » category Category false none none   »» id integer(int64) false none none   »» name string false none none   » name string true none none   » photoUrls [string] true none none   » tags [Tag] false none none   »» id integer(int64) false none none   »» name string false none none   » status string false none pet status in the store    Enumerated Values    Property Value     status available   status pending   status sold    To perform this operation, you must be authenticated by means of one of the following methods: petstore_auth ( Scopes: write:pets read:pets )  store Access to Petstore orders\ngetInventory \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;https://petstore.swagger.io/v2/store/inventory\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;GET\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   GET /store/inventory\nReturns pet inventories by status\nReturns a map of status codes to quantities\n Example responses\n  200 Response\n 1 2 3 4  { \u0026#34;property1\u0026#34;: 0, \u0026#34;property2\u0026#34;: 0 }   Responses    Status Meaning Description Schema     200 OK successful operation Inline    Response Schema Status Code 200\n   Name Type Required Restrictions Description     » additionalProperties integer(int32) false none none    To perform this operation, you must be authenticated by means of one of the following methods: api_key  getOrderById \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;https://petstore.swagger.io/v2/store/order/{orderId}\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;GET\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   GET /store/order/{orderId}\nFind purchase order by ID\nFor valid response try integer IDs with value \u0026gt;= 1 and \u0026lt;= 10. Other values will generated exceptions\nParameters    Name In Type Required Description     orderId path integer(int64) true ID of pet that needs to be fetched     Example responses\n  200 Response\n 1 2 3 4 5 6 7 8  { \u0026#34;id\u0026#34;: 0, \u0026#34;petId\u0026#34;: 0, \u0026#34;quantity\u0026#34;: 0, \u0026#34;shipDate\u0026#34;: \u0026#34;2020-02-26T14:37:23Z\u0026#34;, \u0026#34;status\u0026#34;: \u0026#34;placed\u0026#34;, \u0026#34;complete\u0026#34;: true }   1 2 3 4 5 6 7 8 9  \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34; ?\u0026gt; \u0026lt;Order\u0026gt; \u0026lt;id\u0026gt;0\u0026lt;/id\u0026gt; \u0026lt;petId\u0026gt;0\u0026lt;/petId\u0026gt; \u0026lt;quantity\u0026gt;0\u0026lt;/quantity\u0026gt; \u0026lt;shipDate\u0026gt;2020-02-26T14:37:23Z\u0026lt;/shipDate\u0026gt; \u0026lt;status\u0026gt;placed\u0026lt;/status\u0026gt; \u0026lt;complete\u0026gt;true\u0026lt;/complete\u0026gt; \u0026lt;/Order\u0026gt;   Responses    Status Meaning Description Schema     200 OK successful operation Order   400 Bad Request Invalid ID supplied None   404 Not Found Order not found None    This operation does not require authentication  deleteOrder \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;https://petstore.swagger.io/v2/store/order/{orderId}\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;DELETE\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   DELETE /store/order/{orderId}\nDelete purchase order by ID\nFor valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors\nParameters    Name In Type Required Description     orderId path integer(int64) true ID of the order that needs to be deleted    Responses    Status Meaning Description Schema     400 Bad Request Invalid ID supplied None   404 Not Found Order not found None    This operation does not require authentication  placeOrder \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;https://petstore.swagger.io/v2/store/order\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;POST\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   POST /store/order\nPlace an order for a pet\n Body parameter\n 1 2 3 4 5 6 7 8  { \u0026#34;id\u0026#34;: 0, \u0026#34;petId\u0026#34;: 0, \u0026#34;quantity\u0026#34;: 0, \u0026#34;shipDate\u0026#34;: \u0026#34;2020-02-26T14:37:23Z\u0026#34;, \u0026#34;status\u0026#34;: \u0026#34;placed\u0026#34;, \u0026#34;complete\u0026#34;: true }   Parameters    Name In Type Required Description     body body Order true order placed for purchasing the pet     Example responses\n  200 Response\n 1 2 3 4 5 6 7 8  { \u0026#34;id\u0026#34;: 0, \u0026#34;petId\u0026#34;: 0, \u0026#34;quantity\u0026#34;: 0, \u0026#34;shipDate\u0026#34;: \u0026#34;2020-02-26T14:37:23Z\u0026#34;, \u0026#34;status\u0026#34;: \u0026#34;placed\u0026#34;, \u0026#34;complete\u0026#34;: true }   1 2 3 4 5 6 7 8 9  \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34; ?\u0026gt; \u0026lt;Order\u0026gt; \u0026lt;id\u0026gt;0\u0026lt;/id\u0026gt; \u0026lt;petId\u0026gt;0\u0026lt;/petId\u0026gt; \u0026lt;quantity\u0026gt;0\u0026lt;/quantity\u0026gt; \u0026lt;shipDate\u0026gt;2020-02-26T14:37:23Z\u0026lt;/shipDate\u0026gt; \u0026lt;status\u0026gt;placed\u0026lt;/status\u0026gt; \u0026lt;complete\u0026gt;true\u0026lt;/complete\u0026gt; \u0026lt;/Order\u0026gt;   Responses    Status Meaning Description Schema     200 OK successful operation Order   400 Bad Request Invalid Order None    This operation does not require authentication  user Operations about user\nFind out more about our store\ngetUserByName \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;https://petstore.swagger.io/v2/user/{username}\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;GET\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   GET /user/{username}\nGet user by user name\nParameters    Name In Type Required Description     username path string true The name that needs to be fetched. Use user1 for testing.     Example responses\n  200 Response\n 1 2 3 4 5 6 7 8 9 10  { \u0026#34;id\u0026#34;: 0, \u0026#34;username\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;firstName\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;lastName\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;password\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;userStatus\u0026#34;: 0 }   1 2 3 4 5 6 7 8 9 10 11  \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34; ?\u0026gt; \u0026lt;User\u0026gt; \u0026lt;id\u0026gt;0\u0026lt;/id\u0026gt; \u0026lt;username\u0026gt;string\u0026lt;/username\u0026gt; \u0026lt;firstName\u0026gt;string\u0026lt;/firstName\u0026gt; \u0026lt;lastName\u0026gt;string\u0026lt;/lastName\u0026gt; \u0026lt;email\u0026gt;string\u0026lt;/email\u0026gt; \u0026lt;password\u0026gt;string\u0026lt;/password\u0026gt; \u0026lt;phone\u0026gt;string\u0026lt;/phone\u0026gt; \u0026lt;userStatus\u0026gt;0\u0026lt;/userStatus\u0026gt; \u0026lt;/User\u0026gt;   Responses    Status Meaning Description Schema     200 OK successful operation User   400 Bad Request Invalid username supplied None   404 Not Found User not found None    This operation does not require authentication  updateUser \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;https://petstore.swagger.io/v2/user/{username}\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;PUT\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   PUT /user/{username}\nUpdated user\nThis can only be done by the logged in user.\n Body parameter\n 1 2 3 4 5 6 7 8 9 10  { \u0026#34;id\u0026#34;: 0, \u0026#34;username\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;firstName\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;lastName\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;password\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;userStatus\u0026#34;: 0 }   Parameters    Name In Type Required Description     username path string true name that need to be updated   body body User true Updated user object    Responses    Status Meaning Description Schema     400 Bad Request Invalid user supplied None   404 Not Found User not found None    This operation does not require authentication  deleteUser \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;https://petstore.swagger.io/v2/user/{username}\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;DELETE\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   DELETE /user/{username}\nDelete user\nThis can only be done by the logged in user.\nParameters    Name In Type Required Description     username path string true The name that needs to be deleted    Responses    Status Meaning Description Schema     400 Bad Request Invalid username supplied None   404 Not Found User not found None    This operation does not require authentication  loginUser \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;https://petstore.swagger.io/v2/user/login?username=string\u0026amp;password=string\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;GET\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   GET /user/login\nLogs user into the system\nParameters    Name In Type Required Description     username query string true The user name for login   password query string true The password for login in clear text     Example responses\n  200 Response\n 1  \u0026#34;string\u0026#34;   Responses    Status Meaning Description Schema     200 OK successful operation string   400 Bad Request Invalid username/password supplied None    Response Headers    Status Header Type Format Description     200 X-Expires-After string date-time date in UTC when token expires   200 X-Rate-Limit integer int32 calls per hour allowed by the user    This operation does not require authentication  logoutUser \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;https://petstore.swagger.io/v2/user/logout\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;GET\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   GET /user/logout\nLogs out current logged in user session\nResponses    Status Meaning Description Schema     default Default successful operation None    This operation does not require authentication  createUser \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;https://petstore.swagger.io/v2/user\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;POST\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   POST /user\nCreate user\nThis can only be done by the logged in user.\n Body parameter\n 1 2 3 4 5 6 7 8 9 10  { \u0026#34;id\u0026#34;: 0, \u0026#34;username\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;firstName\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;lastName\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;password\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;userStatus\u0026#34;: 0 }   Parameters    Name In Type Required Description     body body User true Created user object    Responses    Status Meaning Description Schema     default Default successful operation None    This operation does not require authentication  createUsersWithArrayInput \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;https://petstore.swagger.io/v2/user/createWithArray\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;POST\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   POST /user/createWithArray\nCreates list of users with given input array\n Body parameter\n 1 2 3 4 5 6 7 8 9 10 11 12  [ { \u0026#34;id\u0026#34;: 0, \u0026#34;username\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;firstName\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;lastName\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;password\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;userStatus\u0026#34;: 0 } ]   Parameters    Name In Type Required Description     body body UserArray true List of user object    Responses    Status Meaning Description Schema     default Default successful operation None    This operation does not require authentication  createUsersWithListInput \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;https://petstore.swagger.io/v2/user/createWithList\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;POST\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   POST /user/createWithList\nCreates list of users with given input array\n Body parameter\n 1 2 3 4 5 6 7 8 9 10 11 12  [ { \u0026#34;id\u0026#34;: 0, \u0026#34;username\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;firstName\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;lastName\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;password\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;userStatus\u0026#34;: 0 } ]   Parameters    Name In Type Required Description     body body UserArray true List of user object    Responses    Status Meaning Description Schema     default Default successful operation None    This operation does not require authentication  Schemas Category \n1 2 3 4 5  { \u0026#34;id\u0026#34;: 0, \u0026#34;name\u0026#34;: \u0026#34;string\u0026#34; }   Properties    Name Type Required Restrictions Description     id integer(int64) false none none   name string false none none    Pet \n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  { \u0026#34;id\u0026#34;: 0, \u0026#34;category\u0026#34;: { \u0026#34;id\u0026#34;: 0, \u0026#34;name\u0026#34;: \u0026#34;string\u0026#34; }, \u0026#34;name\u0026#34;: \u0026#34;doggie\u0026#34;, \u0026#34;photoUrls\u0026#34;: [ \u0026#34;string\u0026#34; ], \u0026#34;tags\u0026#34;: [ { \u0026#34;id\u0026#34;: 0, \u0026#34;name\u0026#34;: \u0026#34;string\u0026#34; } ], \u0026#34;status\u0026#34;: \u0026#34;available\u0026#34; }   Properties    Name Type Required Restrictions Description     id integer(int64) false none none   category Category false none none   name string true none none   photoUrls [string] true none none   tags [Tag] false none none   status string false none pet status in the store    Enumerated Values    Property Value     status available   status pending   status sold    Tag \n1 2 3 4 5  { \u0026#34;id\u0026#34;: 0, \u0026#34;name\u0026#34;: \u0026#34;string\u0026#34; }   Properties    Name Type Required Restrictions Description     id integer(int64) false none none   name string false none none    ApiResponse \n1 2 3 4 5 6  { \u0026#34;code\u0026#34;: 0, \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;message\u0026#34;: \u0026#34;string\u0026#34; }   Properties    Name Type Required Restrictions Description     code integer(int32) false none none   type string false none none   message string false none none    Order \n1 2 3 4 5 6 7 8 9  { \u0026#34;id\u0026#34;: 0, \u0026#34;petId\u0026#34;: 0, \u0026#34;quantity\u0026#34;: 0, \u0026#34;shipDate\u0026#34;: \u0026#34;2020-02-26T14:37:23Z\u0026#34;, \u0026#34;status\u0026#34;: \u0026#34;placed\u0026#34;, \u0026#34;complete\u0026#34;: true }   Properties    Name Type Required Restrictions Description     id integer(int64) false none none   petId integer(int64) false none none   quantity integer(int32) false none none   shipDate string(date-time) false none none   status string false none Order Status   complete boolean false none none    Enumerated Values    Property Value     status placed   status approved   status delivered    User \n1 2 3 4 5 6 7 8 9 10 11  { \u0026#34;id\u0026#34;: 0, \u0026#34;username\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;firstName\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;lastName\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;password\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;userStatus\u0026#34;: 0 }   Properties    Name Type Required Restrictions Description     id integer(int64) false none none   username string false none none   firstName string false none none   lastName string false none none   email string false none none   password string false none none   phone string false none none   userStatus integer(int32) false none User Status    ","description":"","id":24,"section":"docs","tags":null,"title":"Swagger Petstore","uri":"/ko/docs/apis/prueba/"},{"content":"Swagger Petstore v1.0.3  Scroll down for code samples, example requests and responses. Select a language for code samples from the tabs above or the mobile navigation menu.\n This is a sample server Petstore server. You can find out more about Swagger at http://swagger.io or on irc.freenode.net, #swagger. For this sample, you can use the api key special-key to test the authorization filters.\nBase URLs:\n  https://petstore.swagger.io/v2\n  http://petstore.swagger.io/v2\n  Terms of service\nEmail: Support\nLicense: Apache 2.0\nAuthentication  API Key (api_key)  Parameter Name: api_key, in: header.      oAuth2 authentication.\n Flow: implicit Authorization URL = https://petstore.swagger.io/oauth/authorize       Scope Scope Description     read:pets read your pets   write:pets modify pets in your account    pet Everything about your Pets\nFind out more\ngetPetById \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;https://petstore.swagger.io/v2/pet/{petId}\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;GET\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, \u0026#34;api_key\u0026#34;: []string{\u0026#34;API_KEY\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;GET\u0026#34;, \u0026#34;https://petstore.swagger.io/v2/pet/{petId}\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   GET /pet/{petId}\nFind pet by ID\nReturns a single pet\nParameters    Name In Type Required Description     petId path integer(int64) true ID of pet to return     Example responses\n  200 Response\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  { \u0026#34;id\u0026#34;: 0, \u0026#34;category\u0026#34;: { \u0026#34;id\u0026#34;: 0, \u0026#34;name\u0026#34;: \u0026#34;string\u0026#34; }, \u0026#34;name\u0026#34;: \u0026#34;doggie\u0026#34;, \u0026#34;photoUrls\u0026#34;: [ \u0026#34;string\u0026#34; ], \u0026#34;tags\u0026#34;: [ { \u0026#34;id\u0026#34;: 0, \u0026#34;name\u0026#34;: \u0026#34;string\u0026#34; } ], \u0026#34;status\u0026#34;: \u0026#34;available\u0026#34; }   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34; ?\u0026gt; \u0026lt;Pet\u0026gt; \u0026lt;id\u0026gt;0\u0026lt;/id\u0026gt; \u0026lt;category\u0026gt; \u0026lt;id\u0026gt;0\u0026lt;/id\u0026gt; \u0026lt;name\u0026gt;string\u0026lt;/name\u0026gt; \u0026lt;/category\u0026gt; \u0026lt;name\u0026gt;doggie\u0026lt;/name\u0026gt; \u0026lt;photoUrls\u0026gt;string\u0026lt;/photoUrls\u0026gt; \u0026lt;tags\u0026gt; \u0026lt;id\u0026gt;0\u0026lt;/id\u0026gt; \u0026lt;name\u0026gt;string\u0026lt;/name\u0026gt; \u0026lt;/tags\u0026gt; \u0026lt;status\u0026gt;available\u0026lt;/status\u0026gt; \u0026lt;/Pet\u0026gt;   Responses    Status Meaning Description Schema     200 OK successful operation Pet   400 Bad Request Invalid ID supplied None   404 Not Found Pet not found None    To perform this operation, you must be authenticated by means of one of the following methods: api_key  updatePetWithForm \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;https://petstore.swagger.io/v2/pet/{petId}\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;POST\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Content-Type\u0026#34;: []string{\u0026#34;application/x-www-form-urlencoded\u0026#34;}, \u0026#34;Authorization\u0026#34;: []string{\u0026#34;Bearer {access-token}\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;POST\u0026#34;, \u0026#34;https://petstore.swagger.io/v2/pet/{petId}\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   POST /pet/{petId}\nUpdates a pet in the store with form data\n Body parameter\n 1 2 3  name:stringstatus:string  Parameters    Name In Type Required Description     petId path integer(int64) true ID of pet that needs to be updated   body body object false none   » name body string false Updated name of the pet   » status body string false Updated status of the pet    Responses    Status Meaning Description Schema     405 Method Not Allowed Invalid input None    To perform this operation, you must be authenticated by means of one of the following methods: petstore_auth ( Scopes: write:pets read:pets )  deletePet \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;https://petstore.swagger.io/v2/pet/{petId}\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;DELETE\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;api_key\u0026#34;: []string{\u0026#34;string\u0026#34;}, \u0026#34;Authorization\u0026#34;: []string{\u0026#34;Bearer {access-token}\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;DELETE\u0026#34;, \u0026#34;https://petstore.swagger.io/v2/pet/{petId}\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   DELETE /pet/{petId}\nDeletes a pet\nParameters    Name In Type Required Description     api_key header string false none   petId path integer(int64) true Pet id to delete    Responses    Status Meaning Description Schema     400 Bad Request Invalid ID supplied None   404 Not Found Pet not found None    To perform this operation, you must be authenticated by means of one of the following methods: petstore_auth ( Scopes: write:pets read:pets )  uploadFile \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;https://petstore.swagger.io/v2/pet/{petId}/uploadImage\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;POST\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Content-Type\u0026#34;: []string{\u0026#34;multipart/form-data\u0026#34;}, \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, \u0026#34;Authorization\u0026#34;: []string{\u0026#34;Bearer {access-token}\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;POST\u0026#34;, \u0026#34;https://petstore.swagger.io/v2/pet/{petId}/uploadImage\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   POST /pet/{petId}/uploadImage\nuploads an image\n Body parameter\n 1 2 3  additionalMetadata:stringfile:string  Parameters    Name In Type Required Description     petId path integer(int64) true ID of pet to update   body body object false none   » additionalMetadata body string false Additional data to pass to server   » file body string(binary) false file to upload     Example responses\n  200 Response\n 1 2 3 4 5  { \u0026#34;code\u0026#34;: 0, \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;message\u0026#34;: \u0026#34;string\u0026#34; }   Responses    Status Meaning Description Schema     200 OK successful operation ApiResponse    To perform this operation, you must be authenticated by means of one of the following methods: petstore_auth ( Scopes: write:pets read:pets )  addPet \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;https://petstore.swagger.io/v2/pet\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;POST\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Content-Type\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, \u0026#34;Authorization\u0026#34;: []string{\u0026#34;Bearer {access-token}\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;POST\u0026#34;, \u0026#34;https://petstore.swagger.io/v2/pet\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   POST /pet\nAdd a new pet to the store\n Body parameter\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  { \u0026#34;id\u0026#34;: 0, \u0026#34;category\u0026#34;: { \u0026#34;id\u0026#34;: 0, \u0026#34;name\u0026#34;: \u0026#34;string\u0026#34; }, \u0026#34;name\u0026#34;: \u0026#34;doggie\u0026#34;, \u0026#34;photoUrls\u0026#34;: [ \u0026#34;string\u0026#34; ], \u0026#34;tags\u0026#34;: [ { \u0026#34;id\u0026#34;: 0, \u0026#34;name\u0026#34;: \u0026#34;string\u0026#34; } ], \u0026#34;status\u0026#34;: \u0026#34;available\u0026#34; }   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34; ?\u0026gt; \u0026lt;Pet\u0026gt; \u0026lt;id\u0026gt;0\u0026lt;/id\u0026gt; \u0026lt;category\u0026gt; \u0026lt;id\u0026gt;0\u0026lt;/id\u0026gt; \u0026lt;name\u0026gt;string\u0026lt;/name\u0026gt; \u0026lt;/category\u0026gt; \u0026lt;name\u0026gt;doggie\u0026lt;/name\u0026gt; \u0026lt;photoUrls\u0026gt;string\u0026lt;/photoUrls\u0026gt; \u0026lt;tags\u0026gt; \u0026lt;id\u0026gt;0\u0026lt;/id\u0026gt; \u0026lt;name\u0026gt;string\u0026lt;/name\u0026gt; \u0026lt;/tags\u0026gt; \u0026lt;status\u0026gt;available\u0026lt;/status\u0026gt; \u0026lt;/Pet\u0026gt;   Parameters    Name In Type Required Description     body body Pet true Pet object that needs to be added to the store    Responses    Status Meaning Description Schema     405 Method Not Allowed Invalid input None    To perform this operation, you must be authenticated by means of one of the following methods: petstore_auth ( Scopes: write:pets read:pets )  updatePet \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;https://petstore.swagger.io/v2/pet\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;PUT\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Content-Type\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, \u0026#34;Authorization\u0026#34;: []string{\u0026#34;Bearer {access-token}\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;PUT\u0026#34;, \u0026#34;https://petstore.swagger.io/v2/pet\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   PUT /pet\nUpdate an existing pet\n Body parameter\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  { \u0026#34;id\u0026#34;: 0, \u0026#34;category\u0026#34;: { \u0026#34;id\u0026#34;: 0, \u0026#34;name\u0026#34;: \u0026#34;string\u0026#34; }, \u0026#34;name\u0026#34;: \u0026#34;doggie\u0026#34;, \u0026#34;photoUrls\u0026#34;: [ \u0026#34;string\u0026#34; ], \u0026#34;tags\u0026#34;: [ { \u0026#34;id\u0026#34;: 0, \u0026#34;name\u0026#34;: \u0026#34;string\u0026#34; } ], \u0026#34;status\u0026#34;: \u0026#34;available\u0026#34; }   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34; ?\u0026gt; \u0026lt;Pet\u0026gt; \u0026lt;id\u0026gt;0\u0026lt;/id\u0026gt; \u0026lt;category\u0026gt; \u0026lt;id\u0026gt;0\u0026lt;/id\u0026gt; \u0026lt;name\u0026gt;string\u0026lt;/name\u0026gt; \u0026lt;/category\u0026gt; \u0026lt;name\u0026gt;doggie\u0026lt;/name\u0026gt; \u0026lt;photoUrls\u0026gt;string\u0026lt;/photoUrls\u0026gt; \u0026lt;tags\u0026gt; \u0026lt;id\u0026gt;0\u0026lt;/id\u0026gt; \u0026lt;name\u0026gt;string\u0026lt;/name\u0026gt; \u0026lt;/tags\u0026gt; \u0026lt;status\u0026gt;available\u0026lt;/status\u0026gt; \u0026lt;/Pet\u0026gt;   Parameters    Name In Type Required Description     body body Pet true Pet object that needs to be added to the store    Responses    Status Meaning Description Schema     400 Bad Request Invalid ID supplied None   404 Not Found Pet not found None   405 Method Not Allowed Validation exception None    To perform this operation, you must be authenticated by means of one of the following methods: petstore_auth ( Scopes: write:pets read:pets )  findPetsByStatus \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;https://petstore.swagger.io/v2/pet/findByStatus?status=available\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;GET\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, \u0026#34;Authorization\u0026#34;: []string{\u0026#34;Bearer {access-token}\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;GET\u0026#34;, \u0026#34;https://petstore.swagger.io/v2/pet/findByStatus\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   GET /pet/findByStatus\nFinds Pets by status\nMultiple status values can be provided with comma separated strings\nParameters    Name In Type Required Description     status query array[string] true Status values that need to be considered for filter    Enumerated Values    Parameter Value     status available   status pending   status sold     Example responses\n  200 Response\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  [ { \u0026#34;id\u0026#34;: 0, \u0026#34;category\u0026#34;: { \u0026#34;id\u0026#34;: 0, \u0026#34;name\u0026#34;: \u0026#34;string\u0026#34; }, \u0026#34;name\u0026#34;: \u0026#34;doggie\u0026#34;, \u0026#34;photoUrls\u0026#34;: [ \u0026#34;string\u0026#34; ], \u0026#34;tags\u0026#34;: [ { \u0026#34;id\u0026#34;: 0, \u0026#34;name\u0026#34;: \u0026#34;string\u0026#34; } ], \u0026#34;status\u0026#34;: \u0026#34;available\u0026#34; } ]   1 2 3 4 5 6 7 8 9 10 11 12 13  \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34; ?\u0026gt; \u0026lt;id\u0026gt;0\u0026lt;/id\u0026gt; \u0026lt;category\u0026gt; \u0026lt;id\u0026gt;0\u0026lt;/id\u0026gt; \u0026lt;name\u0026gt;string\u0026lt;/name\u0026gt; \u0026lt;/category\u0026gt; \u0026lt;name\u0026gt;doggie\u0026lt;/name\u0026gt; \u0026lt;photoUrls\u0026gt;string\u0026lt;/photoUrls\u0026gt; \u0026lt;tags\u0026gt; \u0026lt;id\u0026gt;0\u0026lt;/id\u0026gt; \u0026lt;name\u0026gt;string\u0026lt;/name\u0026gt; \u0026lt;/tags\u0026gt; \u0026lt;status\u0026gt;available\u0026lt;/status\u0026gt;   Responses    Status Meaning Description Schema     200 OK successful operation Inline   400 Bad Request Invalid status value None    Response Schema Status Code 200\n   Name Type Required Restrictions Description     anonymous [Pet] false none none   » id integer(int64) false none none   » category Category false none none   »» id integer(int64) false none none   »» name string false none none   » name string true none none   » photoUrls [string] true none none   » tags [Tag] false none none   »» id integer(int64) false none none   »» name string false none none   » status string false none pet status in the store    Enumerated Values    Property Value     status available   status pending   status sold    To perform this operation, you must be authenticated by means of one of the following methods: petstore_auth ( Scopes: write:pets read:pets )  findPetsByTags \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;https://petstore.swagger.io/v2/pet/findByTags?tags=string\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;GET\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, \u0026#34;Authorization\u0026#34;: []string{\u0026#34;Bearer {access-token}\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;GET\u0026#34;, \u0026#34;https://petstore.swagger.io/v2/pet/findByTags\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   GET /pet/findByTags\nFinds Pets by tags\nMultiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.\nParameters    Name In Type Required Description     tags query array[string] true Tags to filter by     Example responses\n  200 Response\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  [ { \u0026#34;id\u0026#34;: 0, \u0026#34;category\u0026#34;: { \u0026#34;id\u0026#34;: 0, \u0026#34;name\u0026#34;: \u0026#34;string\u0026#34; }, \u0026#34;name\u0026#34;: \u0026#34;doggie\u0026#34;, \u0026#34;photoUrls\u0026#34;: [ \u0026#34;string\u0026#34; ], \u0026#34;tags\u0026#34;: [ { \u0026#34;id\u0026#34;: 0, \u0026#34;name\u0026#34;: \u0026#34;string\u0026#34; } ], \u0026#34;status\u0026#34;: \u0026#34;available\u0026#34; } ]   1 2 3 4 5 6 7 8 9 10 11 12 13  \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34; ?\u0026gt; \u0026lt;id\u0026gt;0\u0026lt;/id\u0026gt; \u0026lt;category\u0026gt; \u0026lt;id\u0026gt;0\u0026lt;/id\u0026gt; \u0026lt;name\u0026gt;string\u0026lt;/name\u0026gt; \u0026lt;/category\u0026gt; \u0026lt;name\u0026gt;doggie\u0026lt;/name\u0026gt; \u0026lt;photoUrls\u0026gt;string\u0026lt;/photoUrls\u0026gt; \u0026lt;tags\u0026gt; \u0026lt;id\u0026gt;0\u0026lt;/id\u0026gt; \u0026lt;name\u0026gt;string\u0026lt;/name\u0026gt; \u0026lt;/tags\u0026gt; \u0026lt;status\u0026gt;available\u0026lt;/status\u0026gt;   Responses    Status Meaning Description Schema     200 OK successful operation Inline   400 Bad Request Invalid tag value None    Response Schema Status Code 200\n   Name Type Required Restrictions Description     anonymous [Pet] false none none   » id integer(int64) false none none   » category Category false none none   »» id integer(int64) false none none   »» name string false none none   » name string true none none   » photoUrls [string] true none none   » tags [Tag] false none none   »» id integer(int64) false none none   »» name string false none none   » status string false none pet status in the store    Enumerated Values    Property Value     status available   status pending   status sold    To perform this operation, you must be authenticated by means of one of the following methods: petstore_auth ( Scopes: write:pets read:pets )  store Access to Petstore orders\ngetInventory \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;https://petstore.swagger.io/v2/store/inventory\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;GET\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, \u0026#34;api_key\u0026#34;: []string{\u0026#34;API_KEY\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;GET\u0026#34;, \u0026#34;https://petstore.swagger.io/v2/store/inventory\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   GET /store/inventory\nReturns pet inventories by status\nReturns a map of status codes to quantities\n Example responses\n  200 Response\n 1 2 3 4  { \u0026#34;property1\u0026#34;: 0, \u0026#34;property2\u0026#34;: 0 }   Responses    Status Meaning Description Schema     200 OK successful operation Inline    Response Schema Status Code 200\n   Name Type Required Restrictions Description     » additionalProperties integer(int32) false none none    To perform this operation, you must be authenticated by means of one of the following methods: api_key  getOrderById \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;https://petstore.swagger.io/v2/store/order/{orderId}\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;GET\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;GET\u0026#34;, \u0026#34;https://petstore.swagger.io/v2/store/order/{orderId}\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   GET /store/order/{orderId}\nFind purchase order by ID\nFor valid response try integer IDs with value \u0026gt;= 1 and \u0026lt;= 10. Other values will generated exceptions\nParameters    Name In Type Required Description     orderId path integer(int64) true ID of pet that needs to be fetched     Example responses\n  200 Response\n 1 2 3 4 5 6 7 8  { \u0026#34;id\u0026#34;: 0, \u0026#34;petId\u0026#34;: 0, \u0026#34;quantity\u0026#34;: 0, \u0026#34;shipDate\u0026#34;: \u0026#34;2020-02-26T13:11:40Z\u0026#34;, \u0026#34;status\u0026#34;: \u0026#34;placed\u0026#34;, \u0026#34;complete\u0026#34;: true }   1 2 3 4 5 6 7 8 9  \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34; ?\u0026gt; \u0026lt;Order\u0026gt; \u0026lt;id\u0026gt;0\u0026lt;/id\u0026gt; \u0026lt;petId\u0026gt;0\u0026lt;/petId\u0026gt; \u0026lt;quantity\u0026gt;0\u0026lt;/quantity\u0026gt; \u0026lt;shipDate\u0026gt;2020-02-26T13:11:40Z\u0026lt;/shipDate\u0026gt; \u0026lt;status\u0026gt;placed\u0026lt;/status\u0026gt; \u0026lt;complete\u0026gt;true\u0026lt;/complete\u0026gt; \u0026lt;/Order\u0026gt;   Responses    Status Meaning Description Schema     200 OK successful operation Order   400 Bad Request Invalid ID supplied None   404 Not Found Order not found None    This operation does not require authentication  deleteOrder \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;https://petstore.swagger.io/v2/store/order/{orderId}\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;DELETE\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;DELETE\u0026#34;, \u0026#34;https://petstore.swagger.io/v2/store/order/{orderId}\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   DELETE /store/order/{orderId}\nDelete purchase order by ID\nFor valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors\nParameters    Name In Type Required Description     orderId path integer(int64) true ID of the order that needs to be deleted    Responses    Status Meaning Description Schema     400 Bad Request Invalid ID supplied None   404 Not Found Order not found None    This operation does not require authentication  placeOrder \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;https://petstore.swagger.io/v2/store/order\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;POST\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Content-Type\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;POST\u0026#34;, \u0026#34;https://petstore.swagger.io/v2/store/order\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   POST /store/order\nPlace an order for a pet\n Body parameter\n 1 2 3 4 5 6 7 8  { \u0026#34;id\u0026#34;: 0, \u0026#34;petId\u0026#34;: 0, \u0026#34;quantity\u0026#34;: 0, \u0026#34;shipDate\u0026#34;: \u0026#34;2020-02-26T13:11:40Z\u0026#34;, \u0026#34;status\u0026#34;: \u0026#34;placed\u0026#34;, \u0026#34;complete\u0026#34;: true }   Parameters    Name In Type Required Description     body body Order true order placed for purchasing the pet     Example responses\n  200 Response\n 1 2 3 4 5 6 7 8  { \u0026#34;id\u0026#34;: 0, \u0026#34;petId\u0026#34;: 0, \u0026#34;quantity\u0026#34;: 0, \u0026#34;shipDate\u0026#34;: \u0026#34;2020-02-26T13:11:40Z\u0026#34;, \u0026#34;status\u0026#34;: \u0026#34;placed\u0026#34;, \u0026#34;complete\u0026#34;: true }   1 2 3 4 5 6 7 8 9  \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34; ?\u0026gt; \u0026lt;Order\u0026gt; \u0026lt;id\u0026gt;0\u0026lt;/id\u0026gt; \u0026lt;petId\u0026gt;0\u0026lt;/petId\u0026gt; \u0026lt;quantity\u0026gt;0\u0026lt;/quantity\u0026gt; \u0026lt;shipDate\u0026gt;2020-02-26T13:11:40Z\u0026lt;/shipDate\u0026gt; \u0026lt;status\u0026gt;placed\u0026lt;/status\u0026gt; \u0026lt;complete\u0026gt;true\u0026lt;/complete\u0026gt; \u0026lt;/Order\u0026gt;   Responses    Status Meaning Description Schema     200 OK successful operation Order   400 Bad Request Invalid Order None    This operation does not require authentication  user Operations about user\nFind out more about our store\ngetUserByName \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;https://petstore.swagger.io/v2/user/{username}\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;GET\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;GET\u0026#34;, \u0026#34;https://petstore.swagger.io/v2/user/{username}\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   GET /user/{username}\nGet user by user name\nParameters    Name In Type Required Description     username path string true The name that needs to be fetched. Use user1 for testing.     Example responses\n  200 Response\n 1 2 3 4 5 6 7 8 9 10  { \u0026#34;id\u0026#34;: 0, \u0026#34;username\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;firstName\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;lastName\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;password\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;userStatus\u0026#34;: 0 }   1 2 3 4 5 6 7 8 9 10 11  \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34; ?\u0026gt; \u0026lt;User\u0026gt; \u0026lt;id\u0026gt;0\u0026lt;/id\u0026gt; \u0026lt;username\u0026gt;string\u0026lt;/username\u0026gt; \u0026lt;firstName\u0026gt;string\u0026lt;/firstName\u0026gt; \u0026lt;lastName\u0026gt;string\u0026lt;/lastName\u0026gt; \u0026lt;email\u0026gt;string\u0026lt;/email\u0026gt; \u0026lt;password\u0026gt;string\u0026lt;/password\u0026gt; \u0026lt;phone\u0026gt;string\u0026lt;/phone\u0026gt; \u0026lt;userStatus\u0026gt;0\u0026lt;/userStatus\u0026gt; \u0026lt;/User\u0026gt;   Responses    Status Meaning Description Schema     200 OK successful operation User   400 Bad Request Invalid username supplied None   404 Not Found User not found None    This operation does not require authentication  updateUser \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;https://petstore.swagger.io/v2/user/{username}\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;PUT\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Content-Type\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;PUT\u0026#34;, \u0026#34;https://petstore.swagger.io/v2/user/{username}\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   PUT /user/{username}\nUpdated user\nThis can only be done by the logged in user.\n Body parameter\n 1 2 3 4 5 6 7 8 9 10  { \u0026#34;id\u0026#34;: 0, \u0026#34;username\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;firstName\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;lastName\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;password\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;userStatus\u0026#34;: 0 }   Parameters    Name In Type Required Description     username path string true name that need to be updated   body body User true Updated user object    Responses    Status Meaning Description Schema     400 Bad Request Invalid user supplied None   404 Not Found User not found None    This operation does not require authentication  deleteUser \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;https://petstore.swagger.io/v2/user/{username}\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;DELETE\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;DELETE\u0026#34;, \u0026#34;https://petstore.swagger.io/v2/user/{username}\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   DELETE /user/{username}\nDelete user\nThis can only be done by the logged in user.\nParameters    Name In Type Required Description     username path string true The name that needs to be deleted    Responses    Status Meaning Description Schema     400 Bad Request Invalid username supplied None   404 Not Found User not found None    This operation does not require authentication  loginUser \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;https://petstore.swagger.io/v2/user/login?username=string\u0026amp;password=string\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;GET\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;GET\u0026#34;, \u0026#34;https://petstore.swagger.io/v2/user/login\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   GET /user/login\nLogs user into the system\nParameters    Name In Type Required Description     username query string true The user name for login   password query string true The password for login in clear text     Example responses\n  200 Response\n 1  \u0026#34;string\u0026#34;   Responses    Status Meaning Description Schema     200 OK successful operation string   400 Bad Request Invalid username/password supplied None    Response Headers    Status Header Type Format Description     200 X-Expires-After string date-time date in UTC when token expires   200 X-Rate-Limit integer int32 calls per hour allowed by the user    This operation does not require authentication  logoutUser \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;https://petstore.swagger.io/v2/user/logout\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;GET\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;GET\u0026#34;, \u0026#34;https://petstore.swagger.io/v2/user/logout\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   GET /user/logout\nLogs out current logged in user session\nResponses    Status Meaning Description Schema     default Default successful operation None    This operation does not require authentication  createUser \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;https://petstore.swagger.io/v2/user\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;POST\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Content-Type\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;POST\u0026#34;, \u0026#34;https://petstore.swagger.io/v2/user\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   POST /user\nCreate user\nThis can only be done by the logged in user.\n Body parameter\n 1 2 3 4 5 6 7 8 9 10  { \u0026#34;id\u0026#34;: 0, \u0026#34;username\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;firstName\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;lastName\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;password\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;userStatus\u0026#34;: 0 }   Parameters    Name In Type Required Description     body body User true Created user object    Responses    Status Meaning Description Schema     default Default successful operation None    This operation does not require authentication  createUsersWithArrayInput \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;https://petstore.swagger.io/v2/user/createWithArray\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;POST\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Content-Type\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;POST\u0026#34;, \u0026#34;https://petstore.swagger.io/v2/user/createWithArray\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   POST /user/createWithArray\nCreates list of users with given input array\n Body parameter\n 1 2 3 4 5 6 7 8 9 10 11 12  [ { \u0026#34;id\u0026#34;: 0, \u0026#34;username\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;firstName\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;lastName\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;password\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;userStatus\u0026#34;: 0 } ]   Parameters    Name In Type Required Description     body body UserArray true List of user object    Responses    Status Meaning Description Schema     default Default successful operation None    This operation does not require authentication  createUsersWithListInput \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;https://petstore.swagger.io/v2/user/createWithList\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;POST\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Content-Type\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;POST\u0026#34;, \u0026#34;https://petstore.swagger.io/v2/user/createWithList\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   POST /user/createWithList\nCreates list of users with given input array\n Body parameter\n 1 2 3 4 5 6 7 8 9 10 11 12  [ { \u0026#34;id\u0026#34;: 0, \u0026#34;username\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;firstName\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;lastName\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;password\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;userStatus\u0026#34;: 0 } ]   Parameters    Name In Type Required Description     body body UserArray true List of user object    Responses    Status Meaning Description Schema     default Default successful operation None    This operation does not require authentication  Schemas Category \n1 2 3 4 5  { \u0026#34;id\u0026#34;: 0, \u0026#34;name\u0026#34;: \u0026#34;string\u0026#34; }   Properties    Name Type Required Restrictions Description     id integer(int64) false none none   name string false none none    Pet \n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  { \u0026#34;id\u0026#34;: 0, \u0026#34;category\u0026#34;: { \u0026#34;id\u0026#34;: 0, \u0026#34;name\u0026#34;: \u0026#34;string\u0026#34; }, \u0026#34;name\u0026#34;: \u0026#34;doggie\u0026#34;, \u0026#34;photoUrls\u0026#34;: [ \u0026#34;string\u0026#34; ], \u0026#34;tags\u0026#34;: [ { \u0026#34;id\u0026#34;: 0, \u0026#34;name\u0026#34;: \u0026#34;string\u0026#34; } ], \u0026#34;status\u0026#34;: \u0026#34;available\u0026#34; }   Properties    Name Type Required Restrictions Description     id integer(int64) false none none   category Category false none none   name string true none none   photoUrls [string] true none none   tags [Tag] false none none   status string false none pet status in the store    Enumerated Values    Property Value     status available   status pending   status sold    Tag \n1 2 3 4 5  { \u0026#34;id\u0026#34;: 0, \u0026#34;name\u0026#34;: \u0026#34;string\u0026#34; }   Properties    Name Type Required Restrictions Description     id integer(int64) false none none   name string false none none    ApiResponse \n1 2 3 4 5 6  { \u0026#34;code\u0026#34;: 0, \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;message\u0026#34;: \u0026#34;string\u0026#34; }   Properties    Name Type Required Restrictions Description     code integer(int32) false none none   type string false none none   message string false none none    Order \n1 2 3 4 5 6 7 8 9  { \u0026#34;id\u0026#34;: 0, \u0026#34;petId\u0026#34;: 0, \u0026#34;quantity\u0026#34;: 0, \u0026#34;shipDate\u0026#34;: \u0026#34;2020-02-26T13:11:40Z\u0026#34;, \u0026#34;status\u0026#34;: \u0026#34;placed\u0026#34;, \u0026#34;complete\u0026#34;: true }   Properties    Name Type Required Restrictions Description     id integer(int64) false none none   petId integer(int64) false none none   quantity integer(int32) false none none   shipDate string(date-time) false none none   status string false none Order Status   complete boolean false none none    Enumerated Values    Property Value     status placed   status approved   status delivered    User \n1 2 3 4 5 6 7 8 9 10 11  { \u0026#34;id\u0026#34;: 0, \u0026#34;username\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;firstName\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;lastName\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;password\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;userStatus\u0026#34;: 0 }   Properties    Name Type Required Restrictions Description     id integer(int64) false none none   username string false none none   firstName string false none none   lastName string false none none   email string false none none   password string false none none   phone string false none none   userStatus integer(int32) false none User Status    ","description":"","id":25,"section":"docs","tags":null,"title":"Swagger Petstore 2","uri":"/ko/docs/apis/petstore2/"}]