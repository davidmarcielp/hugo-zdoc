[{"content":"Markdown here\n","description":"test post","id":0,"section":"updates","tags":null,"title":"May 2019","uri":"/es/updates/2019_may/"},{"content":"Markdown here\n","description":"test post","id":1,"section":"docs","tags":null,"title":"Basic Usage","uri":"/es/docs/gettingstarted/basicusage/"},{"content":"Markdown here\n","description":"test post","id":2,"section":"updates","tags":null,"title":"April 2019","uri":"/es/updates/2019_april/"},{"content":"Markdown here\n","description":"test post","id":3,"section":"docs","tags":null,"title":"Configuration","uri":"/es/docs/gettingstarted/configuration/"},{"content":"Markdown here\n","description":"test post","id":4,"section":"updates","tags":null,"title":"March 2019","uri":"/es/updates/2019_march/"},{"content":"Markdown here\n","description":"test post","id":5,"section":"docs","tags":null,"title":"Installation","uri":"/es/docs/gettingstarted/installation/"},{"content":"Markdown here\n","description":"test post","id":6,"section":"updates","tags":null,"title":"February 2019","uri":"/es/updates/2019_february/"},{"content":"Markdown here\n","description":"test post","id":7,"section":"docs","tags":null,"title":"Quick Start","uri":"/es/docs/gettingstarted/quickstart/"},{"content":"Markdown here\n","description":"test post","id":8,"section":"updates","tags":null,"title":"January 2019","uri":"/es/updates/2019_january/"},{"content":"Markdown here\n","description":"test post","id":10,"section":"docs","tags":null,"title":"Related content","uri":"/es/docs/relatedcontent/"},{"content":"Markdown here\n","description":"test post","id":11,"section":"docs","tags":null,"title":"Page Resources","uri":"/es/docs/pageresources/"},{"content":"Markdown here\n","description":"test post","id":12,"section":"docs","tags":null,"title":"Page Bundles","uri":"/es/docs/pagebundles/"},{"content":"Markdown here\n","description":"test post","id":13,"section":"docs","tags":null,"title":"Content Formats","uri":"/es/docs/contentfortmats/"},{"content":"Markdown here\n","description":"test post","id":14,"section":"docs","tags":null,"title":"Image Processing","uri":"/es/docs/imageprocessing/"},{"content":"Markdown here\n","description":"test post","id":15,"section":"docs","tags":null,"title":"Shortcodes","uri":"/es/docs/contentmanagement/shortcodes/"},{"content":"Markdown here\n","description":"test post","id":16,"section":"docs","tags":null,"title":"Frontmatter","uri":"/es/docs/contentmanagement/frontmatter/"},{"content":"Lorem est tota propiore conpellat pectoribus de\npectora summo. Redit teque digerit hominumque toris verebor lumina non cervice\nsubde tollit usus habet Arctonque, furores quas nec ferunt. Quoque montibus nunc\ncaluere tempus\nThis article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\n\rHeadings The following HTML \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level while \u0026lt;h6\u0026gt; is the lowest.\nH1 H2 H3 H4 H5 H6 Paragraph Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\nBlockquotes The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations.\nBlockquote without attribution  Tiam, ad mint andaepu dandae nostion secatur sequo quae.\nNote that you can use Markdown syntax within a blockquote.\n Blockquote with attribution  Don\u0026rsquo;t communicate by sharing memory, share memory by communicating.\n— Rob Pike1\n Tables Tables aren\u0026rsquo;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.\n   Name Age     Bob 27   Alice 23    Inline Markdown within tables    Inline  Markdown  In  Table     italics bold strikethrough  code    Code Blocks Code block with backticks html\r\u0026lt;!DOCTYPE html\u0026gt;\r\u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt;\r\u0026lt;head\u0026gt;\r\u0026lt;meta charset=\u0026quot;UTF-8\u0026quot;\u0026gt;\r\u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt;\r\u0026lt;/head\u0026gt;\r\u0026lt;body\u0026gt;\r\u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt;\r\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt;\rCode block indented with four spaces \u0026lt;!DOCTYPE html\u0026gt;\r\u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt;\r\u0026lt;head\u0026gt;\r\u0026lt;meta charset=\u0026quot;UTF-8\u0026quot;\u0026gt;\r\u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt;\r\u0026lt;/head\u0026gt;\r\u0026lt;body\u0026gt;\r\u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt;\r\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt;\r Code block with Hugo\u0026rsquo;s internal highlight shortcode 1 2 3 4 5 6 7 8 9 10  \u0026lt;!DOCTYPE html\u0026gt;\r\u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt;\r\u0026lt;head\u0026gt;\r\u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt;\r\u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt;\r\u0026lt;/head\u0026gt;\r\u0026lt;body\u0026gt;\r\u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt;\r\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt;   List Types Ordered List  First item Second item Third item  Unordered List  List item Another item And another item  Nested list  Item  First Sub-item Second Sub-item    Other Elements — abbr, sub, sup, kbd, mark GIF is a bitmap image format.\nH2O\nXn + Yn = Zn\nPress CTRL+ALT+Delete to end the session.\nMost salamanders are nocturnal, and hunt for insects, worms, and other small creatures.\n The above quote is excerpted from Rob Pike\u0026rsquo;s talk during Gopherfest, November 18, 2015. \u0026#x21a9;\u0026#xfe0e;\n  ","description":"","id":17,"section":"blog","tags":["markdown","css","html","themes"],"title":"Markdown Syntax Guide","uri":"/es/blog/markdown-syntax/"},{"content":"This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\nHeadings The following HTML \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level while \u0026lt;h6\u0026gt; is the lowest.\nH1 H2 H3 H4 H5 H6 Paragraph Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\nBlockquotes The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations.\nBlockquote without attribution  Tiam, ad mint andaepu dandae nostion secatur sequo quae.\nNote that you can use Markdown syntax within a blockquote.\n Blockquote with attribution  Don\u0026rsquo;t communicate by sharing memory, share memory by communicating.\n— Rob Pike1\n Tables Tables aren\u0026rsquo;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.\n   Name Age     Bob 27   Alice 23    Inline Markdown within tables    Inline  Markdown  In  Table     italics bold strikethrough  code    Code Blocks Code block with backticks html\r\u0026lt;!DOCTYPE html\u0026gt;\r\u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt;\r\u0026lt;head\u0026gt;\r\u0026lt;meta charset=\u0026quot;UTF-8\u0026quot;\u0026gt;\r\u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt;\r\u0026lt;/head\u0026gt;\r\u0026lt;body\u0026gt;\r\u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt;\r\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt;\rCode block indented with four spaces \u0026lt;!DOCTYPE html\u0026gt;\r\u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt;\r\u0026lt;head\u0026gt;\r\u0026lt;meta charset=\u0026quot;UTF-8\u0026quot;\u0026gt;\r\u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt;\r\u0026lt;/head\u0026gt;\r\u0026lt;body\u0026gt;\r\u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt;\r\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt;\r Code block with Hugo\u0026rsquo;s internal highlight shortcode 1 2 3 4 5 6 7 8 9 10  \u0026lt;!DOCTYPE html\u0026gt;\r\u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt;\r\u0026lt;head\u0026gt;\r\u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt;\r\u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt;\r\u0026lt;/head\u0026gt;\r\u0026lt;body\u0026gt;\r\u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt;\r\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt;   List Types Ordered List  First item Second item Third item  Unordered List  List item Another item And another item  Nested list  Item  First Sub-item Second Sub-item    Other Elements — abbr, sub, sup, kbd, mark GIF is a bitmap image format.\nH2O\nXn + Yn = Zn\nPress CTRL+ALT+Delete to end the session.\nMost salamanders are nocturnal, and hunt for insects, worms, and other small creatures.\n The above quote is excerpted from Rob Pike\u0026rsquo;s talk during Gopherfest, November 18, 2015. \u0026#x21a9;\u0026#xfe0e;\n  ","description":"Sample article showcasing basic Markdown syntax and formatting for HTML elements.","id":18,"section":"docs","tags":["markdown","css","html","themes"],"title":"Section","uri":"/es/docs/contentmanagement/sections/"},{"content":"Lorem est tota propiore conpellat pectoribus de\npectora summo. Redit teque digerit hominumque toris verebor lumina non cervice\nsubde tollit usus habet Arctonque, furores quas nec ferunt. Quoque montibus nunc\ncaluere tempus\nHugo ships with several Built-in Shortcodes for rich content, along with a Privacy Config and a set of Simple Shortcodes that enable static and no-JS versions of various social media embeds.\n\rInstagram Simple Shortcode .__h_instagram.card { font-family: -apple-system,BlinkMacSystemFont,\"Segoe UI\",Roboto,Oxygen-Sans,Ubuntu,Cantarell,\"Helvetica Neue\",sans-serif; font-size: 14px; border: 1px solid rgb(219, 219, 219); padding: 0; margin-top: 30px; } .__h_instagram.card .card-header, .__h_instagram.card .card-body { padding: 10px 10px 10px; } .__h_instagram.card img { width: 100%; height: auto; }  koloot.design   View More on Instagram   YouTube Privacy Enhanced Shortcode   Twitter Simple Shortcode .twitter-tweet { font: 14px/1.45 -apple-system,BlinkMacSystemFont,\"Segoe UI\",Roboto,Oxygen-Sans,Ubuntu,Cantarell,\"Helvetica Neue\",sans-serif; border-left: 4px solid #2b7bb9; padding-left: 1.5em; color: #555; } .twitter-tweet a { color: #2b7bb9; text-decoration: none; } blockquote.twitter-tweet a:hover, blockquote.twitter-tweet a:focus { text-decoration: underline; }  “In addition to being more logical, asymmetry has the advantage that its complete appearance is far more optically effective than symmetry.”\n— Jan Tschichold pic.twitter.com/gcv7SrhvJb\n\u0026mdash; Graphic Design History (@DesignReviewed) January 17, 2019 Vimeo Simple Shortcode  .__h_video { position: relative; padding-bottom: 56.23%; height: 0; overflow: hidden; width: 100%; background: #000; } .__h_video img { width: 100%; height: auto; color: #000; } .__h_video .play { height: 72px; width: 72px; left: 50%; top: 50%; margin-left: -36px; margin-top: -36px; position: absolute; cursor: pointer; }  ","description":"","id":19,"section":"blog","tags":["shortcodes","privacy"],"title":"Rich Content","uri":"/es/blog/rich-content/"},{"content":"Lorem est tota propiore conpellat pectoribus de\npectora summo. Redit teque digerit hominumque toris verebor lumina non cervice\nsubde tollit usus habet Arctonque, furores quas nec ferunt. Quoque montibus nunc\ncaluere tempus\ninhospita parcite confusaque translucet patri vestro qui optatis\nlumine cognoscere flos nubis! Fronde ipsamque patulos Dryopen deorum.\n Exierant elisi ambit vivere dedere Duce pollice Eris modo Spargitque ferrea quos palude  Rursus nulli murmur; hastile inridet ut ab gravi sententia! Nomine potitus\nsilentia flumen, sustinet placuit petis in dilapsa erat sunt. Atria\ntractus malis.\n Comas hunc haec pietate fetum procerum dixit Post torum vates letum Tiresia Flumen querellas Arcanaque montibus omnes Quidem et  Vagus elidunt \nThe Van de Graaf Canon\nMane refeci capiebant unda mulcebat Victa caducifer, malo vulnere contra\ndicere aurato, ludit regale, voca! Retorsit colit est profanae esse virescere\nfurit nec; iaculi matertera et visa est, viribus. Divesque creatis, tecta novat collumque vulnus est, parvas. Faces illo pepulere tempus adest. Tendit flamma, ab opes virum sustinet, sidus sequendo urbis.\nIubar proles corpore raptos vero auctor imperium; sed et huic: manus caeli\nLelegas tu lux. Verbis obstitit intus oblectamina fixis linguisque ausus sperare\nEchionides cornuaque tenent clausit possit. Omnia putatur. Praeteritae refert\nausus; ferebant e primus lora nutat, vici quae mea ipse. Et iter nil spectatae\nvulnus haerentia iuste et exercebat, sui et.\nEurytus Hector, materna ipsumque ut Politen, nec, nate, ignari, vernum cohaesit sequitur. Vel mitis temploque vocatus, inque alis, oculos nomen non silvis corpore coniunx ne displicet illa. Crescunt non unus, vidit visa quantum inmiti flumina mortis facto sic: undique a alios vincula sunt iactata abdita! Suspenderat ego fuit tendit: luna, ante urbem\nPropoetides parte.\n","description":"","id":20,"section":"blog","tags":["markdown","text"],"title":"Placeholder Text","uri":"/es/blog/placeholder-text/"},{"content":"Lorem est tota propiore conpellat pectoribus de\npectora summo. Redit teque digerit hominumque toris verebor lumina non cervice\nsubde tollit usus habet Arctonque, furores quas nec ferunt. Quoque montibus nunc\ncaluere tempus\nEmoji can be enabled in a Hugo project in a number of ways.\n\rThe emojify function can be called directly in templates or Inline Shortcodes.\nTo enable emoji globally, set enableEmoji to true in your site’s configuration and then you can type emoji shorthand codes directly in content files; e.g.\n🙈 🙈 🙉 🙉 🙊 🙊\nThe Emoji cheat sheet is a useful reference for emoji shorthand codes.\nN.B. The above steps enable Unicode Standard emoji characters and sequences in Hugo, however the rendering of these glyphs depends on the browser and the platform. To style the emoji you can either use a third party emoji font or a font stack; e.g.\n1 2 3  .emoji {\rfont-family: Apple Color Emoji,Segoe UI Emoji,NotoColorEmoji,Segoe UI Symbol,Android Emoji,EmojiSymbols;\r}  ","description":"","id":21,"section":"blog","tags":["emoji"],"title":"Emoji Support","uri":"/es/blog/emoji-support/"},{"content":"Authn API v1.4.0  Scroll down for code samples, example requests and responses. Select a language for code samples from the tabs above or the mobile navigation menu.\n This is the API for authn in MM\nSecurity:    Paths Authorization header     /oauth/token Basic \u0026lt;base64(client_id:client_secret)\u0026gt;    Base URLs:\n  http://localhost:8080\n  http://localhost:8081\n  Email: Support\nAuthentication  HTTP Authentication, scheme: basic  Applications API for managing applications\ngetAllApplications \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;http://localhost:8080/applications\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;GET\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;GET\u0026#34;, \u0026#34;http://localhost:8080/applications\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   GET /applications\nGet all applications\nGet all applications\n Example responses\n  200 Response\n 1 2 3 4 5 6 7 8 9 10 11  [ { \u0026#34;id\u0026#34;: \u0026#34;00d472d1-a5d6-4c2a-a9c6-bef99b697958\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;Lumiere\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;lumiere@masmovil.com\u0026#34;, \u0026#34;issuer\u0026#34;: \u0026#34;https://name.masmovil.com/\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Yoigo application\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2020-02-27T09:33:51.633Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2020-02-27T09:33:51.633Z\u0026#34; } ]   Responses    Status Meaning Description Schema     200 OK OK Inline   500 Internal Server Error Internal Server Error goError    Response Schema Status Code 200\n   Name Type Required Restrictions Description     anonymous [application] false none none   » id string false none Internal id   » name string true none none   » email string(email) true none none   » issuer string false none URL using the https scheme with no query or fragment component that the OP asserts as its Issuer Identifier   » description string true none none   » created_at string(date-time) false none none   » updated_at string(date-time) false none none    This operation does not require authentication  addApplication \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;http://localhost:8080/applications\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;POST\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Content-Type\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;POST\u0026#34;, \u0026#34;http://localhost:8080/applications\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   POST /applications\nAdd an application\nAdds an application\n Body parameter\n 1 2 3 4 5  { \u0026#34;name\u0026#34;: \u0026#34;Lumiere\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;lumiere@masmovil.com\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Yoigo application\u0026#34; }   Parameters    Name In Type Required Description     body body inboundApplication true Application to add     Example responses\n  201 Response\n 1 2 3  { \u0026#34;id\u0026#34;: \u0026#34;00d472d1-a5d6-4c2a-a9c6-bef99b697958\u0026#34; }   Responses    Status Meaning Description Schema     201 Created item created createdResponse   400 Bad Request invalid input, object invalid goError   409 Conflict application already exists goError   500 Internal Server Error Internal Server Error goError    This operation does not require authentication  getApp \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;http://localhost:8080/applications/{appId}\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;GET\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;GET\u0026#34;, \u0026#34;http://localhost:8080/applications/{appId}\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   GET /applications/{appId}\nGet application by id\nGet application identified by id\nParameters    Name In Type Required Description     appId path integer true none     Example responses\n  200 Response\n 1 2 3 4 5 6 7 8 9  { \u0026#34;id\u0026#34;: \u0026#34;00d472d1-a5d6-4c2a-a9c6-bef99b697958\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;Lumiere\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;lumiere@masmovil.com\u0026#34;, \u0026#34;issuer\u0026#34;: \u0026#34;https://name.masmovil.com/\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Yoigo application\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2020-02-27T09:33:51.638Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2020-02-27T09:33:51.638Z\u0026#34; }   Responses    Status Meaning Description Schema     200 OK OK application   400 Bad Request Invalid application id goError   404 Not Found Application not found goError   500 Internal Server Error Internal Server Error goError    This operation does not require authentication  updateApp \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;http://localhost:8080/applications/{appId}\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;PUT\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Content-Type\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;PUT\u0026#34;, \u0026#34;http://localhost:8080/applications/{appId}\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   PUT /applications/{appId}\nUpdate application by id\nUpdate application info identified by id\n Body parameter\n 1 2 3 4 5  { \u0026#34;name\u0026#34;: \u0026#34;Lumiere\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;lumiere@masmovil.com\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Yoigo application\u0026#34; }   Parameters    Name In Type Required Description     appId path integer true none   body body inboundApplication true none     Example responses\n  200 Response\n 1 2 3 4 5 6 7 8 9  { \u0026#34;id\u0026#34;: \u0026#34;00d472d1-a5d6-4c2a-a9c6-bef99b697958\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;Lumiere\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;lumiere@masmovil.com\u0026#34;, \u0026#34;issuer\u0026#34;: \u0026#34;https://name.masmovil.com/\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Yoigo application\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2020-02-27T09:33:51.639Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2020-02-27T09:33:51.639Z\u0026#34; }   Responses    Status Meaning Description Schema     200 OK OK application   400 Bad Request Invalid application id goError   404 Not Found Application not found goError   500 Internal Server Error Internal Server Error goError    This operation does not require authentication  deleteApp \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;http://localhost:8080/applications/{appId}\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;DELETE\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;DELETE\u0026#34;, \u0026#34;http://localhost:8080/applications/{appId}\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   DELETE /applications/{appId}\nDelete application\nDelete application\nParameters    Name In Type Required Description     appId path integer true none     Example responses\n  400 Response\n 1 2 3 4 5 6 7  { \u0026#34;id\u0026#34;: \u0026#34;MM0000001\u0026#34;, \u0026#34;status\u0026#34;: 400, \u0026#34;msg\u0026#34;: \u0026#34;Invalid inbound entit\u0026#34;, \u0026#34;componentMsg\u0026#34;: \u0026#34;EOF. Inbound application malformed\u0026#34;, \u0026#34;sentryCode\u0026#34;: \u0026#34;fake-req-id\u0026#34; }   Responses    Status Meaning Description Schema     204 No Content OK None   400 Bad Request Invalid application id goError   404 Not Found Application not found goError   500 Internal Server Error Internal Server Error goError    This operation does not require authentication  Clients API for managing OAuth2 clients and associate them to applications.\ngetAllClients \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;http://localhost:8080/applications/{appId}/clients\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;GET\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;GET\u0026#34;, \u0026#34;http://localhost:8080/applications/{appId}/clients\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   GET /applications/{appId}/clients\nGet all clients of this application\nGet all clients\nParameters    Name In Type Required Description     appId path integer true none     Example responses\n  200 Response\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  [ { \u0026#34;app_id\u0026#34;: \u0026#34;ljhX6gwmAnFcP1PLlwEI\u0026#34;, \u0026#34;client_id\u0026#34;: \u0026#34;KgVxDps0ofShKg9ukPgK\u0026#34;, \u0026#34;client_secret\u0026#34;: \u0026#34;wyMrmIuhAXURn7ZG-Qec8O4qmEhWJiCRIBqedv6kJvs=\u0026#34;, \u0026#34;redirect_url\u0026#34;: [ \u0026#34;[\\\u0026#34;https://server1/callback\\\u0026#34;,\\\u0026#34;https://server2/callback\\\u0026#34;]\u0026#34; ], \u0026#34;grant_types\u0026#34;: [ \u0026#34;[\\\u0026#34;password\\\u0026#34;]\u0026#34; ], \u0026#34;access_expiration\u0026#34;: 3600, \u0026#34;refresh_expiration\u0026#34;: 86400, \u0026#34;name\u0026#34;: \u0026#34;Lumiere Web\u0026#34;, \u0026#34;provider\u0026#34;: \u0026#34;YoigoProvider\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;lumiere@masmovil.com\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2020-02-27T09:33:51.642Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2020-02-27T09:33:51.642Z\u0026#34; } ]   Responses    Status Meaning Description Schema     200 OK OK Inline   500 Internal Server Error Internal Server Error goError    Response Schema Status Code 200\n   Name Type Required Restrictions Description     anonymous [client] false none none   » app_id string false none Application id   » client_id string false none Client id   » client_secret string false none Client secret   » redirect_url [string] false none none   » grant_types [string] false none none   » access_expiration integer false none none   » refresh_expiration integer false none none   » name string true none none   » provider string true none none   » email string(email) false none none   » created_at string(date-time) false none none   » updated_at string(date-time) false none none    This operation does not require authentication  addClient \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;http://localhost:8080/applications/{appId}/clients\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;POST\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Content-Type\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;POST\u0026#34;, \u0026#34;http://localhost:8080/applications/{appId}/clients\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   POST /applications/{appId}/clients\nAdd an client to this application\nAdds an client\n Body parameter\n 1 2 3 4 5 6 7 8 9 10 11  { \u0026#34;redirect_url\u0026#34;: [ \u0026#34;[\\\u0026#34;https://server1/callback\\\u0026#34;,\\\u0026#34;https://server2/callback\\\u0026#34;]\u0026#34; ], \u0026#34;grant_types\u0026#34;: [ \u0026#34;[\\\u0026#34;password\\\u0026#34;]\u0026#34; ], \u0026#34;name\u0026#34;: \u0026#34;Lumiere Web\u0026#34;, \u0026#34;provider\u0026#34;: \u0026#34;YoigoProvider\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;lumiere@masmovil.com\u0026#34; }   Parameters    Name In Type Required Description     appId path integer true none   body body inboundClient true Client to add     Example responses\n  201 Response\n 1 2 3  { \u0026#34;id\u0026#34;: \u0026#34;00d472d1-a5d6-4c2a-a9c6-bef99b697958\u0026#34; }   Responses    Status Meaning Description Schema     201 Created item created createdResponse   400 Bad Request invalid input, object invalid goError   409 Conflict client already exists goError   500 Internal Server Error Internal Server Error goError    This operation does not require authentication  getClient \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;http://localhost:8080/applications/{appId}/clients/{clientId}\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;GET\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;GET\u0026#34;, \u0026#34;http://localhost:8080/applications/{appId}/clients/{clientId}\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   GET /applications/{appId}/clients/{clientId}\nGet client by id\nGet client identified by id\nParameters    Name In Type Required Description     appId path integer true none   clientId path integer true none     Example responses\n  200 Response\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  { \u0026#34;app_id\u0026#34;: \u0026#34;ljhX6gwmAnFcP1PLlwEI\u0026#34;, \u0026#34;client_id\u0026#34;: \u0026#34;KgVxDps0ofShKg9ukPgK\u0026#34;, \u0026#34;client_secret\u0026#34;: \u0026#34;wyMrmIuhAXURn7ZG-Qec8O4qmEhWJiCRIBqedv6kJvs=\u0026#34;, \u0026#34;redirect_url\u0026#34;: [ \u0026#34;[\\\u0026#34;https://server1/callback\\\u0026#34;,\\\u0026#34;https://server2/callback\\\u0026#34;]\u0026#34; ], \u0026#34;grant_types\u0026#34;: [ \u0026#34;[\\\u0026#34;password\\\u0026#34;]\u0026#34; ], \u0026#34;access_expiration\u0026#34;: 3600, \u0026#34;refresh_expiration\u0026#34;: 86400, \u0026#34;name\u0026#34;: \u0026#34;Lumiere Web\u0026#34;, \u0026#34;provider\u0026#34;: \u0026#34;YoigoProvider\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;lumiere@masmovil.com\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2020-02-27T09:33:51.645Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2020-02-27T09:33:51.645Z\u0026#34; }   Responses    Status Meaning Description Schema     200 OK OK client   400 Bad Request Invalid client id goError   404 Not Found Client not found goError   500 Internal Server Error Internal Server Error goError    This operation does not require authentication  updateClient \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;http://localhost:8080/applications/{appId}/clients/{clientId}\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;PUT\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Content-Type\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;PUT\u0026#34;, \u0026#34;http://localhost:8080/applications/{appId}/clients/{clientId}\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   PUT /applications/{appId}/clients/{clientId}\nUpdate client by id\nUpdate client info identified by id\n Body parameter\n 1 2 3 4 5 6 7 8 9 10 11  { \u0026#34;redirect_url\u0026#34;: [ \u0026#34;[\\\u0026#34;https://server1/callback\\\u0026#34;,\\\u0026#34;https://server2/callback\\\u0026#34;]\u0026#34; ], \u0026#34;grant_types\u0026#34;: [ \u0026#34;[\\\u0026#34;password\\\u0026#34;]\u0026#34; ], \u0026#34;name\u0026#34;: \u0026#34;Lumiere Web\u0026#34;, \u0026#34;provider\u0026#34;: \u0026#34;YoigoProvider\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;lumiere@masmovil.com\u0026#34; }   Parameters    Name In Type Required Description     appId path integer true none   clientId path integer true none   body body inboundClient true none     Example responses\n  200 Response\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  { \u0026#34;app_id\u0026#34;: \u0026#34;ljhX6gwmAnFcP1PLlwEI\u0026#34;, \u0026#34;client_id\u0026#34;: \u0026#34;KgVxDps0ofShKg9ukPgK\u0026#34;, \u0026#34;client_secret\u0026#34;: \u0026#34;wyMrmIuhAXURn7ZG-Qec8O4qmEhWJiCRIBqedv6kJvs=\u0026#34;, \u0026#34;redirect_url\u0026#34;: [ \u0026#34;[\\\u0026#34;https://server1/callback\\\u0026#34;,\\\u0026#34;https://server2/callback\\\u0026#34;]\u0026#34; ], \u0026#34;grant_types\u0026#34;: [ \u0026#34;[\\\u0026#34;password\\\u0026#34;]\u0026#34; ], \u0026#34;access_expiration\u0026#34;: 3600, \u0026#34;refresh_expiration\u0026#34;: 86400, \u0026#34;name\u0026#34;: \u0026#34;Lumiere Web\u0026#34;, \u0026#34;provider\u0026#34;: \u0026#34;YoigoProvider\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;lumiere@masmovil.com\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2020-02-27T09:33:51.646Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2020-02-27T09:33:51.646Z\u0026#34; }   Responses    Status Meaning Description Schema     200 OK OK client   400 Bad Request Invalid client id goError   404 Not Found Client not found goError   500 Internal Server Error Internal Server Error goError    This operation does not require authentication  deleteClient \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;http://localhost:8080/applications/{appId}/clients/{clientId}\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;DELETE\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;DELETE\u0026#34;, \u0026#34;http://localhost:8080/applications/{appId}/clients/{clientId}\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   DELETE /applications/{appId}/clients/{clientId}\nDelete client\nDelete client\nParameters    Name In Type Required Description     appId path integer true none   clientId path integer true none     Example responses\n  400 Response\n 1 2 3 4 5 6 7  { \u0026#34;id\u0026#34;: \u0026#34;MM0000001\u0026#34;, \u0026#34;status\u0026#34;: 400, \u0026#34;msg\u0026#34;: \u0026#34;Invalid inbound entit\u0026#34;, \u0026#34;componentMsg\u0026#34;: \u0026#34;EOF. Inbound application malformed\u0026#34;, \u0026#34;sentryCode\u0026#34;: \u0026#34;fake-req-id\u0026#34; }   Responses    Status Meaning Description Schema     204 No Content OK None   400 Bad Request Invalid client id goError   404 Not Found Client not found goError   500 Internal Server Error Internal Server Error goError    This operation does not require authentication  Administration API for Authn administration\nrotateKeys \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;http://localhost:8080/keys\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;POST\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;POST\u0026#34;, \u0026#34;http://localhost:8080/keys\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   POST /keys\nRotate RSA keys\nThis endpoint creates a new RSA key pair and deprecates the old ones.\n Example responses\n  201 Response\n 1 2 3 4 5 6 7 8 9 10 11 12  { \u0026#34;alg\u0026#34;: \u0026#34;RS256\u0026#34;, \u0026#34;kty\u0026#34;: \u0026#34;RSA\u0026#34;, \u0026#34;use\u0026#34;: \u0026#34;sig\u0026#34;, \u0026#34;x5c\u0026#34;: [ \u0026#34;MIIDBTCCAe2gAwIBAgIJMg1BS/K2xovDMA0GCSqGSIb3DQEBCwUAMCAxHjAcBgNVBAMTFW1hc21vdmlsLmV1LmF1dGgwLmNvbTAeFw0xODA0MjcwNzQ5MjFaFw0zMjAxMDQwNzQ5MjFaMCAxHjAcBgNVBAMTFW1hc21vdmlsLmV1LmF1dGgwLmNvbTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBALRLXzvNzYGhvXUVefnrw+2+5k/J5PkSiv3dpbQjJB/kM3uPPVa/+qiy9gvcZbSkeN+Z6D3+fTcIW+xdWuiIj8kiBGLpHCjPz5ybaTq87uvx2KfEqx+T/Q7z9...\u0026#34; ], \u0026#34;n\u0026#34;: \u0026#34;tEtfO83NgaG9dRV5-evD7b7mT8nk-RKK_d2ltCMkH-Qze489Vr_6qLL2C9xltKR435noPf59Nwhb7F1a6IiPySIEYuk...\u0026#34;, \u0026#34;e\u0026#34;: \u0026#34;AQAB\u0026#34;, \u0026#34;kid\u0026#34;: \u0026#34;MUNBMkFFMkJBQjVDOTUxNUVCN0E4OTEyQjFDREI1M0VDQzA1MTU5MA\u0026#34;, \u0026#34;x5t\u0026#34;: \u0026#34;MUNBMkFFMkJBQjVDOTUxNUVCN0E4OTEyQjFDREI1M0VDQzA1MTU5MA\u0026#34; }   Responses    Status Meaning Description Schema     201 Created Keys rotated jwk   500 Internal Server Error Internal Server Error goError    This operation does not require authentication  deleteKey \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;http://localhost:8080/keys/{kid}\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;DELETE\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;DELETE\u0026#34;, \u0026#34;http://localhost:8080/keys/{kid}\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   DELETE /keys/{kid}\nDelete an RSA key\nThis endpoint deletes a RSA key pair given its key id \u0026ldquo;kid\u0026rdquo;\nParameters    Name In Type Required Description     kid path integer true none     Example responses\n  201 Response\n 1 2 3 4 5 6 7 8 9 10 11 12  { \u0026#34;alg\u0026#34;: \u0026#34;RS256\u0026#34;, \u0026#34;kty\u0026#34;: \u0026#34;RSA\u0026#34;, \u0026#34;use\u0026#34;: \u0026#34;sig\u0026#34;, \u0026#34;x5c\u0026#34;: [ \u0026#34;MIIDBTCCAe2gAwIBAgIJMg1BS/K2xovDMA0GCSqGSIb3DQEBCwUAMCAxHjAcBgNVBAMTFW1hc21vdmlsLmV1LmF1dGgwLmNvbTAeFw0xODA0MjcwNzQ5MjFaFw0zMjAxMDQwNzQ5MjFaMCAxHjAcBgNVBAMTFW1hc21vdmlsLmV1LmF1dGgwLmNvbTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBALRLXzvNzYGhvXUVefnrw+2+5k/J5PkSiv3dpbQjJB/kM3uPPVa/+qiy9gvcZbSkeN+Z6D3+fTcIW+xdWuiIj8kiBGLpHCjPz5ybaTq87uvx2KfEqx+T/Q7z9...\u0026#34; ], \u0026#34;n\u0026#34;: \u0026#34;tEtfO83NgaG9dRV5-evD7b7mT8nk-RKK_d2ltCMkH-Qze489Vr_6qLL2C9xltKR435noPf59Nwhb7F1a6IiPySIEYuk...\u0026#34;, \u0026#34;e\u0026#34;: \u0026#34;AQAB\u0026#34;, \u0026#34;kid\u0026#34;: \u0026#34;MUNBMkFFMkJBQjVDOTUxNUVCN0E4OTEyQjFDREI1M0VDQzA1MTU5MA\u0026#34;, \u0026#34;x5t\u0026#34;: \u0026#34;MUNBMkFFMkJBQjVDOTUxNUVCN0E4OTEyQjFDREI1M0VDQzA1MTU5MA\u0026#34; }   Responses    Status Meaning Description Schema     201 Created Key deleted jwk   404 Not Found Key not found goError   500 Internal Server Error Internal Server Error goError    This operation does not require authentication  OAuth2 OAuth2 authentication endpoints\ngetAccessTokenWithForm \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;http://localhost:8080/oauth/token\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;POST\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Content-Type\u0026#34;: []string{\u0026#34;application/x-www-form-urlencoded\u0026#34;}, \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;POST\u0026#34;, \u0026#34;http://localhost:8080/oauth/token\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   POST /oauth/token\nGenerate an access_token\n Body parameter\n 1 2 3 4 5 6 7 8 9 10  grant_type:passwordaudience:stringscope:stringusername:usuario@gmail.compassword:\u0026#39;123456\u0026#39;state:OyMh_ObySiyWi7SrXgfIdgcode:OyMh_ObySiyWi7SrXgfIdgcode_verifier:5VTycQU924SQ3jHp5g9zcvMF2ai3aN89kxzB2D5QJUrejxam3jddqFUugD8Fassertion:string  Parameters    Name In Type Required Description     body body body false none     Example responses\n  200 Response\n 1 2 3 4 5 6 7  { \u0026#34;access_token\u0026#34;: \u0026#34;eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImtpZCI6Ik1VTkJaNa0ZGTWtKQlFqVkRPVFV4TlVWQ04wRTRPVEV5UWpGRFJFSTFNMFZEUXpBMU1UVTVNQSJ9.eyJpc3MiOiJodHRwczovL21hc21vdmlsLmV1LmF1dGgwLmNvbS8iLCJzdWIiOiJNN3A0YWUyeVdIN1N5bXdiVVlHcTJVdXdlVmp6WE5PR0BjbGllbnRzIiwiYXVkIjoiaHR0cHM6Ly9tYXNtb3ZpbC5ldS5hdXRoMC5jb20vYXBpL3YyLyIsImlhdCI6MTU1MDQyMDM3NywiZXhwIjoxNTUwNTA2Nzc3LCJhenAiOiJNN3A0YWUyeVdIN1N5bXdiVVlHcTJVdXdlVmp6WE5PRyIsInNjb3BlIjoicmVhZDpjbGllbnRfZ3JhbnRzIGNyZWF0ZTpjbGllbnRfZ3JhbnRzIGRlbGV0ZTpjbGllbnRfZ3JhbnRzIHVwZGF0ZTpjbGllbnRfZ3JhbnRzIHJlYWQ6dXNlcnMgdXBkYXRlOnVzZXJzIGRlbGV0ZTp1c2VycyBjcmVhdGU6dXNlcnMgcmVhZDp1c2Vyc19hcHBfbWV0YWRhdGEgdXBkYXRlOnVzZXJzX2FwcF9tZXRhZGF0YSBkZWxldGU6dXNlcnNfYXBwX21ldGFkYXRhIGNyZWF0ZTp1c2Vyc19hcHBfbWV0YWRhdGEgY3JlYXRlOnVzZXJfdGlja2V0cyByZWFkOmNsaWVudHMgdXBkYXRlOmNsaWVudHMgZGVsZXRlOmNsaWVudHMgY3JlYXRlOmNsaWVudHMgcmVhZDpjbGllbnRfa2V5cyB1cGRhdGU6Y2xpZW50X2tleXMgZGVsZXRlOmNsaWVudF9rZXlzIGNyZWF0ZTpjbGllbnRfa2V5cyByZWFkOmNvbm5lY3Rpb25zIHVwZGF0ZTpjb25uZWN0aW9ucyBkZWxldGU6Y29ubmVjdGlvbnMgY3JlYXRlOmNvbm5lY3Rpb25zIHJlYWQ6cmVzb3VyY2Vfc2VydmVycyB1cGRhdGU6cmVzb3VyY2Vfc2VydmVycyBkZWxldGU6cmVzb3VyY2Vfc2VydmVycyBjcmVhdGU6cmVzb3VyY2Vfc2VydmVycyByZWFkOmRldmljZV9jcmVkZW50aWFscyB1cGRhdGU6ZGV2aWNlX2NyZWRlbnRpYWxzIGRlbGV0ZTpkZXZpY2VfY3JlZGVudGlhbHMgY3JlYXRlOmRldmljZV9jcmVkZW50aWFscyByZWFkOnJ1bGVzIHVwZGF0ZTpydWxlcyBkZWxldGU6cnVsZXMgY3JlYXRlOnJ1bGVzIHJlYWQ6cnVsZXNfY29uZmlncyB1cGRhdGU6cnVsZXNfY29uZmlncyBkZWxldGU6cnVsZXNfY29uZmlncyByZWFkOmVtYWlsX3Byb3ZpZGVyIHVwZGF0ZTplbWFpbF9wcm92aWRlciBkZWxldGU6ZW1haWxfcHJvdmlkZXIgY3JlYXRlOmVtYWlsX3Byb3ZpZGVyIGJsYWNrbGlzdDp0b2tlbnMgcmVhZDpzdGF0cyByZWFkOnRlbmFudF9zZXR0aW5ncyB1cGRhdGU6dGVuYW50X3NldHRpbmdzIHJlYWQ6bG9ncyByZWFkOnNoaWVsZHMgY3JlYXRlOnNoaWVsZHMgZGVsZXRlOnNoaWVsZHMgdXBkYXRlOnRyaWdnZXJzIHJlYWQ6dHJpZ2dlcnMgcmVhZDpncmFudHMgZGVsZXRlOmdyYW50cyByZWFkOmd1YXJkaWFuX2ZhY3RvcnMgdXBkYXRlOmd1YXJkaWFuX2ZhY3RvcnMgcmVhZDpndWFyZGlhbl9lbnJvbGxtZW50cyBkZWxldGU6Z3VhcmRpYW5fZW5yb2xsbWVudHMgY3JlYXRlOmd1YXJkaWFuX2Vucm9sbG1lbnRfdGlja2V0cyByZWFkOnVzZXJfaWRwX3Rva2VucyBjcmVhdGU6cGFzc3dvcmRzX2NoZWNraW5nX2pvYiBkZWxldGU6cGFzc3dvcmRzX2NoZWNraW5nX2pvYiByZWFkOmN1c3RvbV9kb21haW5zIGRlbGV0ZTpjdXN0b21fZG9tYWlucyBjcmVhdGU6Y3VzdG9tX2RvbWFpbnMgcmVhZDplbWFpbF90ZW1wbGF0ZXMgY3JlYXRlOmVtYWlsX3RlbXBsYXRlcyB1cGRhdGU6ZW1haWxfdGVtcGxhdGVzIiwiZ3R5IjoiY2xpZW50LWNyZWRlbnRpYWxzIn0.h6GTIB8OMcMXDxyUzUW8tJ8LW7U_yIQfCshDuOW9E-_rd9NNRBxzsPhVHllawcB336Xfo3kwrVmS0KdkLGWz4BJo67R_4KXjQ_1VcmHD2WfzpS06fmjdV1DWZbd5dv3LBtPXEIYxWVzFSUcAlIKo5cstYlUWvb1weh56yBu26Y48UK5CIjwLmqAtlxL3kNcMI_PPuM-UmiQPeNe8cKPN4c7Tf_aVw38DcGydY53GIJ_fTeRvB5kb9CO4bs6g4iWOFZFFuLAluRFZsKcqJwNdW1RDYB_blmva5Q8JrBeU5TkbfdrWIL2QfdD93hjLFcWgE9z6txUz5opW2qkcMoQkLA\u0026#34;, \u0026#34;scope\u0026#34;: \u0026#34;read:client_grants create:client_grants delete:client_grants update:client_grants\u0026#34;, \u0026#34;expires_in\u0026#34;: 86400, \u0026#34;token_type\u0026#34;: \u0026#34;Bearer\u0026#34;, \u0026#34;refresh_token\u0026#34;: \u0026#34;eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImtpZCI6Ik1VTkJNa0ZGTWtKQlFqVkRPVFV4TlVWQ04wRTRPVEV5UWpGRFJFSTFNMFZEUXpBMU1UVTVNQSJ9\u0026#34; }   Responses    Status Meaning Description Schema     200 OK OK accessTokenResponse   400 Bad Request Bad Request errorAccessTokenResponse   401 Unauthorized Unauthorized errorAccessTokenResponse   403 Forbidden Too Many Login Attempts Error errorAccessTokenResponse    Response Headers    Status Header Type Format Description     200 Cache-Control string  The authorization server MUST include the HTTP \u0026ldquo;Cache-Control\u0026rdquo; response header field with a value of \u0026ldquo;no-store\u0026rdquo; in any response containing tokens, secrets, or other sensitive information.    This operation does not require authentication  getAuthorizationPage \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;http://localhost:8080/oauth/authorize?client_id=TtsdmebPcQtEnvLsKw7x\u0026amp;response_type=token\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;GET\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Accept\u0026#34;: []string{\u0026#34;*/*\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;GET\u0026#34;, \u0026#34;http://localhost:8080/oauth/authorize\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   GET /oauth/authorize\nGet authentication page\nLogs in the user or redirects it to a page to authenticate itself\nParameters    Name In Type Required Description     client_id query string true none   response_type query string true none   redirect_uri query string false none   state query string false none   code_challenge query string false none    Enumerated Values    Parameter Value     response_type token   response_type code     Example responses\n  400 Response\n Responses    Status Meaning Description Schema     302 Found Authorization code/Implicit grant response None   400 Bad Request Bad Request errorAccessTokenResponse   401 Unauthorized Unauthorized errorAccessTokenResponse    Response Headers    Status Header Type Format Description     302 Location string  The redirect uri of the client    This operation does not require authentication  getJwks \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;http://localhost:8080/.well-known/jwks.json\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;GET\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;GET\u0026#34;, \u0026#34;http://localhost:8080/.well-known/jwks.json\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   GET /.well-known/jwks.json\nURL of the OP\u0026rsquo;s JSON Web Key Set [JWK] document\nThis contains the signing key(s) the RP uses to validate signatures from the OP. The JWK Set MAY also contain the Server\u0026rsquo;s encryption key(s), which are used by RPs to encrypt requests to the Server. When both signing and encryption keys are made available, a use (Key Use) parameter value is REQUIRED for all keys in the referenced JWK Set to indicate each key\u0026rsquo;s intended usage. Although some algorithms allow the same key to be used for both signatures and encryption, doing so is NOT RECOMMENDED, as it is less secure. The JWK x5c parameter MAY be used to provide X.509 representations of keys provided. When used, the bare key values MUST still be present and MUST match those in the certificate.\n Example responses\n  200 Response\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  { \u0026#34;keys\u0026#34;: [ { \u0026#34;alg\u0026#34;: \u0026#34;RS256\u0026#34;, \u0026#34;kty\u0026#34;: \u0026#34;RSA\u0026#34;, \u0026#34;use\u0026#34;: \u0026#34;sig\u0026#34;, \u0026#34;x5c\u0026#34;: [ \u0026#34;MIIDBTCCAe2gAwIBAgIJMg1BS/K2xovDMA0GCSqGSIb3DQEBCwUAMCAxHjAcBgNVBAMTFW1hc21vdmlsLmV1LmF1dGgwLmNvbTAeFw0xODA0MjcwNzQ5MjFaFw0zMjAxMDQwNzQ5MjFaMCAxHjAcBgNVBAMTFW1hc21vdmlsLmV1LmF1dGgwLmNvbTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBALRLXzvNzYGhvXUVefnrw+2+5k/J5PkSiv3dpbQjJB/kM3uPPVa/+qiy9gvcZbSkeN+Z6D3+fTcIW+xdWuiIj8kiBGLpHCjPz5ybaTq87uvx2KfEqx+T/Q7z9...\u0026#34; ], \u0026#34;n\u0026#34;: \u0026#34;tEtfO83NgaG9dRV5-evD7b7mT8nk-RKK_d2ltCMkH-Qze489Vr_6qLL2C9xltKR435noPf59Nwhb7F1a6IiPySIEYuk...\u0026#34;, \u0026#34;e\u0026#34;: \u0026#34;AQAB\u0026#34;, \u0026#34;kid\u0026#34;: \u0026#34;MUNBMkFFMkJBQjVDOTUxNUVCN0E4OTEyQjFDREI1M0VDQzA1MTU5MA\u0026#34;, \u0026#34;x5t\u0026#34;: \u0026#34;MUNBMkFFMkJBQjVDOTUxNUVCN0E4OTEyQjFDREI1M0VDQzA1MTU5MA\u0026#34; } ] }   Responses    Status Meaning Description Schema     200 OK OK jwks    This operation does not require authentication  getOpenidConfiguration \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;http://localhost:8080/.well-known/openid-configuration\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;GET\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;GET\u0026#34;, \u0026#34;http://localhost:8080/.well-known/openid-configuration\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   GET /.well-known/openid-configuration\nURL of list of the OpenID/OAuth endpoints\nThis URL returns a JSON listing of the OpenID/OAuth endpoints, supported scopes and claims, public keys used to sign the tokens, and other details. The clients can use this information to construct a request to the OpenID server. The field names and values are defined in the OpenID Connect Discovery Specification\n Example responses\n  200 Response\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32  { \u0026#34;token_endpoint\u0026#34;: \u0026#34;https://authn.k8s.masmovil.com/oauth/token\u0026#34;, \u0026#34;token_endpoint_auth_methods_supported\u0026#34;: [ \u0026#34;[\\\u0026#34;client_secret_post\\\u0026#34;,\\\u0026#34;client_secret_basic\\\u0026#34;]\u0026#34; ], \u0026#34;jwks_uri\u0026#34;: \u0026#34;https://authn.k8s.masmovil.com/.well-known/jwks.json\u0026#34;, \u0026#34;response_modes_supported\u0026#34;: [ \u0026#34;[\\\u0026#34;query\\\u0026#34;,\\\u0026#34;fragment\\\u0026#34;,\\\u0026#34;form_post\\\u0026#34;]\u0026#34; ], \u0026#34;subject_types_supported\u0026#34;: [ \u0026#34;[\\\u0026#34;public\\\u0026#34;]\u0026#34; ], \u0026#34;id_token_signing_alg_values_supported\u0026#34;: [ \u0026#34;[\\\u0026#34;RS256\\\u0026#34;]\u0026#34; ], \u0026#34;response_types_supported\u0026#34;: [ \u0026#34;[\\\u0026#34;code\\\u0026#34;,\\\u0026#34;token\\\u0026#34;]\u0026#34; ], \u0026#34;scopes_supported\u0026#34;: [ \u0026#34;[\\\u0026#34;openid\\\u0026#34;,\\\u0026#34;profile\\\u0026#34;,\\\u0026#34;email\\\u0026#34;,\\\u0026#34;offline_access\\\u0026#34;]\u0026#34; ], \u0026#34;issuer\u0026#34;: \u0026#34;{appName}.auth.masmovil.com\u0026#34;, \u0026#34;request_uri_parameter_supported\u0026#34;: false, \u0026#34;userinfo_endpoint\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;authorization_endpoint\u0026#34;: \u0026#34;https://authn.k8s.masmovil.com/oauth/authorize\u0026#34;, \u0026#34;http_logout_supported\u0026#34;: false, \u0026#34;frontchannel_logout_supported\u0026#34;: false, \u0026#34;end_session_endpoint\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;claims_supported\u0026#34;: [ \u0026#34;[\\\u0026#34;aud\\\u0026#34;,\\\u0026#34;cid\\\u0026#34;,\\\u0026#34;exp\\\u0026#34;,\\\u0026#34;iat\\\u0026#34;,\\\u0026#34;iss\\\u0026#34;,\\\u0026#34;moi\\\u0026#34;,\\\u0026#34;scope\\\u0026#34;,\\\u0026#34;sub\\\u0026#34;,\\\u0026#34;tid\\\u0026#34;,\\\u0026#34;user_metadata\\\u0026#34;,\\\u0026#34;app_metadata\\\u0026#34;,\\\u0026#34;given_name\\\u0026#34;,\\\u0026#34;family_name\\\u0026#34;,\\\u0026#34;name\\\u0026#34;]\u0026#34; ] }   Responses    Status Meaning Description Schema     200 OK OK openid-configuration    This operation does not require authentication  IAM Identity and Access Management API\nretrieveMultiplePermissions \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;http://localhost:8080/permissions\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;GET\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;GET\u0026#34;, \u0026#34;http://localhost:8080/permissions\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   GET /permissions\nRetrieves multiple permissions.\nParameters    Name In Type Required Description     from query integer false Indicates the offset for pagination   limit query integer false Indicates the number of permissions to retrieve     Example responses\n  200 Response\n 1 2 3 4 5 6 7 8 9  [ { \u0026#34;id\u0026#34;: \u0026#34;a8456194-5595-4df1-b37b-1b4d88c545a6\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;application.users.create\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Gives the ability to create new users\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2020-02-27T09:33:51.654Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2020-02-27T09:33:51.654Z\u0026#34; } ]   Responses    Status Meaning Description Schema     200 OK The permission/s have been successfully retrieved. Inline   400 Bad Request One or more of the query parameters is not valid. goError   500 Internal Server Error Internal Server Error. goError    Response Schema Status Code 200\n   Name Type Required Restrictions Description     anonymous [permission] false none none   » id string false none Unique identifier of the permission.   » name string false none The name of the permission   » description string false none A description of the permission   » created_at string(date-time) false none none   » updated_at string(date-time) false none none    This operation does not require authentication  createPermission \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;http://localhost:8080/permissions\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;POST\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Content-Type\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;POST\u0026#34;, \u0026#34;http://localhost:8080/permissions\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   POST /permissions\nCreates a new permission or a set of new permissions.\n Body parameter\n 1 2 3 4  { \u0026#34;name\u0026#34;: \u0026#34;application.users.create\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Gives the ability to create new users\u0026#34; }   Parameters    Name In Type Required Description     batch query boolean false Indicates that the request is an array with multiple permissions.   body body permissionRequest true none     Example responses\n  201 Response\n 1 2 3  { \u0026#34;id\u0026#34;: \u0026#34;00d472d1-a5d6-4c2a-a9c6-bef99b697958\u0026#34; }   Responses    Status Meaning Description Schema     201 Created The permission/s have been successfully created. createdResponse   400 Bad Request The permission lacks required parameters or the name does not match the pattern. goError   409 Conflict A permission with the same name already exists. goError   500 Internal Server Error Internal Server Error. goError    This operation does not require authentication  retrievePermission \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;http://localhost:8080/permissions/{permissionId}\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;GET\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;GET\u0026#34;, \u0026#34;http://localhost:8080/permissions/{permissionId}\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   GET /permissions/{permissionId}\nRetrieves a single permission\nParameters    Name In Type Required Description     permissionId path string true none     Example responses\n  200 Response\n 1 2 3 4 5 6 7  { \u0026#34;id\u0026#34;: \u0026#34;a8456194-5595-4df1-b37b-1b4d88c545a6\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;application.users.create\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Gives the ability to create new users\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2020-02-27T09:33:51.656Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2020-02-27T09:33:51.656Z\u0026#34; }   Responses    Status Meaning Description Schema     200 OK Permission successfully retrieved permission   404 Not Found Permission not found goError   500 Internal Server Error Internal Server Error goError    This operation does not require authentication  updatePermission \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;http://localhost:8080/permissions/{permissionId}\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;PUT\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Content-Type\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;PUT\u0026#34;, \u0026#34;http://localhost:8080/permissions/{permissionId}\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   PUT /permissions/{permissionId}\nUpdates a permission\n Body parameter\n 1 2 3 4  { \u0026#34;name\u0026#34;: \u0026#34;application.users.create\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Gives the ability to create new users\u0026#34; }   Parameters    Name In Type Required Description     permissionId path string true none   body body permissionRequest true none     Example responses\n  404 Response\n 1 2 3 4 5 6 7  { \u0026#34;id\u0026#34;: \u0026#34;MM0000001\u0026#34;, \u0026#34;status\u0026#34;: 400, \u0026#34;msg\u0026#34;: \u0026#34;Invalid inbound entit\u0026#34;, \u0026#34;componentMsg\u0026#34;: \u0026#34;EOF. Inbound application malformed\u0026#34;, \u0026#34;sentryCode\u0026#34;: \u0026#34;fake-req-id\u0026#34; }   Responses    Status Meaning Description Schema     204 No Content Permission successfully updated None   404 Not Found Permission not found goError   409 Conflict A permission with the same name already exists. goError   500 Internal Server Error Internal Server Error goError    This operation does not require authentication  deletePermission \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;http://localhost:8080/permissions/{permissionId}\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;DELETE\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;DELETE\u0026#34;, \u0026#34;http://localhost:8080/permissions/{permissionId}\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   DELETE /permissions/{permissionId}\nDeletes a permission\nParameters    Name In Type Required Description     permissionId path string true none     Example responses\n  404 Response\n 1 2 3 4 5 6 7  { \u0026#34;id\u0026#34;: \u0026#34;MM0000001\u0026#34;, \u0026#34;status\u0026#34;: 400, \u0026#34;msg\u0026#34;: \u0026#34;Invalid inbound entit\u0026#34;, \u0026#34;componentMsg\u0026#34;: \u0026#34;EOF. Inbound application malformed\u0026#34;, \u0026#34;sentryCode\u0026#34;: \u0026#34;fake-req-id\u0026#34; }   Responses    Status Meaning Description Schema     204 No Content Permission successfully deleted None   404 Not Found Permission not found goError   500 Internal Server Error Internal Server Error goError    This operation does not require authentication  retrieveMultipleRoles \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;http://localhost:8080/roles\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;GET\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;GET\u0026#34;, \u0026#34;http://localhost:8080/roles\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   GET /roles\nRetrieves multiple roles.\nParameters    Name In Type Required Description     from query integer false Indicates the offset for pagination   limit query integer false Indicates the number of roles to retrieve     Example responses\n  200 Response\n 1 2 3 4 5 6 7 8 9 10  [ { \u0026#34;id\u0026#34;: \u0026#34;a8456194-5595-4df1-b37b-1b4d88c545a6\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;admin\u0026#34;, \u0026#34;display_name\u0026#34;: \u0026#34;Application administrator\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Able to do basically everything\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2020-02-27T09:33:51.658Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2020-02-27T09:33:51.658Z\u0026#34; } ]   Responses    Status Meaning Description Schema     200 OK The roles have been successfully retrieved. Inline   400 Bad Request One or more of the query parameters is not valid. goError   500 Internal Server Error Internal Server Error. goError    Response Schema Status Code 200\n   Name Type Required Restrictions Description     anonymous [role] false none none   » id string false none Unique identifier of the role.   » name string false none The unique name of the role   » display_name string false none The beautified name of the role   » description string false none A description of the role   » created_at string(date-time) false none none   » updated_at string(date-time) false none none    This operation does not require authentication  createRole \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;http://localhost:8080/roles\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;POST\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Content-Type\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;POST\u0026#34;, \u0026#34;http://localhost:8080/roles\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   POST /roles\nCreates a new role.\n Body parameter\n 1 2 3 4 5  { \u0026#34;name\u0026#34;: \u0026#34;admin\u0026#34;, \u0026#34;display_name\u0026#34;: \u0026#34;Application administrator\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Able to do basically everything\u0026#34; }   Parameters    Name In Type Required Description     body body roleRequest true none     Example responses\n  201 Response\n 1 2 3  { \u0026#34;id\u0026#34;: \u0026#34;00d472d1-a5d6-4c2a-a9c6-bef99b697958\u0026#34; }   Responses    Status Meaning Description Schema     201 Created The role has been successfully created. createdResponse   400 Bad Request The role lacks required parameters or is malformed. goError   409 Conflict A role with the same name already exists. goError   500 Internal Server Error Internal Server Error. goError    This operation does not require authentication  retrieveRole \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;http://localhost:8080/roles/{roleId}\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;GET\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;GET\u0026#34;, \u0026#34;http://localhost:8080/roles/{roleId}\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   GET /roles/{roleId}\nRetrieves a single role\nParameters    Name In Type Required Description     roleId path string true none     Example responses\n  200 Response\n 1 2 3 4 5 6 7 8  { \u0026#34;id\u0026#34;: \u0026#34;a8456194-5595-4df1-b37b-1b4d88c545a6\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;admin\u0026#34;, \u0026#34;display_name\u0026#34;: \u0026#34;Application administrator\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Able to do basically everything\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2020-02-27T09:33:51.660Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2020-02-27T09:33:51.660Z\u0026#34; }   Responses    Status Meaning Description Schema     200 OK Role successfully retrieved role   404 Not Found Role not found goError   500 Internal Server Error Internal Server Error goError    This operation does not require authentication  updateRole \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;http://localhost:8080/roles/{roleId}\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;PUT\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Content-Type\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;PUT\u0026#34;, \u0026#34;http://localhost:8080/roles/{roleId}\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   PUT /roles/{roleId}\nUpdates a role\n Body parameter\n 1 2 3 4 5  { \u0026#34;name\u0026#34;: \u0026#34;admin\u0026#34;, \u0026#34;display_name\u0026#34;: \u0026#34;Application administrator\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Able to do basically everything\u0026#34; }   Parameters    Name In Type Required Description     roleId path string true none   body body roleRequest true none     Example responses\n  404 Response\n 1 2 3 4 5 6 7  { \u0026#34;id\u0026#34;: \u0026#34;MM0000001\u0026#34;, \u0026#34;status\u0026#34;: 400, \u0026#34;msg\u0026#34;: \u0026#34;Invalid inbound entit\u0026#34;, \u0026#34;componentMsg\u0026#34;: \u0026#34;EOF. Inbound application malformed\u0026#34;, \u0026#34;sentryCode\u0026#34;: \u0026#34;fake-req-id\u0026#34; }   Responses    Status Meaning Description Schema     204 No Content Role successfully updated None   404 Not Found Role not found goError   409 Conflict A role with the same name already exists. goError   500 Internal Server Error Internal Server Error goError    This operation does not require authentication  deleteRole \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;http://localhost:8080/roles/{roleId}\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;DELETE\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;DELETE\u0026#34;, \u0026#34;http://localhost:8080/roles/{roleId}\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   DELETE /roles/{roleId}\nDeletes a role\nParameters    Name In Type Required Description     roleId path string true none     Example responses\n  404 Response\n 1 2 3 4 5 6 7  { \u0026#34;id\u0026#34;: \u0026#34;MM0000001\u0026#34;, \u0026#34;status\u0026#34;: 400, \u0026#34;msg\u0026#34;: \u0026#34;Invalid inbound entit\u0026#34;, \u0026#34;componentMsg\u0026#34;: \u0026#34;EOF. Inbound application malformed\u0026#34;, \u0026#34;sentryCode\u0026#34;: \u0026#34;fake-req-id\u0026#34; }   Responses    Status Meaning Description Schema     204 No Content Role successfully deleted None   404 Not Found Role not found goError   500 Internal Server Error Internal Server Error goError    This operation does not require authentication  retrieveRolePermissions \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;http://localhost:8080/roles/{roleId}/permissions\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;GET\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;GET\u0026#34;, \u0026#34;http://localhost:8080/roles/{roleId}/permissions\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   GET /roles/{roleId}/permissions\nRetrieves the permissions associated to the role\nParameters    Name In Type Required Description     roleId path string true none     Example responses\n  200 Response\n 1 2 3 4 5 6 7 8 9  [ { \u0026#34;id\u0026#34;: \u0026#34;a8456194-5595-4df1-b37b-1b4d88c545a6\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;application.users.create\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Gives the ability to create new users\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2020-02-27T09:33:51.662Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2020-02-27T09:33:51.662Z\u0026#34; } ]   Responses    Status Meaning Description Schema     200 OK Permissions successfully retrieved. Inline   404 Not Found The role has not been found. goError   500 Internal Server Error Internal Server Error. goError    Response Schema Status Code 200\n   Name Type Required Restrictions Description     anonymous [permission] false none none   » id string false none Unique identifier of the permission.   » name string false none The name of the permission   » description string false none A description of the permission   » created_at string(date-time) false none none   » updated_at string(date-time) false none none    This operation does not require authentication  attachPermissionToRole \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;http://localhost:8080/roles/{roleId}/permissions\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;POST\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Content-Type\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;POST\u0026#34;, \u0026#34;http://localhost:8080/roles/{roleId}/permissions\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   POST /roles/{roleId}/permissions\nAttaches a permission to a role given their IDs\n Body parameter\n 1 2 3  { \u0026#34;id\u0026#34;: \u0026#34;00d472d1-a5d6-4c2a-a9c6-bef99b697958\u0026#34; }   Parameters    Name In Type Required Description     roleId path string true none   body body associationRequest true none     Example responses\n  404 Response\n 1 2 3 4 5 6 7  { \u0026#34;id\u0026#34;: \u0026#34;MM0000001\u0026#34;, \u0026#34;status\u0026#34;: 400, \u0026#34;msg\u0026#34;: \u0026#34;Invalid inbound entit\u0026#34;, \u0026#34;componentMsg\u0026#34;: \u0026#34;EOF. Inbound application malformed\u0026#34;, \u0026#34;sentryCode\u0026#34;: \u0026#34;fake-req-id\u0026#34; }   Responses    Status Meaning Description Schema     204 No Content The permissions have been successfully attached. None   404 Not Found Either the role or one of the permission have not been found. goError   500 Internal Server Error Internal Server Error. goError    This operation does not require authentication  detachPermissionFromRole \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;http://localhost:8080/roles/{roleId}/permissions/{permissionId}\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;DELETE\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;DELETE\u0026#34;, \u0026#34;http://localhost:8080/roles/{roleId}/permissions/{permissionId}\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   DELETE /roles/{roleId}/permissions/{permissionId}\nDetaches a permission from a role\nParameters    Name In Type Required Description     roleId path string true none   permissionId path string true none     Example responses\n  404 Response\n 1 2 3 4 5 6 7  { \u0026#34;id\u0026#34;: \u0026#34;MM0000001\u0026#34;, \u0026#34;status\u0026#34;: 400, \u0026#34;msg\u0026#34;: \u0026#34;Invalid inbound entit\u0026#34;, \u0026#34;componentMsg\u0026#34;: \u0026#34;EOF. Inbound application malformed\u0026#34;, \u0026#34;sentryCode\u0026#34;: \u0026#34;fake-req-id\u0026#34; }   Responses    Status Meaning Description Schema     204 No Content Permissions successfully detached. None   404 Not Found The role or the permission has not been found. goError   500 Internal Server Error Internal Server Error. goError    This operation does not require authentication  retrieveMultipleCategories \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;http://localhost:8080/categories\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;GET\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;GET\u0026#34;, \u0026#34;http://localhost:8080/categories\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   GET /categories\nRetrieves multiple categories.\nParameters    Name In Type Required Description     from query integer false Indicates the offset for pagination   limit query integer false Indicates the number of categories to retrieve     Example responses\n  200 Response\n 1 2 3 4 5 6 7 8 9 10  [ { \u0026#34;id\u0026#34;: \u0026#34;a8456194-5595-4df1-b37b-1b4d88c545a6\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;authn\u0026#34;, \u0026#34;display_name\u0026#34;: \u0026#34;Login authorization roles\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Contains the roles for the Login squad\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2020-02-27T09:33:51.663Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2020-02-27T09:33:51.663Z\u0026#34; } ]   Responses    Status Meaning Description Schema     200 OK The category have been successfully retrieved. Inline   400 Bad Request One or more of the query parameters is not valid. goError   500 Internal Server Error Internal Server Error. goError    Response Schema Status Code 200\n   Name Type Required Restrictions Description     anonymous [category] false none none   » id string false none Unique identifier of the category.   » name string false none The unique name of the category   » display_name string false none The beautified name of the category   » description string false none A description of the category   » created_at string(date-time) false none none   » updated_at string(date-time) false none none    This operation does not require authentication  createCategory \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;http://localhost:8080/categories\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;POST\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Content-Type\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;POST\u0026#34;, \u0026#34;http://localhost:8080/categories\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   POST /categories\nCreates a new category.\n Body parameter\n 1 2 3 4 5  { \u0026#34;name\u0026#34;: \u0026#34;authn\u0026#34;, \u0026#34;display_name\u0026#34;: \u0026#34;Login authorization roles\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Contains the roles for the Login squad\u0026#34; }   Parameters    Name In Type Required Description     body body categoryRequest true none     Example responses\n  201 Response\n 1 2 3  { \u0026#34;id\u0026#34;: \u0026#34;00d472d1-a5d6-4c2a-a9c6-bef99b697958\u0026#34; }   Responses    Status Meaning Description Schema     201 Created The categories have been successfully created. createdResponse   400 Bad Request The category lacks required parameters or is malformed. goError   409 Conflict A category with the same name already exists. goError   500 Internal Server Error Internal Server Error. goError    This operation does not require authentication  retrieveCategory \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;http://localhost:8080/categories/{categoryId}\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;GET\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;GET\u0026#34;, \u0026#34;http://localhost:8080/categories/{categoryId}\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   GET /categories/{categoryId}\nRetrieves a single category\nParameters    Name In Type Required Description     categoryId path string true none     Example responses\n  200 Response\n 1 2 3 4 5 6 7 8  { \u0026#34;id\u0026#34;: \u0026#34;a8456194-5595-4df1-b37b-1b4d88c545a6\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;authn\u0026#34;, \u0026#34;display_name\u0026#34;: \u0026#34;Login authorization roles\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Contains the roles for the Login squad\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2020-02-27T09:33:51.664Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2020-02-27T09:33:51.664Z\u0026#34; }   Responses    Status Meaning Description Schema     200 OK Category successfully retrieved category   404 Not Found Category not found goError   500 Internal Server Error Internal Server Error goError    This operation does not require authentication  updateCategory \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;http://localhost:8080/categories/{categoryId}\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;PUT\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Content-Type\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;PUT\u0026#34;, \u0026#34;http://localhost:8080/categories/{categoryId}\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   PUT /categories/{categoryId}\nUpdates a category\n Body parameter\n 1 2 3 4 5  { \u0026#34;name\u0026#34;: \u0026#34;authn\u0026#34;, \u0026#34;display_name\u0026#34;: \u0026#34;Login authorization roles\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Contains the roles for the Login squad\u0026#34; }   Parameters    Name In Type Required Description     categoryId path string true none   body body categoryRequest true none     Example responses\n  404 Response\n 1 2 3 4 5 6 7  { \u0026#34;id\u0026#34;: \u0026#34;MM0000001\u0026#34;, \u0026#34;status\u0026#34;: 400, \u0026#34;msg\u0026#34;: \u0026#34;Invalid inbound entit\u0026#34;, \u0026#34;componentMsg\u0026#34;: \u0026#34;EOF. Inbound application malformed\u0026#34;, \u0026#34;sentryCode\u0026#34;: \u0026#34;fake-req-id\u0026#34; }   Responses    Status Meaning Description Schema     204 No Content Category successfully updated None   404 Not Found Category not found goError   409 Conflict A category with the same name already exists. goError   500 Internal Server Error Internal Server Error goError    This operation does not require authentication  deleteCategory \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;http://localhost:8080/categories/{categoryId}\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;DELETE\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;DELETE\u0026#34;, \u0026#34;http://localhost:8080/categories/{categoryId}\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   DELETE /categories/{categoryId}\nDeletes a category\nParameters    Name In Type Required Description     categoryId path string true none     Example responses\n  404 Response\n 1 2 3 4 5 6 7  { \u0026#34;id\u0026#34;: \u0026#34;MM0000001\u0026#34;, \u0026#34;status\u0026#34;: 400, \u0026#34;msg\u0026#34;: \u0026#34;Invalid inbound entit\u0026#34;, \u0026#34;componentMsg\u0026#34;: \u0026#34;EOF. Inbound application malformed\u0026#34;, \u0026#34;sentryCode\u0026#34;: \u0026#34;fake-req-id\u0026#34; }   Responses    Status Meaning Description Schema     204 No Content Category successfully deleted None   404 Not Found Category not found goError   500 Internal Server Error Internal Server Error goError    This operation does not require authentication  retrieveCategoryRoles \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;http://localhost:8080/categories/{categoryId}/roles\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;GET\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;GET\u0026#34;, \u0026#34;http://localhost:8080/categories/{categoryId}/roles\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   GET /categories/{categoryId}/roles\nRetrieves the roles associated to the category\nParameters    Name In Type Required Description     categoryId path string true none     Example responses\n  200 Response\n 1 2 3 4 5 6 7 8 9 10  [ { \u0026#34;id\u0026#34;: \u0026#34;a8456194-5595-4df1-b37b-1b4d88c545a6\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;admin\u0026#34;, \u0026#34;display_name\u0026#34;: \u0026#34;Application administrator\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Able to do basically everything\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2020-02-27T09:33:51.665Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2020-02-27T09:33:51.665Z\u0026#34; } ]   Responses    Status Meaning Description Schema     200 OK Roles successfully retrieved. Inline   404 Not Found The category has not been found. goError   500 Internal Server Error Internal Server Error. goError    Response Schema Status Code 200\n   Name Type Required Restrictions Description     anonymous [role] false none none   » id string false none Unique identifier of the role.   » name string false none The unique name of the role   » display_name string false none The beautified name of the role   » description string false none A description of the role   » created_at string(date-time) false none none   » updated_at string(date-time) false none none    This operation does not require authentication  attachRoleToCategory \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;http://localhost:8080/categories/{categoryId}/roles\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;POST\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Content-Type\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;POST\u0026#34;, \u0026#34;http://localhost:8080/categories/{categoryId}/roles\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   POST /categories/{categoryId}/roles\nAttaches a role to a category given their IDs\n Body parameter\n 1 2 3  { \u0026#34;id\u0026#34;: \u0026#34;00d472d1-a5d6-4c2a-a9c6-bef99b697958\u0026#34; }   Parameters    Name In Type Required Description     categoryId path string true none   body body associationRequest true none     Example responses\n  404 Response\n 1 2 3 4 5 6 7  { \u0026#34;id\u0026#34;: \u0026#34;MM0000001\u0026#34;, \u0026#34;status\u0026#34;: 400, \u0026#34;msg\u0026#34;: \u0026#34;Invalid inbound entit\u0026#34;, \u0026#34;componentMsg\u0026#34;: \u0026#34;EOF. Inbound application malformed\u0026#34;, \u0026#34;sentryCode\u0026#34;: \u0026#34;fake-req-id\u0026#34; }   Responses    Status Meaning Description Schema     204 No Content The role has been successfully attached. None   404 Not Found Either the category or the role has not been found. goError   500 Internal Server Error Internal Server Error. goError    This operation does not require authentication  detachRoleFromCategory \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;http://localhost:8080/categories/{categoryId}/roles/{roleId}\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;DELETE\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;DELETE\u0026#34;, \u0026#34;http://localhost:8080/categories/{categoryId}/roles/{roleId}\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   DELETE /categories/{categoryId}/roles/{roleId}\nDetaches a role from a category.\nParameters    Name In Type Required Description     categoryId path string true none   roleId path string true none     Example responses\n  404 Response\n 1 2 3 4 5 6 7  { \u0026#34;id\u0026#34;: \u0026#34;MM0000001\u0026#34;, \u0026#34;status\u0026#34;: 400, \u0026#34;msg\u0026#34;: \u0026#34;Invalid inbound entit\u0026#34;, \u0026#34;componentMsg\u0026#34;: \u0026#34;EOF. Inbound application malformed\u0026#34;, \u0026#34;sentryCode\u0026#34;: \u0026#34;fake-req-id\u0026#34; }   Responses    Status Meaning Description Schema     204 No Content Role successfully detached. None   404 Not Found The category or the role has not been found. goError   500 Internal Server Error Internal Server Error. goError    This operation does not require authentication  retrieveMultipleGroups \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;http://localhost:8080/groups\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;GET\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;GET\u0026#34;, \u0026#34;http://localhost:8080/groups\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   GET /groups\nRetrieves multiple groups.\nParameters    Name In Type Required Description     from query integer false Indicates the offset for pagination   limit query integer false Indicates the number of groups to retrieve     Example responses\n  200 Response\n 1 2 3 4 5 6 7 8 9 10  [ { \u0026#34;id\u0026#34;: \u0026#34;a8456194-5595-4df1-b37b-1b4d88c545a6\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;vista360-admins\u0026#34;, \u0026#34;display_name\u0026#34;: \u0026#34;Vista360 administrators\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Administrators of Vista360 platform\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2020-02-27T09:33:51.666Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2020-02-27T09:33:51.666Z\u0026#34; } ]   Responses    Status Meaning Description Schema     200 OK The group have been successfully retrieved. Inline   400 Bad Request One or more of the query parameters is not valid. goError   500 Internal Server Error Internal Server Error. goError    Response Schema Status Code 200\n   Name Type Required Restrictions Description     anonymous [group] false none none   » id string false none Unique identifier of the group.   » name string false none The unique name of the group   » display_name string false none The beautified name of the category   » description string false none A description of the category   » created_at string(date-time) false none none   » updated_at string(date-time) false none none    This operation does not require authentication  createGroup \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;http://localhost:8080/groups\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;POST\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Content-Type\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;POST\u0026#34;, \u0026#34;http://localhost:8080/groups\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   POST /groups\nCreates a new group.\n Body parameter\n 1 2 3 4 5  { \u0026#34;name\u0026#34;: \u0026#34;vista360-admins\u0026#34;, \u0026#34;display_name\u0026#34;: \u0026#34;Vista360 administrators\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Administrators of Vista360 platform\u0026#34; }   Parameters    Name In Type Required Description     body body groupRequest true none     Example responses\n  201 Response\n 1 2 3  { \u0026#34;id\u0026#34;: \u0026#34;00d472d1-a5d6-4c2a-a9c6-bef99b697958\u0026#34; }   Responses    Status Meaning Description Schema     201 Created The group has been successfully created. createdResponse   400 Bad Request The group lacks required parameters or is malformed. goError   409 Conflict A group with the same name already exists. goError   500 Internal Server Error Internal Server Error. goError    This operation does not require authentication  retrieveGroup \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;http://localhost:8080/groups/{groupId}\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;GET\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;GET\u0026#34;, \u0026#34;http://localhost:8080/groups/{groupId}\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   GET /groups/{groupId}\nRetrieves a single group.\nParameters    Name In Type Required Description     groupId path string true none     Example responses\n  200 Response\n 1 2 3 4 5 6 7 8  { \u0026#34;id\u0026#34;: \u0026#34;a8456194-5595-4df1-b37b-1b4d88c545a6\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;vista360-admins\u0026#34;, \u0026#34;display_name\u0026#34;: \u0026#34;Vista360 administrators\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Administrators of Vista360 platform\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2020-02-27T09:33:51.667Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2020-02-27T09:33:51.667Z\u0026#34; }   Responses    Status Meaning Description Schema     200 OK Group successfully retrieved group   404 Not Found Group not found goError   500 Internal Server Error Internal Server Error goError    This operation does not require authentication  updateGroup \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;http://localhost:8080/groups/{groupId}\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;PUT\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Content-Type\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;PUT\u0026#34;, \u0026#34;http://localhost:8080/groups/{groupId}\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   PUT /groups/{groupId}\nUpdates a Group\n Body parameter\n 1 2 3 4 5  { \u0026#34;name\u0026#34;: \u0026#34;vista360-admins\u0026#34;, \u0026#34;display_name\u0026#34;: \u0026#34;Vista360 administrators\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Administrators of Vista360 platform\u0026#34; }   Parameters    Name In Type Required Description     groupId path string true none   body body groupRequest true none     Example responses\n  404 Response\n 1 2 3 4 5 6 7  { \u0026#34;id\u0026#34;: \u0026#34;MM0000001\u0026#34;, \u0026#34;status\u0026#34;: 400, \u0026#34;msg\u0026#34;: \u0026#34;Invalid inbound entit\u0026#34;, \u0026#34;componentMsg\u0026#34;: \u0026#34;EOF. Inbound application malformed\u0026#34;, \u0026#34;sentryCode\u0026#34;: \u0026#34;fake-req-id\u0026#34; }   Responses    Status Meaning Description Schema     204 No Content Group successfully updated None   404 Not Found Group not found goError   409 Conflict A group with the same name already exists. goError   500 Internal Server Error Internal Server Error goError    This operation does not require authentication  deleteGroup \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;http://localhost:8080/groups/{groupId}\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;DELETE\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;DELETE\u0026#34;, \u0026#34;http://localhost:8080/groups/{groupId}\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   DELETE /groups/{groupId}\nDeletes a group\nParameters    Name In Type Required Description     groupId path string true none     Example responses\n  404 Response\n 1 2 3 4 5 6 7  { \u0026#34;id\u0026#34;: \u0026#34;MM0000001\u0026#34;, \u0026#34;status\u0026#34;: 400, \u0026#34;msg\u0026#34;: \u0026#34;Invalid inbound entit\u0026#34;, \u0026#34;componentMsg\u0026#34;: \u0026#34;EOF. Inbound application malformed\u0026#34;, \u0026#34;sentryCode\u0026#34;: \u0026#34;fake-req-id\u0026#34; }   Responses    Status Meaning Description Schema     204 No Content Group successfully deleted None   404 Not Found Group not found goError   500 Internal Server Error Internal Server Error goError    This operation does not require authentication  retrieveGroupRoles \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;http://localhost:8080/groups/{groupId}/roles\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;GET\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;GET\u0026#34;, \u0026#34;http://localhost:8080/groups/{groupId}/roles\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   GET /groups/{groupId}/roles\nRetrieves the roles associated to the group\nParameters    Name In Type Required Description     groupId path string true none     Example responses\n  200 Response\n 1 2 3 4 5 6 7 8 9 10  [ { \u0026#34;id\u0026#34;: \u0026#34;a8456194-5595-4df1-b37b-1b4d88c545a6\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;admin\u0026#34;, \u0026#34;display_name\u0026#34;: \u0026#34;Application administrator\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Able to do basically everything\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2020-02-27T09:33:51.668Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2020-02-27T09:33:51.668Z\u0026#34; } ]   Responses    Status Meaning Description Schema     200 OK Roles successfully retrieved. Inline   404 Not Found The group has not been found. goError   500 Internal Server Error Internal Server Error. goError    Response Schema Status Code 200\n   Name Type Required Restrictions Description     anonymous [role] false none none   » id string false none Unique identifier of the role.   » name string false none The unique name of the role   » display_name string false none The beautified name of the role   » description string false none A description of the role   » created_at string(date-time) false none none   » updated_at string(date-time) false none none    This operation does not require authentication  attachRoleToGroup \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;http://localhost:8080/groups/{groupId}/roles\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;POST\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Content-Type\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;POST\u0026#34;, \u0026#34;http://localhost:8080/groups/{groupId}/roles\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   POST /groups/{groupId}/roles\nAttaches a role to a group given their IDs\n Body parameter\n 1 2 3  { \u0026#34;id\u0026#34;: \u0026#34;00d472d1-a5d6-4c2a-a9c6-bef99b697958\u0026#34; }   Parameters    Name In Type Required Description     groupId path string true none   body body associationRequest true none     Example responses\n  404 Response\n 1 2 3 4 5 6 7  { \u0026#34;id\u0026#34;: \u0026#34;MM0000001\u0026#34;, \u0026#34;status\u0026#34;: 400, \u0026#34;msg\u0026#34;: \u0026#34;Invalid inbound entit\u0026#34;, \u0026#34;componentMsg\u0026#34;: \u0026#34;EOF. Inbound application malformed\u0026#34;, \u0026#34;sentryCode\u0026#34;: \u0026#34;fake-req-id\u0026#34; }   Responses    Status Meaning Description Schema     204 No Content The role has been successfully attached. None   404 Not Found Either the group or the role has not been found. goError   500 Internal Server Error Internal Server Error. goError    This operation does not require authentication  detachRoleFromGroup \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;http://localhost:8080/groups/{groupId}/roles/{roleId}\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;DELETE\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;DELETE\u0026#34;, \u0026#34;http://localhost:8080/groups/{groupId}/roles/{roleId}\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   DELETE /groups/{groupId}/roles/{roleId}\nDetaches a role from a group.\nParameters    Name In Type Required Description     groupId path string true none   roleId path string true none     Example responses\n  404 Response\n 1 2 3 4 5 6 7  { \u0026#34;id\u0026#34;: \u0026#34;MM0000001\u0026#34;, \u0026#34;status\u0026#34;: 400, \u0026#34;msg\u0026#34;: \u0026#34;Invalid inbound entit\u0026#34;, \u0026#34;componentMsg\u0026#34;: \u0026#34;EOF. Inbound application malformed\u0026#34;, \u0026#34;sentryCode\u0026#34;: \u0026#34;fake-req-id\u0026#34; }   Responses    Status Meaning Description Schema     204 No Content Role successfully detached. None   404 Not Found The group or the role has not been found. goError   500 Internal Server Error Internal Server Error. goError    This operation does not require authentication  Health-check Operations available to regular developers\ngetHealthStatus \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;http://localhost:8080/health/alive\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;GET\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;GET\u0026#34;, \u0026#34;http://localhost:8080/health/alive\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   GET /health/alive\nCheck alive status\nThis endpoint returns a 200 status code when the HTTP server is up running.\nResponses    Status Meaning Description Schema     200 OK healthStatus None   500 Internal Server Error genericError None    This operation does not require authentication  getReadinessStatus \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;http://localhost:8080/health/ready\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;GET\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;GET\u0026#34;, \u0026#34;http://localhost:8080/health/ready\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   GET /health/ready\nCheck readiness status\nThis endpoint returns a 200 status code when the HTTP server is up running and the environment dependencies (e.g. the database) are responsive as well.\nResponses    Status Meaning Description Schema     200 OK healthStatus None   503 Service Unavailable healthNotReadyStatus None    This operation does not require authentication  Password Operations related to credentials management\npasswordResetForm \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;http://localhost:8080/password_reset\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;GET\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Accept\u0026#34;: []string{\u0026#34;text/html\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;GET\u0026#34;, \u0026#34;http://localhost:8080/password_reset\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   GET /password_reset\nShows the forgot password page form\n Example responses\n  200 Response\n Responses    Status Meaning Description Schema     200 OK Accepted string    This operation does not require authentication  passwordResetPost \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;http://localhost:8080/password_reset\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;POST\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Accept\u0026#34;: []string{\u0026#34;text/html\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;POST\u0026#34;, \u0026#34;http://localhost:8080/password_reset\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   POST /password_reset\nShows the forgot password page form\nParameters    Name In Type Required Description     client_id query string false The client that is requesting to reset a user\u0026rsquo;s passord     Example responses\n  202 Response\n  400 Response\n 1 2 3 4 5 6 7  { \u0026#34;id\u0026#34;: \u0026#34;MM0000001\u0026#34;, \u0026#34;status\u0026#34;: 400, \u0026#34;msg\u0026#34;: \u0026#34;Invalid inbound entit\u0026#34;, \u0026#34;componentMsg\u0026#34;: \u0026#34;EOF. Inbound application malformed\u0026#34;, \u0026#34;sentryCode\u0026#34;: \u0026#34;fake-req-id\u0026#34; }   Responses    Status Meaning Description Schema     202 Accepted Accepted string   400 Bad Request Request malformed goError   404 Not Found Client not found goError    This operation does not require authentication  Users Operations related to user management\nretrieveMultipleUsers \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;http://localhost:8080/users\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;GET\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;GET\u0026#34;, \u0026#34;http://localhost:8080/users\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   GET /users\nRetrieves multiple users.\nParameters    Name In Type Required Description     from query integer false Indicates the offset for pagination   limit query integer false Indicates the number of users to retrieve     Example responses\n  200 Response\n 1 2 3 4 5 6 7 8 9 10 11 12  [ { \u0026#34;login\u0026#34;: \u0026#34;john.doe@masmovil.com\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;John\u0026#34;, \u0026#34;last_name\u0026#34;: \u0026#34;Doe\u0026#34;, \u0026#34;provider_internal_id\u0026#34;: \u0026#34;5519376\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2020-02-27T09:33:51.670Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2020-02-27T09:33:51.670Z\u0026#34;, \u0026#34;last_login_at\u0026#34;: \u0026#34;2020-02-27T09:33:51.670Z\u0026#34;, \u0026#34;last_refresh_at\u0026#34;: \u0026#34;2020-02-27T09:33:51.670Z\u0026#34; } ]   Responses    Status Meaning Description Schema     200 OK The user have been successfully retrieved. Inline   400 Bad Request One or more of the query parameters is not valid. goError   500 Internal Server Error Internal Server Error. goError    Response Schema Status Code 200\n   Name Type Required Restrictions Description     anonymous [user] false none none   » login string false none An identifier (email/username/phone) used by the user to log in.   » name string false none The name of the user   » last_name string false none The last name of the user   » provider_internal_id string false none The identifier used by login providers to associate the resources of the user   » created_at string(date-time) false none none   » updated_at string(date-time) false none none   » last_login_at string(date-time) false none Time of the user\u0026rsquo;s last login.   » last_refresh_at string(date-time) false none Time of the user\u0026rsquo;s last refresh.    This operation does not require authentication  inviteUser \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;http://localhost:8080/users\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;POST\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Content-Type\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;POST\u0026#34;, \u0026#34;http://localhost:8080/users\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   POST /users\nInvites a new user.\n Body parameter\n 1 2 3 4 5 6  { \u0026#34;login\u0026#34;: \u0026#34;john.doe@masmovil.com\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;John\u0026#34;, \u0026#34;last_name\u0026#34;: \u0026#34;Doe\u0026#34;, \u0026#34;sfid\u0026#34;: \u0026#34;AEXCA1012\u0026#34; }   Parameters    Name In Type Required Description     body body userRequest true none     Example responses\n  201 Response\n 1 2 3  { \u0026#34;id\u0026#34;: \u0026#34;00d472d1-a5d6-4c2a-a9c6-bef99b697958\u0026#34; }   Responses    Status Meaning Description Schema     201 Created The user has been successfully created. createdResponse   400 Bad Request The user lacks required parameters or is malformed. goError   409 Conflict A user with the same login already exists. goError   500 Internal Server Error Internal Server Error. goError    This operation does not require authentication  retrieveUser \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;http://localhost:8080/users/{userId}\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;GET\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;GET\u0026#34;, \u0026#34;http://localhost:8080/users/{userId}\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   GET /users/{userId}\nRetrieves a single user.\nParameters    Name In Type Required Description     userId path string true none     Example responses\n  200 Response\n 1 2 3 4 5 6 7 8 9 10  { \u0026#34;login\u0026#34;: \u0026#34;john.doe@masmovil.com\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;John\u0026#34;, \u0026#34;last_name\u0026#34;: \u0026#34;Doe\u0026#34;, \u0026#34;provider_internal_id\u0026#34;: \u0026#34;5519376\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2020-02-27T09:33:51.671Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2020-02-27T09:33:51.671Z\u0026#34;, \u0026#34;last_login_at\u0026#34;: \u0026#34;2020-02-27T09:33:51.671Z\u0026#34;, \u0026#34;last_refresh_at\u0026#34;: \u0026#34;2020-02-27T09:33:51.671Z\u0026#34; }   Responses    Status Meaning Description Schema     200 OK User successfully retrieved user   404 Not Found User not found goError   500 Internal Server Error Internal Server Error goError    This operation does not require authentication  updateUser \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;http://localhost:8080/users/{userId}\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;PUT\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Content-Type\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;PUT\u0026#34;, \u0026#34;http://localhost:8080/users/{userId}\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   PUT /users/{userId}\nUpdates a user\n Body parameter\n 1 2 3 4 5 6  { \u0026#34;login\u0026#34;: \u0026#34;john.doe@masmovil.com\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;John\u0026#34;, \u0026#34;last_name\u0026#34;: \u0026#34;Doe\u0026#34;, \u0026#34;sfid\u0026#34;: \u0026#34;AEXCA1012\u0026#34; }   Parameters    Name In Type Required Description     userId path string true none   body body userRequest true none     Example responses\n  404 Response\n 1 2 3 4 5 6 7  { \u0026#34;id\u0026#34;: \u0026#34;MM0000001\u0026#34;, \u0026#34;status\u0026#34;: 400, \u0026#34;msg\u0026#34;: \u0026#34;Invalid inbound entit\u0026#34;, \u0026#34;componentMsg\u0026#34;: \u0026#34;EOF. Inbound application malformed\u0026#34;, \u0026#34;sentryCode\u0026#34;: \u0026#34;fake-req-id\u0026#34; }   Responses    Status Meaning Description Schema     204 No Content User successfully updated None   404 Not Found User not found goError   409 Conflict A user with the same login already exists. goError   500 Internal Server Error Internal Server Error goError    This operation does not require authentication  deleteUser \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;http://localhost:8080/users/{userId}\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;DELETE\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;DELETE\u0026#34;, \u0026#34;http://localhost:8080/users/{userId}\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   DELETE /users/{userId}\nDeletes a user\nParameters    Name In Type Required Description     userId path string true none     Example responses\n  404 Response\n 1 2 3 4 5 6 7  { \u0026#34;id\u0026#34;: \u0026#34;MM0000001\u0026#34;, \u0026#34;status\u0026#34;: 400, \u0026#34;msg\u0026#34;: \u0026#34;Invalid inbound entit\u0026#34;, \u0026#34;componentMsg\u0026#34;: \u0026#34;EOF. Inbound application malformed\u0026#34;, \u0026#34;sentryCode\u0026#34;: \u0026#34;fake-req-id\u0026#34; }   Responses    Status Meaning Description Schema     204 No Content User successfully deleted None   404 Not Found User not found goError   500 Internal Server Error Internal Server Error goError    This operation does not require authentication  retrieveUserRoles \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;http://localhost:8080/users/{userId}/roles\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;GET\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;GET\u0026#34;, \u0026#34;http://localhost:8080/users/{userId}/roles\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   GET /users/{userId}/roles\nRetrieves the roles associated to the user\nParameters    Name In Type Required Description     userId path string true none     Example responses\n  200 Response\n 1 2 3 4 5 6 7 8 9 10  [ { \u0026#34;id\u0026#34;: \u0026#34;a8456194-5595-4df1-b37b-1b4d88c545a6\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;admin\u0026#34;, \u0026#34;display_name\u0026#34;: \u0026#34;Application administrator\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Able to do basically everything\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2020-02-27T09:33:51.672Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2020-02-27T09:33:51.672Z\u0026#34; } ]   Responses    Status Meaning Description Schema     200 OK Roles successfully retrieved. Inline   404 Not Found The user has not been found. goError   500 Internal Server Error Internal Server Error. goError    Response Schema Status Code 200\n   Name Type Required Restrictions Description     anonymous [role] false none none   » id string false none Unique identifier of the role.   » name string false none The unique name of the role   » display_name string false none The beautified name of the role   » description string false none A description of the role   » created_at string(date-time) false none none   » updated_at string(date-time) false none none    This operation does not require authentication  attachRoleToUser \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;http://localhost:8080/users/{userId}/roles\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;POST\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Content-Type\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;POST\u0026#34;, \u0026#34;http://localhost:8080/users/{userId}/roles\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   POST /users/{userId}/roles\nAttaches a role to a user given their IDs\n Body parameter\n 1 2 3  { \u0026#34;id\u0026#34;: \u0026#34;00d472d1-a5d6-4c2a-a9c6-bef99b697958\u0026#34; }   Parameters    Name In Type Required Description     userId path string true none   body body associationRequest true none     Example responses\n  404 Response\n 1 2 3 4 5 6 7  { \u0026#34;id\u0026#34;: \u0026#34;MM0000001\u0026#34;, \u0026#34;status\u0026#34;: 400, \u0026#34;msg\u0026#34;: \u0026#34;Invalid inbound entit\u0026#34;, \u0026#34;componentMsg\u0026#34;: \u0026#34;EOF. Inbound application malformed\u0026#34;, \u0026#34;sentryCode\u0026#34;: \u0026#34;fake-req-id\u0026#34; }   Responses    Status Meaning Description Schema     204 No Content The role has been successfully attached. None   404 Not Found Either the user or the role has not been found. goError   500 Internal Server Error Internal Server Error. goError    This operation does not require authentication  detachRoleFromUser \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;http://localhost:8080/users/{userId}/roles/{roleId}\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;DELETE\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;DELETE\u0026#34;, \u0026#34;http://localhost:8080/users/{userId}/roles/{roleId}\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   DELETE /users/{userId}/roles/{roleId}\nDetaches a role from a user.\nParameters    Name In Type Required Description     userId path string true none   roleId path string true none     Example responses\n  404 Response\n 1 2 3 4 5 6 7  { \u0026#34;id\u0026#34;: \u0026#34;MM0000001\u0026#34;, \u0026#34;status\u0026#34;: 400, \u0026#34;msg\u0026#34;: \u0026#34;Invalid inbound entit\u0026#34;, \u0026#34;componentMsg\u0026#34;: \u0026#34;EOF. Inbound application malformed\u0026#34;, \u0026#34;sentryCode\u0026#34;: \u0026#34;fake-req-id\u0026#34; }   Responses    Status Meaning Description Schema     204 No Content Role successfully detached. None   404 Not Found The user or the role has not been found. goError   500 Internal Server Error Internal Server Error. goError    This operation does not require authentication  retrieveUserGroups \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;http://localhost:8080/users/{userId}/groups\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;GET\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;GET\u0026#34;, \u0026#34;http://localhost:8080/users/{userId}/groups\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   GET /users/{userId}/groups\nRetrieves the groups associated to the user\nParameters    Name In Type Required Description     userId path string true none     Example responses\n  200 Response\n 1 2 3 4 5 6 7 8 9 10  [ { \u0026#34;id\u0026#34;: \u0026#34;a8456194-5595-4df1-b37b-1b4d88c545a6\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;vista360-admins\u0026#34;, \u0026#34;display_name\u0026#34;: \u0026#34;Vista360 administrators\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Administrators of Vista360 platform\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2020-02-27T09:33:51.673Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2020-02-27T09:33:51.673Z\u0026#34; } ]   Responses    Status Meaning Description Schema     200 OK Groups successfully retrieved. Inline   404 Not Found The User has not been found. goError   500 Internal Server Error Internal Server Error. goError    Response Schema Status Code 200\n   Name Type Required Restrictions Description     anonymous [group] false none none   » id string false none Unique identifier of the group.   » name string false none The unique name of the group   » display_name string false none The beautified name of the category   » description string false none A description of the category   » created_at string(date-time) false none none   » updated_at string(date-time) false none none    This operation does not require authentication  attachGroupToUser \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;http://localhost:8080/users/{userId}/groups\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;POST\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Content-Type\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;POST\u0026#34;, \u0026#34;http://localhost:8080/users/{userId}/groups\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   POST /users/{userId}/groups\nAttaches a group to a user given their IDs\n Body parameter\n 1 2 3  { \u0026#34;id\u0026#34;: \u0026#34;00d472d1-a5d6-4c2a-a9c6-bef99b697958\u0026#34; }   Parameters    Name In Type Required Description     userId path string true none   body body associationRequest true none     Example responses\n  404 Response\n 1 2 3 4 5 6 7  { \u0026#34;id\u0026#34;: \u0026#34;MM0000001\u0026#34;, \u0026#34;status\u0026#34;: 400, \u0026#34;msg\u0026#34;: \u0026#34;Invalid inbound entit\u0026#34;, \u0026#34;componentMsg\u0026#34;: \u0026#34;EOF. Inbound application malformed\u0026#34;, \u0026#34;sentryCode\u0026#34;: \u0026#34;fake-req-id\u0026#34; }   Responses    Status Meaning Description Schema     204 No Content The group has been successfully attached. None   404 Not Found Either the user or the group has not been found. goError   500 Internal Server Error Internal Server Error. goError    This operation does not require authentication  detachGroupFromUser \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;http://localhost:8080/users/{userId}/groups/{groupId}\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;DELETE\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;DELETE\u0026#34;, \u0026#34;http://localhost:8080/users/{userId}/groups/{groupId}\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   DELETE /users/{userId}/groups/{groupId}\nDetaches a group from a user.\nParameters    Name In Type Required Description     userId path string true none   groupId path string true none     Example responses\n  404 Response\n 1 2 3 4 5 6 7  { \u0026#34;id\u0026#34;: \u0026#34;MM0000001\u0026#34;, \u0026#34;status\u0026#34;: 400, \u0026#34;msg\u0026#34;: \u0026#34;Invalid inbound entit\u0026#34;, \u0026#34;componentMsg\u0026#34;: \u0026#34;EOF. Inbound application malformed\u0026#34;, \u0026#34;sentryCode\u0026#34;: \u0026#34;fake-req-id\u0026#34; }   Responses    Status Meaning Description Schema     204 No Content Group successfully detached. None   404 Not Found The user or the group has not been found. goError   500 Internal Server Error Internal Server Error. goError    This operation does not require authentication  ServiceAccounts Operations related to service account management\nretrieveMultipleServiceAccounts \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;http://localhost:8080/serviceaccounts\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;GET\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;GET\u0026#34;, \u0026#34;http://localhost:8080/serviceaccounts\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   GET /serviceaccounts\nRetrieves multiple serviceaccounts.\nParameters    Name In Type Required Description     from query integer false Indicates the offset for pagination   limit query integer false Indicates the number of serviceaccounts to retrieve     Example responses\n  200 Response\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34  [ { \u0026#34;id\u0026#34;: \u0026#34;1ZhpSU8SweFOjqXn2hdK\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;ericson\u0026#34;, \u0026#34;enabled\u0026#34;: true, \u0026#34;email\u0026#34;: \u0026#34;user@ericson.com\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Service account to access mysim\u0026#34;, \u0026#34;client_email\u0026#34;: \u0026#34;ericson@1ZhpSU8SweFOjqXn2hdK.auth.masmovil.com\u0026#34;, \u0026#34;moi\u0026#34;: 1, \u0026#34;created_at\u0026#34;: \u0026#34;2020-02-27T09:33:51.676Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2020-02-27T09:33:51.676Z\u0026#34;, \u0026#34;last_use_at\u0026#34;: \u0026#34;2020-02-27T09:33:51.676Z\u0026#34;, \u0026#34;roles\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;a8456194-5595-4df1-b37b-1b4d88c545a6\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;admin\u0026#34;, \u0026#34;display_name\u0026#34;: \u0026#34;Application administrator\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Able to do basically everything\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2020-02-27T09:33:51.676Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2020-02-27T09:33:51.676Z\u0026#34; } ], \u0026#34;groups\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;a8456194-5595-4df1-b37b-1b4d88c545a6\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;vista360-admins\u0026#34;, \u0026#34;display_name\u0026#34;: \u0026#34;Vista360 administrators\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Administrators of Vista360 platform\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2020-02-27T09:33:51.676Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2020-02-27T09:33:51.676Z\u0026#34; } ] } ]   Responses    Status Meaning Description Schema     200 OK The service account have been successfully retrieved. Inline   400 Bad Request One or more of the query parameters is not valid. goError   500 Internal Server Error Internal Server Error. goError    Response Schema Status Code 200\n   Name Type Required Restrictions Description     anonymous [serviceAccount] false none none   » id string false none Client ID with the correct grant type   » name string false none The name of the service account   » enabled boolean false none true -\u0026gt; Enable the service account   » email string false none The email of contact   » description string false none The description of service account   » client_email string false none Client email generated to uniquely identify the service account   » moi integer false none Mobile Operator ID which service account will work   » created_at string(date-time) false none none   » updated_at string(date-time) false none none   » last_use_at string(date-time) false none Time of the last use.   » roles [role] false none none   »» id string false none Unique identifier of the role.   »» name string false none The unique name of the role   »» display_name string false none The beautified name of the role   »» description string false none A description of the role   »» created_at string(date-time) false none none   »» updated_at string(date-time) false none none   » groups [group] false none none   »» id string false none Unique identifier of the group.   »» name string false none The unique name of the group   »» display_name string false none The beautified name of the category   »» description string false none A description of the category   »» created_at string(date-time) false none none   »» updated_at string(date-time) false none none    This operation does not require authentication  createServiceAccount \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;http://localhost:8080/serviceaccounts\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;POST\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Content-Type\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;POST\u0026#34;, \u0026#34;http://localhost:8080/serviceaccounts\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   POST /serviceaccounts\nCreate a new service account.\n Body parameter\n 1 2 3 4 5 6 7 8  { \u0026#34;name\u0026#34;: \u0026#34;ericson\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;user@ericson.com\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Service account to access mysim\u0026#34;, \u0026#34;client_id\u0026#34;: \u0026#34;1ZhpSU8SweFOjqXn2hdK\u0026#34;, \u0026#34;moi\u0026#34;: 1, \u0026#34;overwrite\u0026#34;: true }   Parameters    Name In Type Required Description     body body serviceAccountRequest true none     Example responses\n  201 Response\n 1 2 3 4 5 6 7 8 9 10  { \u0026#34;private_key_id\u0026#34;: \u0026#34;e41c469d-feab-412d-89fe-573ed3498b95\u0026#34;, \u0026#34;private_key\u0026#34;: \u0026#34;-----BEGIN RSA PRIVATE KEY-----\\nMIIEpAIBAAKCAQEA2MHrzHa+vsjgUo9uNtXk8JMzciO1p8Rmat6+eAe1z0xgNziS\\nFpZmwj3oFTj9Lda+9H6LwWuWOMmVwLTOTZbKVsk/s0zf0i6gDzKUHbSBBd9F21Hi\\nqGm05dj/+w9ATKSJysnQuV0vMTfBwiBUV01VpeAcyMSJWLy/b8uPS9pbtS0618P9\\nOUkYiVYwBibYc/QugI2V1BX1IYI7n9rmsyQYe0ysIUHVC7/biB1DAhG138zQ9qJb\\nRvU8DqWhiESDcn0YZ5spAKWNm1YRTY7tcIyY5k2TB9ZdqmViW5zWjjUSxExs3ruh\\nSalQpTIu8/1mm2O1aBzZfJKrJBdqw5g94uRPfQIDAQABAoIBAQCTVBOy0M9Lm/ul\\nAip2iSHoRxVDsnPpSTwXzbiGmy7/bLlFL2VUhvvncO6LZkXn3zvBsTXKzRa5GIN6\\nDSrgX+q93GI4u7qyAND4I3e7TRIZbK3tqZW2xMqZI8qx2abpsTibJluBco3+FRjU\\nmubYxA7ABTlrWPLF5tzz3tdSRmPpG0jNtbwXuFcJ6h/Y5WOJrXreIXngBrKoO38g\\nzfrDVLpWMURVZK/vel22hBuzdfhUAj18ihJsrnLCH37ODpBmZhfQ85Evs08IuoLC\\nBaByDYybIbprTNF8ytziGrX4Swri9HqDO2ra1g9aGxHlpmByu/6kccEX6FJtfF3i\\nFuXHeeshAoGBAP9JFbnGtGlVIyyesPvVyxURyToIrjGh2/kVOb+27M16O48QWoFK\\nJl/ITYnZVOQiZpWb3mzonOGiUD6HBUHO8jdHYXEL3lld03bhk77rKit2ylP+5cn1\\ndvw0/32bbASQZBrEO/IVkluaPFQkESBdGJvGKe2fjz4JsBoANBpByZf1AoGBANld\\nOv9AR9TINN19t5fsbz565Z9F3WOoBue1YAM20Ld8JZZKFgxiImp/WS844IVW4ZIx\\nZS+zqnDYPNpsnzMsggKzF/FTr9x9OVfrlF2BLAXKUyb16PsNL5VVeOTRm55iKbl/\\n2PO2Q/GQnyHtWgwWvW850pGCz9bWZomaq1EFz4xpAoGAcevtdBAGZpMFtV3D4T5Q\\n+EANqoZBJgjzHz6nnLRHDJMljPxhRx0N7uR2JbQEvCHV4aHDKprLl61VXfHnGKz/\\nTkfeZhJD0WGbgou74REUqnzCYaV4ah3OUVJdSXJYS9kbsw4rKicSPyqfDXVi5yxk\\nVO+julTgGXE9Uv0QQz9kdRkCgYEAlxIaB/+4LOY8/9f5ewijxIwL/afEGBhXPEGu\\nCm3VoEETqqGxM0gdXWFHLe/c9C+PNVlJV18KzcUsfi7ScvGzJocs09hzOM57xWSB\\nSH+Xhiq5ojF1jM78TFEMZhRckTbugvOdaL07+a+nOiBJ3m8LmDta4zFEnK+Esoyi\\nFvzv5EkCgYBna9BA4qyBB9135oVIi+5/o42XRiuDo7WIdNX9Li6mjtFx2FiKfurn\\n1kOjPnkdHj9gZAHsj0E0kyoHE4l/RYL0Pf/HF+aj3rtnFEWZibNTDumChiYTsDdP\\nDy0S1js0FM6dxOEaYllQ6Ulm39h0keQxelXhle1Y3d0E+givAsAevg==\\n-----END RSA PRIVATE KEY-----\\n\u0026#34;, \u0026#34;client_id\u0026#34;: \u0026#34;1ZhpSU8SweFOjqXn2hdK\u0026#34;, \u0026#34;client_email\u0026#34;: \u0026#34;ericson@1ZhpSU8SweFOjqXn2hdK.auth.masmovil.com\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;service_account\u0026#34;, \u0026#34;token_uri\u0026#34;: \u0026#34;https://authn.k8s.masmovil.com/oauth/token\u0026#34;, \u0026#34;auth_uri\u0026#34;: \u0026#34;https://authn.k8s.masmovil.com/oauth/authorize\u0026#34;, \u0026#34;project_id\u0026#34;: \u0026#34;HIcsET4rXlucw7m6gE7T\u0026#34; }   Responses    Status Meaning Description Schema     201 Created The service account has been successfully created. serviceAccountResponse   400 Bad Request The service account lacks required parameters or is malformed. goError   409 Conflict A service account with the same login already exists. goError   500 Internal Server Error Internal Server Error. goError    This operation does not require authentication  retrieveServiceAccount \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;http://localhost:8080/serviceaccounts/{clientEmail}\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;GET\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;GET\u0026#34;, \u0026#34;http://localhost:8080/serviceaccounts/{clientEmail}\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   GET /serviceaccounts/{clientEmail}\nRetrieves a single service account.\nParameters    Name In Type Required Description     clientEmail path string true none     Example responses\n  200 Response\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32  { \u0026#34;id\u0026#34;: \u0026#34;1ZhpSU8SweFOjqXn2hdK\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;ericson\u0026#34;, \u0026#34;enabled\u0026#34;: true, \u0026#34;email\u0026#34;: \u0026#34;user@ericson.com\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Service account to access mysim\u0026#34;, \u0026#34;client_email\u0026#34;: \u0026#34;ericson@1ZhpSU8SweFOjqXn2hdK.auth.masmovil.com\u0026#34;, \u0026#34;moi\u0026#34;: 1, \u0026#34;created_at\u0026#34;: \u0026#34;2020-02-27T09:33:51.677Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2020-02-27T09:33:51.677Z\u0026#34;, \u0026#34;last_use_at\u0026#34;: \u0026#34;2020-02-27T09:33:51.677Z\u0026#34;, \u0026#34;roles\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;a8456194-5595-4df1-b37b-1b4d88c545a6\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;admin\u0026#34;, \u0026#34;display_name\u0026#34;: \u0026#34;Application administrator\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Able to do basically everything\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2020-02-27T09:33:51.677Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2020-02-27T09:33:51.677Z\u0026#34; } ], \u0026#34;groups\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;a8456194-5595-4df1-b37b-1b4d88c545a6\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;vista360-admins\u0026#34;, \u0026#34;display_name\u0026#34;: \u0026#34;Vista360 administrators\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Administrators of Vista360 platform\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2020-02-27T09:33:51.677Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2020-02-27T09:33:51.677Z\u0026#34; } ] }   Responses    Status Meaning Description Schema     200 OK ServiceAccount successfully retrieved serviceAccount   404 Not Found ServiceAccount not found goError   500 Internal Server Error Internal Server Error goError    This operation does not require authentication  deleteServiceAccount \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;http://localhost:8080/serviceaccounts/{clientEmail}\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;DELETE\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;DELETE\u0026#34;, \u0026#34;http://localhost:8080/serviceaccounts/{clientEmail}\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   DELETE /serviceaccounts/{clientEmail}\nDeletes a service account\nParameters    Name In Type Required Description     clientEmail path string true none     Example responses\n  404 Response\n 1 2 3 4 5 6 7  { \u0026#34;id\u0026#34;: \u0026#34;MM0000001\u0026#34;, \u0026#34;status\u0026#34;: 400, \u0026#34;msg\u0026#34;: \u0026#34;Invalid inbound entit\u0026#34;, \u0026#34;componentMsg\u0026#34;: \u0026#34;EOF. Inbound application malformed\u0026#34;, \u0026#34;sentryCode\u0026#34;: \u0026#34;fake-req-id\u0026#34; }   Responses    Status Meaning Description Schema     204 No Content ServiceAccount successfully deleted None   404 Not Found ServiceAccount not found goError   500 Internal Server Error Internal Server Error goError    This operation does not require authentication  retrieveServiceAccountRoles \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;http://localhost:8080/serviceaccounts/{clientEmail}/roles\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;GET\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;GET\u0026#34;, \u0026#34;http://localhost:8080/serviceaccounts/{clientEmail}/roles\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   GET /serviceaccounts/{clientEmail}/roles\nRetrieves the roles associated to the service account\nParameters    Name In Type Required Description     clientEmail path string true none     Example responses\n  200 Response\n 1 2 3 4 5 6 7 8 9 10  [ { \u0026#34;id\u0026#34;: \u0026#34;a8456194-5595-4df1-b37b-1b4d88c545a6\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;admin\u0026#34;, \u0026#34;display_name\u0026#34;: \u0026#34;Application administrator\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Able to do basically everything\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2020-02-27T09:33:51.678Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2020-02-27T09:33:51.678Z\u0026#34; } ]   Responses    Status Meaning Description Schema     200 OK Roles successfully retrieved. Inline   404 Not Found The service account has not been found. goError   500 Internal Server Error Internal Server Error. goError    Response Schema Status Code 200\n   Name Type Required Restrictions Description     anonymous [role] false none none   » id string false none Unique identifier of the role.   » name string false none The unique name of the role   » display_name string false none The beautified name of the role   » description string false none A description of the role   » created_at string(date-time) false none none   » updated_at string(date-time) false none none    This operation does not require authentication  attachRoleToServiceAccount \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;http://localhost:8080/serviceaccounts/{clientEmail}/roles\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;POST\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Content-Type\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;POST\u0026#34;, \u0026#34;http://localhost:8080/serviceaccounts/{clientEmail}/roles\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   POST /serviceaccounts/{clientEmail}/roles\nAttaches a role to a service account given their IDs\n Body parameter\n 1 2 3  { \u0026#34;id\u0026#34;: \u0026#34;00d472d1-a5d6-4c2a-a9c6-bef99b697958\u0026#34; }   Parameters    Name In Type Required Description     clientEmail path string true none   body body associationRequest true none     Example responses\n  404 Response\n 1 2 3 4 5 6 7  { \u0026#34;id\u0026#34;: \u0026#34;MM0000001\u0026#34;, \u0026#34;status\u0026#34;: 400, \u0026#34;msg\u0026#34;: \u0026#34;Invalid inbound entit\u0026#34;, \u0026#34;componentMsg\u0026#34;: \u0026#34;EOF. Inbound application malformed\u0026#34;, \u0026#34;sentryCode\u0026#34;: \u0026#34;fake-req-id\u0026#34; }   Responses    Status Meaning Description Schema     204 No Content The role has been successfully attached. None   404 Not Found Either the service account or the role has not been found. goError   500 Internal Server Error Internal Server Error. goError    This operation does not require authentication  detachRoleFromServiceAccount \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;http://localhost:8080/serviceaccounts/{clientEmail}/roles/{roleId}\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;DELETE\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;DELETE\u0026#34;, \u0026#34;http://localhost:8080/serviceaccounts/{clientEmail}/roles/{roleId}\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   DELETE /serviceaccounts/{clientEmail}/roles/{roleId}\nDetaches a role from a service account.\nParameters    Name In Type Required Description     clientEmail path string true none   roleId path string true none     Example responses\n  404 Response\n 1 2 3 4 5 6 7  { \u0026#34;id\u0026#34;: \u0026#34;MM0000001\u0026#34;, \u0026#34;status\u0026#34;: 400, \u0026#34;msg\u0026#34;: \u0026#34;Invalid inbound entit\u0026#34;, \u0026#34;componentMsg\u0026#34;: \u0026#34;EOF. Inbound application malformed\u0026#34;, \u0026#34;sentryCode\u0026#34;: \u0026#34;fake-req-id\u0026#34; }   Responses    Status Meaning Description Schema     204 No Content Role successfully detached. None   404 Not Found The service account or the role has not been found. goError   500 Internal Server Error Internal Server Error. goError    This operation does not require authentication  retrieveServiceAccountGroups \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;http://localhost:8080/serviceaccounts/{clientEmail}/groups\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;GET\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;GET\u0026#34;, \u0026#34;http://localhost:8080/serviceaccounts/{clientEmail}/groups\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   GET /serviceaccounts/{clientEmail}/groups\nRetrieves the groups associated to the service account\nParameters    Name In Type Required Description     clientEmail path string true none     Example responses\n  200 Response\n 1 2 3 4 5 6 7 8 9 10  [ { \u0026#34;id\u0026#34;: \u0026#34;a8456194-5595-4df1-b37b-1b4d88c545a6\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;vista360-admins\u0026#34;, \u0026#34;display_name\u0026#34;: \u0026#34;Vista360 administrators\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Administrators of Vista360 platform\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2020-02-27T09:33:51.679Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2020-02-27T09:33:51.679Z\u0026#34; } ]   Responses    Status Meaning Description Schema     200 OK Groups successfully retrieved. Inline   404 Not Found The ServiceAccount has not been found. goError   500 Internal Server Error Internal Server Error. goError    Response Schema Status Code 200\n   Name Type Required Restrictions Description     anonymous [group] false none none   » id string false none Unique identifier of the group.   » name string false none The unique name of the group   » display_name string false none The beautified name of the category   » description string false none A description of the category   » created_at string(date-time) false none none   » updated_at string(date-time) false none none    This operation does not require authentication  attachGroupToServiceAccount \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;http://localhost:8080/serviceaccounts/{clientEmail}/groups\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;POST\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Content-Type\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;POST\u0026#34;, \u0026#34;http://localhost:8080/serviceaccounts/{clientEmail}/groups\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   POST /serviceaccounts/{clientEmail}/groups\nAttaches a group to a service account given their IDs\n Body parameter\n 1 2 3  { \u0026#34;id\u0026#34;: \u0026#34;00d472d1-a5d6-4c2a-a9c6-bef99b697958\u0026#34; }   Parameters    Name In Type Required Description     clientEmail path string true none   body body associationRequest true none     Example responses\n  404 Response\n 1 2 3 4 5 6 7  { \u0026#34;id\u0026#34;: \u0026#34;MM0000001\u0026#34;, \u0026#34;status\u0026#34;: 400, \u0026#34;msg\u0026#34;: \u0026#34;Invalid inbound entit\u0026#34;, \u0026#34;componentMsg\u0026#34;: \u0026#34;EOF. Inbound application malformed\u0026#34;, \u0026#34;sentryCode\u0026#34;: \u0026#34;fake-req-id\u0026#34; }   Responses    Status Meaning Description Schema     204 No Content The group has been successfully attached. None   404 Not Found Either the service account or the group has not been found. goError   500 Internal Server Error Internal Server Error. goError    This operation does not require authentication  detachGroupFromServiceAccount \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;http://localhost:8080/serviceaccounts/{clientEmail}/groups/{groupId}\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;DELETE\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;DELETE\u0026#34;, \u0026#34;http://localhost:8080/serviceaccounts/{clientEmail}/groups/{groupId}\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   DELETE /serviceaccounts/{clientEmail}/groups/{groupId}\nDetaches a group from a service account.\nParameters    Name In Type Required Description     clientEmail path string true none   groupId path string true none     Example responses\n  404 Response\n 1 2 3 4 5 6 7  { \u0026#34;id\u0026#34;: \u0026#34;MM0000001\u0026#34;, \u0026#34;status\u0026#34;: 400, \u0026#34;msg\u0026#34;: \u0026#34;Invalid inbound entit\u0026#34;, \u0026#34;componentMsg\u0026#34;: \u0026#34;EOF. Inbound application malformed\u0026#34;, \u0026#34;sentryCode\u0026#34;: \u0026#34;fake-req-id\u0026#34; }   Responses    Status Meaning Description Schema     204 No Content Group successfully detached. None   404 Not Found The service account or the group has not been found. goError   500 Internal Server Error Internal Server Error. goError    This operation does not require authentication  Schemas inboundApplication \n1 2 3 4 5 6  { \u0026#34;name\u0026#34;: \u0026#34;Lumiere\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;lumiere@masmovil.com\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Yoigo application\u0026#34; }   Properties    Name Type Required Restrictions Description     name string true none none   email string(email) true none none   description string true none none    application \n1 2 3 4 5 6 7 8 9 10  { \u0026#34;id\u0026#34;: \u0026#34;00d472d1-a5d6-4c2a-a9c6-bef99b697958\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;Lumiere\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;lumiere@masmovil.com\u0026#34;, \u0026#34;issuer\u0026#34;: \u0026#34;https://name.masmovil.com/\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Yoigo application\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2020-02-27T09:33:51.681Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2020-02-27T09:33:51.681Z\u0026#34; }   Properties    Name Type Required Restrictions Description     id string false none Internal id   name string true none none   email string(email) true none none   issuer string false none URL using the https scheme with no query or fragment component that the OP asserts as its Issuer Identifier   description string true none none   created_at string(date-time) false none none   updated_at string(date-time) false none none    inboundClient \n1 2 3 4 5 6 7 8 9 10 11 12  { \u0026#34;redirect_url\u0026#34;: [ \u0026#34;[\\\u0026#34;https://server1/callback\\\u0026#34;,\\\u0026#34;https://server2/callback\\\u0026#34;]\u0026#34; ], \u0026#34;grant_types\u0026#34;: [ \u0026#34;[\\\u0026#34;password\\\u0026#34;]\u0026#34; ], \u0026#34;name\u0026#34;: \u0026#34;Lumiere Web\u0026#34;, \u0026#34;provider\u0026#34;: \u0026#34;YoigoProvider\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;lumiere@masmovil.com\u0026#34; }   Properties    Name Type Required Restrictions Description     redirect_url [string] true none none   grant_types [string] false none none   name string true none none   provider string true none none   email string(email) false none none    client \n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  { \u0026#34;app_id\u0026#34;: \u0026#34;ljhX6gwmAnFcP1PLlwEI\u0026#34;, \u0026#34;client_id\u0026#34;: \u0026#34;KgVxDps0ofShKg9ukPgK\u0026#34;, \u0026#34;client_secret\u0026#34;: \u0026#34;wyMrmIuhAXURn7ZG-Qec8O4qmEhWJiCRIBqedv6kJvs=\u0026#34;, \u0026#34;redirect_url\u0026#34;: [ \u0026#34;[\\\u0026#34;https://server1/callback\\\u0026#34;,\\\u0026#34;https://server2/callback\\\u0026#34;]\u0026#34; ], \u0026#34;grant_types\u0026#34;: [ \u0026#34;[\\\u0026#34;password\\\u0026#34;]\u0026#34; ], \u0026#34;access_expiration\u0026#34;: 3600, \u0026#34;refresh_expiration\u0026#34;: 86400, \u0026#34;name\u0026#34;: \u0026#34;Lumiere Web\u0026#34;, \u0026#34;provider\u0026#34;: \u0026#34;YoigoProvider\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;lumiere@masmovil.com\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2020-02-27T09:33:51.682Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2020-02-27T09:33:51.682Z\u0026#34; }   Properties    Name Type Required Restrictions Description     app_id string false none Application id   client_id string false none Client id   client_secret string false none Client secret   redirect_url [string] false none none   grant_types [string] false none none   access_expiration integer false none none   refresh_expiration integer false none none   name string true none none   provider string true none none   email string(email) false none none   created_at string(date-time) false none none   updated_at string(date-time) false none none    accessTokenResponse \n1 2 3 4 5 6 7 8  { \u0026#34;access_token\u0026#34;: \u0026#34;eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImtpZCI6Ik1VTkJaNa0ZGTWtKQlFqVkRPVFV4TlVWQ04wRTRPVEV5UWpGRFJFSTFNMFZEUXpBMU1UVTVNQSJ9.eyJpc3MiOiJodHRwczovL21hc21vdmlsLmV1LmF1dGgwLmNvbS8iLCJzdWIiOiJNN3A0YWUyeVdIN1N5bXdiVVlHcTJVdXdlVmp6WE5PR0BjbGllbnRzIiwiYXVkIjoiaHR0cHM6Ly9tYXNtb3ZpbC5ldS5hdXRoMC5jb20vYXBpL3YyLyIsImlhdCI6MTU1MDQyMDM3NywiZXhwIjoxNTUwNTA2Nzc3LCJhenAiOiJNN3A0YWUyeVdIN1N5bXdiVVlHcTJVdXdlVmp6WE5PRyIsInNjb3BlIjoicmVhZDpjbGllbnRfZ3JhbnRzIGNyZWF0ZTpjbGllbnRfZ3JhbnRzIGRlbGV0ZTpjbGllbnRfZ3JhbnRzIHVwZGF0ZTpjbGllbnRfZ3JhbnRzIHJlYWQ6dXNlcnMgdXBkYXRlOnVzZXJzIGRlbGV0ZTp1c2VycyBjcmVhdGU6dXNlcnMgcmVhZDp1c2Vyc19hcHBfbWV0YWRhdGEgdXBkYXRlOnVzZXJzX2FwcF9tZXRhZGF0YSBkZWxldGU6dXNlcnNfYXBwX21ldGFkYXRhIGNyZWF0ZTp1c2Vyc19hcHBfbWV0YWRhdGEgY3JlYXRlOnVzZXJfdGlja2V0cyByZWFkOmNsaWVudHMgdXBkYXRlOmNsaWVudHMgZGVsZXRlOmNsaWVudHMgY3JlYXRlOmNsaWVudHMgcmVhZDpjbGllbnRfa2V5cyB1cGRhdGU6Y2xpZW50X2tleXMgZGVsZXRlOmNsaWVudF9rZXlzIGNyZWF0ZTpjbGllbnRfa2V5cyByZWFkOmNvbm5lY3Rpb25zIHVwZGF0ZTpjb25uZWN0aW9ucyBkZWxldGU6Y29ubmVjdGlvbnMgY3JlYXRlOmNvbm5lY3Rpb25zIHJlYWQ6cmVzb3VyY2Vfc2VydmVycyB1cGRhdGU6cmVzb3VyY2Vfc2VydmVycyBkZWxldGU6cmVzb3VyY2Vfc2VydmVycyBjcmVhdGU6cmVzb3VyY2Vfc2VydmVycyByZWFkOmRldmljZV9jcmVkZW50aWFscyB1cGRhdGU6ZGV2aWNlX2NyZWRlbnRpYWxzIGRlbGV0ZTpkZXZpY2VfY3JlZGVudGlhbHMgY3JlYXRlOmRldmljZV9jcmVkZW50aWFscyByZWFkOnJ1bGVzIHVwZGF0ZTpydWxlcyBkZWxldGU6cnVsZXMgY3JlYXRlOnJ1bGVzIHJlYWQ6cnVsZXNfY29uZmlncyB1cGRhdGU6cnVsZXNfY29uZmlncyBkZWxldGU6cnVsZXNfY29uZmlncyByZWFkOmVtYWlsX3Byb3ZpZGVyIHVwZGF0ZTplbWFpbF9wcm92aWRlciBkZWxldGU6ZW1haWxfcHJvdmlkZXIgY3JlYXRlOmVtYWlsX3Byb3ZpZGVyIGJsYWNrbGlzdDp0b2tlbnMgcmVhZDpzdGF0cyByZWFkOnRlbmFudF9zZXR0aW5ncyB1cGRhdGU6dGVuYW50X3NldHRpbmdzIHJlYWQ6bG9ncyByZWFkOnNoaWVsZHMgY3JlYXRlOnNoaWVsZHMgZGVsZXRlOnNoaWVsZHMgdXBkYXRlOnRyaWdnZXJzIHJlYWQ6dHJpZ2dlcnMgcmVhZDpncmFudHMgZGVsZXRlOmdyYW50cyByZWFkOmd1YXJkaWFuX2ZhY3RvcnMgdXBkYXRlOmd1YXJkaWFuX2ZhY3RvcnMgcmVhZDpndWFyZGlhbl9lbnJvbGxtZW50cyBkZWxldGU6Z3VhcmRpYW5fZW5yb2xsbWVudHMgY3JlYXRlOmd1YXJkaWFuX2Vucm9sbG1lbnRfdGlja2V0cyByZWFkOnVzZXJfaWRwX3Rva2VucyBjcmVhdGU6cGFzc3dvcmRzX2NoZWNraW5nX2pvYiBkZWxldGU6cGFzc3dvcmRzX2NoZWNraW5nX2pvYiByZWFkOmN1c3RvbV9kb21haW5zIGRlbGV0ZTpjdXN0b21fZG9tYWlucyBjcmVhdGU6Y3VzdG9tX2RvbWFpbnMgcmVhZDplbWFpbF90ZW1wbGF0ZXMgY3JlYXRlOmVtYWlsX3RlbXBsYXRlcyB1cGRhdGU6ZW1haWxfdGVtcGxhdGVzIiwiZ3R5IjoiY2xpZW50LWNyZWRlbnRpYWxzIn0.h6GTIB8OMcMXDxyUzUW8tJ8LW7U_yIQfCshDuOW9E-_rd9NNRBxzsPhVHllawcB336Xfo3kwrVmS0KdkLGWz4BJo67R_4KXjQ_1VcmHD2WfzpS06fmjdV1DWZbd5dv3LBtPXEIYxWVzFSUcAlIKo5cstYlUWvb1weh56yBu26Y48UK5CIjwLmqAtlxL3kNcMI_PPuM-UmiQPeNe8cKPN4c7Tf_aVw38DcGydY53GIJ_fTeRvB5kb9CO4bs6g4iWOFZFFuLAluRFZsKcqJwNdW1RDYB_blmva5Q8JrBeU5TkbfdrWIL2QfdD93hjLFcWgE9z6txUz5opW2qkcMoQkLA\u0026#34;, \u0026#34;scope\u0026#34;: \u0026#34;read:client_grants create:client_grants delete:client_grants update:client_grants\u0026#34;, \u0026#34;expires_in\u0026#34;: 86400, \u0026#34;token_type\u0026#34;: \u0026#34;Bearer\u0026#34;, \u0026#34;refresh_token\u0026#34;: \u0026#34;eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImtpZCI6Ik1VTkJNa0ZGTWtKQlFqVkRPVFV4TlVWQ04wRTRPVEV5UWpGRFJFSTFNMFZEUXpBMU1UVTVNQSJ9\u0026#34; }   Properties    Name Type Required Restrictions Description     access_token string true none A token used by the client to make authenticated requests on behalf of the resource owner   scope string false none Scopes   expires_in integer false none none   token_type string true none none   refresh_token string false none A token used by the client to obtain a new access token without having to involve the resource owner.    errorAccessTokenResponse \n1 2 3 4 5 6  { \u0026#34;error\u0026#34;: \u0026#34;invalid_request\u0026#34;, \u0026#34;error_description\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;error_uri\u0026#34;: \u0026#34;string\u0026#34; }   Properties    Name Type Required Restrictions Description     error string true none A single error code   error_description string false none A human-readable text providing additional information, used to assist in the understanding and resolution of the error occurred   error_uri string false none none    Enumerated Values    Property Value     error invalid_request   error access_denied   error invalid_client   error invalid_grant   error unauthorized_client   error unauthorized_grant_type   error invalid_scope   error error_description   error error_uri    goError \n1 2 3 4 5 6 7 8  { \u0026#34;id\u0026#34;: \u0026#34;MM0000001\u0026#34;, \u0026#34;status\u0026#34;: 400, \u0026#34;msg\u0026#34;: \u0026#34;Invalid inbound entit\u0026#34;, \u0026#34;componentMsg\u0026#34;: \u0026#34;EOF. Inbound application malformed\u0026#34;, \u0026#34;sentryCode\u0026#34;: \u0026#34;fake-req-id\u0026#34; }   Properties    Name Type Required Restrictions Description     id string true none Unique identifier of error   status integer true none Status code of the response   msg string false none Final user message   componentMsg string false none Technical message   sentryCode string false none Unique identifier to use in sentry    jwk \n1 2 3 4 5 6 7 8 9 10 11 12 13  { \u0026#34;alg\u0026#34;: \u0026#34;RS256\u0026#34;, \u0026#34;kty\u0026#34;: \u0026#34;RSA\u0026#34;, \u0026#34;use\u0026#34;: \u0026#34;sig\u0026#34;, \u0026#34;x5c\u0026#34;: [ \u0026#34;MIIDBTCCAe2gAwIBAgIJMg1BS/K2xovDMA0GCSqGSIb3DQEBCwUAMCAxHjAcBgNVBAMTFW1hc21vdmlsLmV1LmF1dGgwLmNvbTAeFw0xODA0MjcwNzQ5MjFaFw0zMjAxMDQwNzQ5MjFaMCAxHjAcBgNVBAMTFW1hc21vdmlsLmV1LmF1dGgwLmNvbTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBALRLXzvNzYGhvXUVefnrw+2+5k/J5PkSiv3dpbQjJB/kM3uPPVa/+qiy9gvcZbSkeN+Z6D3+fTcIW+xdWuiIj8kiBGLpHCjPz5ybaTq87uvx2KfEqx+T/Q7z9...\u0026#34; ], \u0026#34;n\u0026#34;: \u0026#34;tEtfO83NgaG9dRV5-evD7b7mT8nk-RKK_d2ltCMkH-Qze489Vr_6qLL2C9xltKR435noPf59Nwhb7F1a6IiPySIEYuk...\u0026#34;, \u0026#34;e\u0026#34;: \u0026#34;AQAB\u0026#34;, \u0026#34;kid\u0026#34;: \u0026#34;MUNBMkFFMkJBQjVDOTUxNUVCN0E4OTEyQjFDREI1M0VDQzA1MTU5MA\u0026#34;, \u0026#34;x5t\u0026#34;: \u0026#34;MUNBMkFFMkJBQjVDOTUxNUVCN0E4OTEyQjFDREI1M0VDQzA1MTU5MA\u0026#34; }   Properties    Name Type Required Restrictions Description     alg string false none The \u0026ldquo;alg\u0026rdquo; (algorithm) member identifies the algorithm intended for use with the key   kty string false none The \u0026ldquo;kty\u0026rdquo; (key type) member identifies the cryptographic algorithm family used with the key, such as \u0026ldquo;RSA\u0026rdquo; or \u0026ldquo;EC\u0026rdquo;. \u0026ldquo;kty\u0026rdquo; values should either be registered in the IANA JSON Web Key Types registry defined in [JWA] or be a value that contains a Collision-Resistant Name. The \u0026ldquo;kty\u0026rdquo; value is a case-sensitive string.   use string false none The \u0026ldquo;use\u0026rdquo; (public key use) member identifies the intended use of the public key. The \u0026ldquo;use\u0026rdquo; parameter is employed to indicate whether a public key is used for encrypting data or verifying the signature on data.   x5c [string] false none The \u0026ldquo;x5c\u0026rdquo; (X.509 Certificate Chain) member contains a chain of one or more PKIX certificates [RFC5280]. The certificate chain is represented as a JSON array of certificate value strings. Each string in the array is a base64 encoded ([RFC4648] Section 4 \u0026ndash; not base64url encoded) DER [ITU.X690.1994] PKIX certificate value   n string false none none   e string false none none   kid string false none The \u0026ldquo;kid\u0026rdquo; (key ID) member is used to match a specific key. This is used, for instance, to choose among a set of keys within a JWK Set during key rollover   x5t string false none The \u0026ldquo;x5t\u0026rdquo; (X.509 Certificate SHA-1 Thumbprint) member is a base64url encoded SHA-1 thumbprint (a.k.a. digest) of the DER encoding of an X.509 certificate [RFC5280].    Enumerated Values    Property Value     use sig   use enc    jwks \n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  { \u0026#34;keys\u0026#34;: [ { \u0026#34;alg\u0026#34;: \u0026#34;RS256\u0026#34;, \u0026#34;kty\u0026#34;: \u0026#34;RSA\u0026#34;, \u0026#34;use\u0026#34;: \u0026#34;sig\u0026#34;, \u0026#34;x5c\u0026#34;: [ \u0026#34;MIIDBTCCAe2gAwIBAgIJMg1BS/K2xovDMA0GCSqGSIb3DQEBCwUAMCAxHjAcBgNVBAMTFW1hc21vdmlsLmV1LmF1dGgwLmNvbTAeFw0xODA0MjcwNzQ5MjFaFw0zMjAxMDQwNzQ5MjFaMCAxHjAcBgNVBAMTFW1hc21vdmlsLmV1LmF1dGgwLmNvbTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBALRLXzvNzYGhvXUVefnrw+2+5k/J5PkSiv3dpbQjJB/kM3uPPVa/+qiy9gvcZbSkeN+Z6D3+fTcIW+xdWuiIj8kiBGLpHCjPz5ybaTq87uvx2KfEqx+T/Q7z9...\u0026#34; ], \u0026#34;n\u0026#34;: \u0026#34;tEtfO83NgaG9dRV5-evD7b7mT8nk-RKK_d2ltCMkH-Qze489Vr_6qLL2C9xltKR435noPf59Nwhb7F1a6IiPySIEYuk...\u0026#34;, \u0026#34;e\u0026#34;: \u0026#34;AQAB\u0026#34;, \u0026#34;kid\u0026#34;: \u0026#34;MUNBMkFFMkJBQjVDOTUxNUVCN0E4OTEyQjFDREI1M0VDQzA1MTU5MA\u0026#34;, \u0026#34;x5t\u0026#34;: \u0026#34;MUNBMkFFMkJBQjVDOTUxNUVCN0E4OTEyQjFDREI1M0VDQzA1MTU5MA\u0026#34; } ] }   Properties    Name Type Required Restrictions Description     keys [jwk] true none The JSON object MUST have a \u0026ldquo;keys\u0026rdquo; member, which is an array of JWKs.    createdResponse \n1 2 3 4  { \u0026#34;id\u0026#34;: \u0026#34;00d472d1-a5d6-4c2a-a9c6-bef99b697958\u0026#34; }   Properties    Name Type Required Restrictions Description     id string false none Internal id    associationRequest \n1 2 3 4  { \u0026#34;id\u0026#34;: \u0026#34;00d472d1-a5d6-4c2a-a9c6-bef99b697958\u0026#34; }   Properties    Name Type Required Restrictions Description     id string true none Internal id    permissionRequest \n1 2 3 4 5  { \u0026#34;name\u0026#34;: \u0026#34;application.users.create\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Gives the ability to create new users\u0026#34; }   Properties    Name Type Required Restrictions Description     name string true none The name of the permission   description string false none A description of the permission    permission \n1 2 3 4 5 6 7 8  { \u0026#34;id\u0026#34;: \u0026#34;a8456194-5595-4df1-b37b-1b4d88c545a6\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;application.users.create\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Gives the ability to create new users\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2020-02-27T09:33:51.684Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2020-02-27T09:33:51.684Z\u0026#34; }   Properties    Name Type Required Restrictions Description     id string false none Unique identifier of the permission.   name string false none The name of the permission   description string false none A description of the permission   created_at string(date-time) false none none   updated_at string(date-time) false none none    roleRequest \n1 2 3 4 5 6  { \u0026#34;name\u0026#34;: \u0026#34;admin\u0026#34;, \u0026#34;display_name\u0026#34;: \u0026#34;Application administrator\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Able to do basically everything\u0026#34; }   Properties    Name Type Required Restrictions Description     name string true none The unique name of the role   display_name string true none The beautified name of the role   description string false none A description of the role    role \n1 2 3 4 5 6 7 8 9  { \u0026#34;id\u0026#34;: \u0026#34;a8456194-5595-4df1-b37b-1b4d88c545a6\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;admin\u0026#34;, \u0026#34;display_name\u0026#34;: \u0026#34;Application administrator\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Able to do basically everything\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2020-02-27T09:33:51.684Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2020-02-27T09:33:51.685Z\u0026#34; }   Properties    Name Type Required Restrictions Description     id string false none Unique identifier of the role.   name string false none The unique name of the role   display_name string false none The beautified name of the role   description string false none A description of the role   created_at string(date-time) false none none   updated_at string(date-time) false none none    categoryRequest \n1 2 3 4 5 6  { \u0026#34;name\u0026#34;: \u0026#34;authn\u0026#34;, \u0026#34;display_name\u0026#34;: \u0026#34;Login authorization roles\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Contains the roles for the Login squad\u0026#34; }   Properties    Name Type Required Restrictions Description     name string true none The unique name of the category   display_name string true none The beautified name of the category   description string false none A description of the category    category \n1 2 3 4 5 6 7 8 9  { \u0026#34;id\u0026#34;: \u0026#34;a8456194-5595-4df1-b37b-1b4d88c545a6\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;authn\u0026#34;, \u0026#34;display_name\u0026#34;: \u0026#34;Login authorization roles\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Contains the roles for the Login squad\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2020-02-27T09:33:51.685Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2020-02-27T09:33:51.685Z\u0026#34; }   Properties    Name Type Required Restrictions Description     id string false none Unique identifier of the category.   name string false none The unique name of the category   display_name string false none The beautified name of the category   description string false none A description of the category   created_at string(date-time) false none none   updated_at string(date-time) false none none    groupRequest \n1 2 3 4 5 6  { \u0026#34;name\u0026#34;: \u0026#34;vista360-admins\u0026#34;, \u0026#34;display_name\u0026#34;: \u0026#34;Vista360 administrators\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Administrators of Vista360 platform\u0026#34; }   Properties    Name Type Required Restrictions Description     name string true none The unique name of the group   display_name string true none The beautified name of the group   description string false none A description of the category    group \n1 2 3 4 5 6 7 8 9  { \u0026#34;id\u0026#34;: \u0026#34;a8456194-5595-4df1-b37b-1b4d88c545a6\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;vista360-admins\u0026#34;, \u0026#34;display_name\u0026#34;: \u0026#34;Vista360 administrators\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Administrators of Vista360 platform\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2020-02-27T09:33:51.686Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2020-02-27T09:33:51.686Z\u0026#34; }   Properties    Name Type Required Restrictions Description     id string false none Unique identifier of the group.   name string false none The unique name of the group   display_name string false none The beautified name of the category   description string false none A description of the category   created_at string(date-time) false none none   updated_at string(date-time) false none none    userRequest \n1 2 3 4 5 6 7  { \u0026#34;login\u0026#34;: \u0026#34;john.doe@masmovil.com\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;John\u0026#34;, \u0026#34;last_name\u0026#34;: \u0026#34;Doe\u0026#34;, \u0026#34;sfid\u0026#34;: \u0026#34;AEXCA1012\u0026#34; }   Properties    Name Type Required Restrictions Description     login string true none An identifier (email/username/phone) used by the user to log in.   name string true none The name of the user   last_name string true none The last name of the user   sfid string false none User\u0026rsquo;s legacy ID    user \n1 2 3 4 5 6 7 8 9 10 11  { \u0026#34;login\u0026#34;: \u0026#34;john.doe@masmovil.com\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;John\u0026#34;, \u0026#34;last_name\u0026#34;: \u0026#34;Doe\u0026#34;, \u0026#34;provider_internal_id\u0026#34;: \u0026#34;5519376\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2020-02-27T09:33:51.686Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2020-02-27T09:33:51.686Z\u0026#34;, \u0026#34;last_login_at\u0026#34;: \u0026#34;2020-02-27T09:33:51.686Z\u0026#34;, \u0026#34;last_refresh_at\u0026#34;: \u0026#34;2020-02-27T09:33:51.686Z\u0026#34; }   Properties    Name Type Required Restrictions Description     login string false none An identifier (email/username/phone) used by the user to log in.   name string false none The name of the user   last_name string false none The last name of the user   provider_internal_id string false none The identifier used by login providers to associate the resources of the user   created_at string(date-time) false none none   updated_at string(date-time) false none none   last_login_at string(date-time) false none Time of the user\u0026rsquo;s last login.   last_refresh_at string(date-time) false none Time of the user\u0026rsquo;s last refresh.    serviceAccountRequest \n1 2 3 4 5 6 7 8 9  { \u0026#34;name\u0026#34;: \u0026#34;ericson\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;user@ericson.com\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Service account to access mysim\u0026#34;, \u0026#34;client_id\u0026#34;: \u0026#34;1ZhpSU8SweFOjqXn2hdK\u0026#34;, \u0026#34;moi\u0026#34;: 1, \u0026#34;overwrite\u0026#34;: true }   Properties    Name Type Required Restrictions Description     name string true none The name of the service account   email string true none The email of contact   description string true none The description of service account   client_id string true none Client ID with the correct grant type   moi integer true none Mobile Operator ID which service account will work   overwrite boolean false none true -\u0026gt; Overwrite the service account    serviceAccountResponse \n1 2 3 4 5 6 7 8 9 10 11  { \u0026#34;private_key_id\u0026#34;: \u0026#34;e41c469d-feab-412d-89fe-573ed3498b95\u0026#34;, \u0026#34;private_key\u0026#34;: \u0026#34;-----BEGIN RSA PRIVATE KEY-----\\nMIIEpAIBAAKCAQEA2MHrzHa+vsjgUo9uNtXk8JMzciO1p8Rmat6+eAe1z0xgNziS\\nFpZmwj3oFTj9Lda+9H6LwWuWOMmVwLTOTZbKVsk/s0zf0i6gDzKUHbSBBd9F21Hi\\nqGm05dj/+w9ATKSJysnQuV0vMTfBwiBUV01VpeAcyMSJWLy/b8uPS9pbtS0618P9\\nOUkYiVYwBibYc/QugI2V1BX1IYI7n9rmsyQYe0ysIUHVC7/biB1DAhG138zQ9qJb\\nRvU8DqWhiESDcn0YZ5spAKWNm1YRTY7tcIyY5k2TB9ZdqmViW5zWjjUSxExs3ruh\\nSalQpTIu8/1mm2O1aBzZfJKrJBdqw5g94uRPfQIDAQABAoIBAQCTVBOy0M9Lm/ul\\nAip2iSHoRxVDsnPpSTwXzbiGmy7/bLlFL2VUhvvncO6LZkXn3zvBsTXKzRa5GIN6\\nDSrgX+q93GI4u7qyAND4I3e7TRIZbK3tqZW2xMqZI8qx2abpsTibJluBco3+FRjU\\nmubYxA7ABTlrWPLF5tzz3tdSRmPpG0jNtbwXuFcJ6h/Y5WOJrXreIXngBrKoO38g\\nzfrDVLpWMURVZK/vel22hBuzdfhUAj18ihJsrnLCH37ODpBmZhfQ85Evs08IuoLC\\nBaByDYybIbprTNF8ytziGrX4Swri9HqDO2ra1g9aGxHlpmByu/6kccEX6FJtfF3i\\nFuXHeeshAoGBAP9JFbnGtGlVIyyesPvVyxURyToIrjGh2/kVOb+27M16O48QWoFK\\nJl/ITYnZVOQiZpWb3mzonOGiUD6HBUHO8jdHYXEL3lld03bhk77rKit2ylP+5cn1\\ndvw0/32bbASQZBrEO/IVkluaPFQkESBdGJvGKe2fjz4JsBoANBpByZf1AoGBANld\\nOv9AR9TINN19t5fsbz565Z9F3WOoBue1YAM20Ld8JZZKFgxiImp/WS844IVW4ZIx\\nZS+zqnDYPNpsnzMsggKzF/FTr9x9OVfrlF2BLAXKUyb16PsNL5VVeOTRm55iKbl/\\n2PO2Q/GQnyHtWgwWvW850pGCz9bWZomaq1EFz4xpAoGAcevtdBAGZpMFtV3D4T5Q\\n+EANqoZBJgjzHz6nnLRHDJMljPxhRx0N7uR2JbQEvCHV4aHDKprLl61VXfHnGKz/\\nTkfeZhJD0WGbgou74REUqnzCYaV4ah3OUVJdSXJYS9kbsw4rKicSPyqfDXVi5yxk\\nVO+julTgGXE9Uv0QQz9kdRkCgYEAlxIaB/+4LOY8/9f5ewijxIwL/afEGBhXPEGu\\nCm3VoEETqqGxM0gdXWFHLe/c9C+PNVlJV18KzcUsfi7ScvGzJocs09hzOM57xWSB\\nSH+Xhiq5ojF1jM78TFEMZhRckTbugvOdaL07+a+nOiBJ3m8LmDta4zFEnK+Esoyi\\nFvzv5EkCgYBna9BA4qyBB9135oVIi+5/o42XRiuDo7WIdNX9Li6mjtFx2FiKfurn\\n1kOjPnkdHj9gZAHsj0E0kyoHE4l/RYL0Pf/HF+aj3rtnFEWZibNTDumChiYTsDdP\\nDy0S1js0FM6dxOEaYllQ6Ulm39h0keQxelXhle1Y3d0E+givAsAevg==\\n-----END RSA PRIVATE KEY-----\\n\u0026#34;, \u0026#34;client_id\u0026#34;: \u0026#34;1ZhpSU8SweFOjqXn2hdK\u0026#34;, \u0026#34;client_email\u0026#34;: \u0026#34;ericson@1ZhpSU8SweFOjqXn2hdK.auth.masmovil.com\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;service_account\u0026#34;, \u0026#34;token_uri\u0026#34;: \u0026#34;https://authn.k8s.masmovil.com/oauth/token\u0026#34;, \u0026#34;auth_uri\u0026#34;: \u0026#34;https://authn.k8s.masmovil.com/oauth/authorize\u0026#34;, \u0026#34;project_id\u0026#34;: \u0026#34;HIcsET4rXlucw7m6gE7T\u0026#34; }   Properties    Name Type Required Restrictions Description     private_key_id string false none The uniq id of private key   private_key string false none RSA private key   client_id string false none Client ID with the correct grant type   client_email string false none Client email generated to uniquely identify the service account   type string false none Type of the service account   token_uri string false none Endpoint to make oauth request   auth_uri string false none Endpoint to make oauth authorize request   project_id string false none Top Entity Id    serviceAccount \n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33  { \u0026#34;id\u0026#34;: \u0026#34;1ZhpSU8SweFOjqXn2hdK\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;ericson\u0026#34;, \u0026#34;enabled\u0026#34;: true, \u0026#34;email\u0026#34;: \u0026#34;user@ericson.com\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Service account to access mysim\u0026#34;, \u0026#34;client_email\u0026#34;: \u0026#34;ericson@1ZhpSU8SweFOjqXn2hdK.auth.masmovil.com\u0026#34;, \u0026#34;moi\u0026#34;: 1, \u0026#34;created_at\u0026#34;: \u0026#34;2020-02-27T09:33:51.687Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2020-02-27T09:33:51.687Z\u0026#34;, \u0026#34;last_use_at\u0026#34;: \u0026#34;2020-02-27T09:33:51.687Z\u0026#34;, \u0026#34;roles\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;a8456194-5595-4df1-b37b-1b4d88c545a6\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;admin\u0026#34;, \u0026#34;display_name\u0026#34;: \u0026#34;Application administrator\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Able to do basically everything\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2020-02-27T09:33:51.687Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2020-02-27T09:33:51.687Z\u0026#34; } ], \u0026#34;groups\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;a8456194-5595-4df1-b37b-1b4d88c545a6\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;vista360-admins\u0026#34;, \u0026#34;display_name\u0026#34;: \u0026#34;Vista360 administrators\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Administrators of Vista360 platform\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2020-02-27T09:33:51.687Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2020-02-27T09:33:51.687Z\u0026#34; } ] }   Properties    Name Type Required Restrictions Description     id string false none Client ID with the correct grant type   name string false none The name of the service account   enabled boolean false none true -\u0026gt; Enable the service account   email string false none The email of contact   description string false none The description of service account   client_email string false none Client email generated to uniquely identify the service account   moi integer false none Mobile Operator ID which service account will work   created_at string(date-time) false none none   updated_at string(date-time) false none none   last_use_at string(date-time) false none Time of the last use.   roles [role] false none none   groups [group] false none none    openid-configuration \n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33  { \u0026#34;token_endpoint\u0026#34;: \u0026#34;https://authn.k8s.masmovil.com/oauth/token\u0026#34;, \u0026#34;token_endpoint_auth_methods_supported\u0026#34;: [ \u0026#34;[\\\u0026#34;client_secret_post\\\u0026#34;,\\\u0026#34;client_secret_basic\\\u0026#34;]\u0026#34; ], \u0026#34;jwks_uri\u0026#34;: \u0026#34;https://authn.k8s.masmovil.com/.well-known/jwks.json\u0026#34;, \u0026#34;response_modes_supported\u0026#34;: [ \u0026#34;[\\\u0026#34;query\\\u0026#34;,\\\u0026#34;fragment\\\u0026#34;,\\\u0026#34;form_post\\\u0026#34;]\u0026#34; ], \u0026#34;subject_types_supported\u0026#34;: [ \u0026#34;[\\\u0026#34;public\\\u0026#34;]\u0026#34; ], \u0026#34;id_token_signing_alg_values_supported\u0026#34;: [ \u0026#34;[\\\u0026#34;RS256\\\u0026#34;]\u0026#34; ], \u0026#34;response_types_supported\u0026#34;: [ \u0026#34;[\\\u0026#34;code\\\u0026#34;,\\\u0026#34;token\\\u0026#34;]\u0026#34; ], \u0026#34;scopes_supported\u0026#34;: [ \u0026#34;[\\\u0026#34;openid\\\u0026#34;,\\\u0026#34;profile\\\u0026#34;,\\\u0026#34;email\\\u0026#34;,\\\u0026#34;offline_access\\\u0026#34;]\u0026#34; ], \u0026#34;issuer\u0026#34;: \u0026#34;{appName}.auth.masmovil.com\u0026#34;, \u0026#34;request_uri_parameter_supported\u0026#34;: false, \u0026#34;userinfo_endpoint\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;authorization_endpoint\u0026#34;: \u0026#34;https://authn.k8s.masmovil.com/oauth/authorize\u0026#34;, \u0026#34;http_logout_supported\u0026#34;: false, \u0026#34;frontchannel_logout_supported\u0026#34;: false, \u0026#34;end_session_endpoint\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;claims_supported\u0026#34;: [ \u0026#34;[\\\u0026#34;aud\\\u0026#34;,\\\u0026#34;cid\\\u0026#34;,\\\u0026#34;exp\\\u0026#34;,\\\u0026#34;iat\\\u0026#34;,\\\u0026#34;iss\\\u0026#34;,\\\u0026#34;moi\\\u0026#34;,\\\u0026#34;scope\\\u0026#34;,\\\u0026#34;sub\\\u0026#34;,\\\u0026#34;tid\\\u0026#34;,\\\u0026#34;user_metadata\\\u0026#34;,\\\u0026#34;app_metadata\\\u0026#34;,\\\u0026#34;given_name\\\u0026#34;,\\\u0026#34;family_name\\\u0026#34;,\\\u0026#34;name\\\u0026#34;]\u0026#34; ] }   Properties    Name Type Required Restrictions Description     token_endpoint string false none none   token_endpoint_auth_methods_supported [string] false none none   jwks_uri string false none none   response_modes_supported [string] false none none   subject_types_supported [string] false none none   id_token_signing_alg_values_supported [string] false none none   response_types_supported [string] false none none   scopes_supported [string] false none none   issuer string false none none   request_uri_parameter_supported boolean false none none   userinfo_endpoint string false none none   authorization_endpoint string false none none   http_logout_supported boolean false none none   frontchannel_logout_supported boolean false none none   end_session_endpoint string false none none   claims_supported [string] false none none    body \n1 2 3 4 5 6 7 8 9 10 11 12  { \u0026#34;grant_type\u0026#34;: \u0026#34;password\u0026#34;, \u0026#34;audience\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;scope\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;username\u0026#34;: \u0026#34;usuario@gmail.com\u0026#34;, \u0026#34;password\u0026#34;: \u0026#34;123456\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;OyMh_ObySiyWi7SrXgfIdg\u0026#34;, \u0026#34;code\u0026#34;: \u0026#34;OyMh_ObySiyWi7SrXgfIdg\u0026#34;, \u0026#34;code_verifier\u0026#34;: \u0026#34;5VTycQU924SQ3jHp5g9zcvMF2ai3aN89kxzB2D5QJUrejxam3jddqFUugD8F\u0026#34;, \u0026#34;assertion\u0026#34;: \u0026#34;string\u0026#34; }   Properties    Name Type Required Restrictions Description     grant_type string true none Grant type of token   audience string false none Audience of the request   scope string false none Scope of permissions   username string false none Username of final customers (required for grant_type=password)   password string false none Password of final customers (required for grant_type=password)   state string false none CSRF token used in the authorization request (for authorization_code and implicit flows)   code string false none Authorization code (required for authorization_code flow)   code_verifier string false none Code challenge value generated by the client in the authorization request (required for authorization_code flow)   assertion string false none Assertion with which to get an access_token    Enumerated Values    Property Value     grant_type authorization_code   grant_type password   grant_type refresh_token    ","description":"","id":22,"section":"docs","tags":null,"title":"Authn API","uri":"/es/docs/apis/openapi2/"},{"content":"CROSS - RECIBOS v1.1.0  Scroll down for code samples, example requests and responses. Select a language for code samples from the tabs above or the mobile navigation menu.\n API que recoge todas las funcionalidades relativas a los recibos gestionados por la Mutua Madrileña en sus distintos ramos.\nBase URLs:\n https://$(catalog.host)/cross-recibos/api/v1  Email: Javier Moreno Lozano\nAuthentication  API Key (clientIdHeader)  Parameter Name: X-IBM-Client-Id, in: header. student    Recibos Agrupa la funcionalidad relacionada a la operativa de recibos asociados a pólizas\nrecuperarDetalleRecibo \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;https://$(catalog.host)/cross-recibos/api/v1/recibos/{id-recibo}\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;GET\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, \u0026#34;X-IBM-Client-Id\u0026#34;: []string{\u0026#34;API_KEY\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;GET\u0026#34;, \u0026#34;https://$(catalog.host)/cross-recibos/api/v1/recibos/{id-recibo}\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  var headers = { \u0026#39;Accept\u0026#39;:\u0026#39;application/json\u0026#39;, \u0026#39;X-IBM-Client-Id\u0026#39;:\u0026#39;API_KEY\u0026#39; }; $.ajax({ url: \u0026#39;https://$(catalog.host)/cross-recibos/api/v1/recibos/{id-recibo}\u0026#39;, method: \u0026#39;get\u0026#39;, headers: headers, success: function(data) { console.log(JSON.stringify(data)); } })   1 2 3 4  GET https://$(catalog.host)/cross-recibos/api/v1/recibos/{id-recibo} HTTP/1.1 Accept: application/json   GET /recibos/{id-recibo}\nConsulta del detalle de un recibo\nOperación que permite realizar la consulta del detalle de un recibo\nParameters    Name In Type Required Description     id-recibo path string true Identificador del recibo     Example responses\n  200 Response\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60  { \u0026#34;datosBasicosRecibo\u0026#34;: { \u0026#34;id\u0026#34;: \u0026#34;054\u0026#34;, \u0026#34;fechaEfecto\u0026#34;: \u0026#34;2019-03-30\u0026#34;, \u0026#34;fraccion\u0026#34;: \u0026#34;1/3\u0026#34;, \u0026#34;detalleImporte\u0026#34;: { \u0026#34;importeTotalRecibo\u0026#34;: 99.62, \u0026#34;primaNeta\u0026#34;: 83.61, \u0026#34;descuento\u0026#34;: 0, \u0026#34;consorcio\u0026#34;: 8.32, \u0026#34;ips\u0026#34;: 5.2, \u0026#34;lea\u0026#34;: 0.38, \u0026#34;arbitrio\u0026#34;: 2.11, \u0026#34;gastosFraccionamiento\u0026#34;: 1.06 }, \u0026#34;situacionReciboAFecha\u0026#34;: \u0026#34;Pagado\u0026#34; }, \u0026#34;numeroPoliza\u0026#34;: \u0026#34;25\u0026#34;, \u0026#34;movimientoPoliza\u0026#34;: \u0026#34;ACTIVA\u0026#34;, \u0026#34;empresa\u0026#34;: \u0026#34;Mutua\u0026#34;, \u0026#34;ramo\u0026#34;: \u0026#34;AUTOS\u0026#34;, \u0026#34;anualidad\u0026#34;: \u0026#34;2018\u0026#34;, \u0026#34;fechaEmision\u0026#34;: \u0026#34;21-06-2018\u0026#34;, \u0026#34;fechaVencimiento\u0026#34;: \u0026#34;31-07-2018\u0026#34;, \u0026#34;tipoRecibo\u0026#34;: \u0026#34;Vencimiento\u0026#34;, \u0026#34;estadoRecibo\u0026#34;: \u0026#34;Emitido\u0026#34;, \u0026#34;estadoCobroRecibo\u0026#34;: \u0026#34;Pendiente poner al cobro\u0026#34;, \u0026#34;nifRecibo\u0026#34;: \u0026#34;53450262X\u0026#34;, \u0026#34;cuentaBancaria\u0026#34;: { \u0026#34;idCuentaBancaria\u0026#34;: \u0026#34;01\u0026#34;, \u0026#34;tipoCuenta\u0026#34;: \u0026#34;Ahorro\u0026#34;, \u0026#34;iban\u0026#34;: \u0026#34;ES82 7139 7713 11 8283827121\u0026#34;, \u0026#34;nombreBanco\u0026#34;: \u0026#34;BBVA\u0026#34;, \u0026#34;direccionBanco\u0026#34;: \u0026#34;Avda. Ripolles, 55\u0026#34; }, \u0026#34;domicilioRecibo\u0026#34;: \u0026#34;Avda. Albufera, 62\u0026#34;, \u0026#34;movimientoRecibo\u0026#34;: { \u0026#34;idMovimiento\u0026#34;: \u0026#34;15\u0026#34;, \u0026#34;fechaMovimiento\u0026#34;: \u0026#34;2019-06-10\u0026#34;, \u0026#34;descripcionMovimiento\u0026#34;: \u0026#34;RECIBO EMITIDO\u0026#34;, \u0026#34;fechaSituacionRecibo\u0026#34;: \u0026#34;2019-04-30\u0026#34; }, \u0026#34;motivoDevolucionAnulacion\u0026#34;: \u0026#34;ANULADO POR IMPAGO\u0026#34;, \u0026#34;datosCobro\u0026#34;: { \u0026#34;datosBasicosCobro\u0026#34;: { \u0026#34;datosCuentaBancaria\u0026#34;: { \u0026#34;idCuentaBancaria\u0026#34;: \u0026#34;01\u0026#34;, \u0026#34;tipoCuenta\u0026#34;: \u0026#34;Ahorro\u0026#34;, \u0026#34;iban\u0026#34;: \u0026#34;ES82 7139 7713 11 8283827121\u0026#34;, \u0026#34;nombreBanco\u0026#34;: \u0026#34;BBVA\u0026#34;, \u0026#34;direccionBanco\u0026#34;: \u0026#34;Avda. Ripolles, 55\u0026#34; }, \u0026#34;formaPago\u0026#34;: \u0026#34;BANCO\u0026#34; }, \u0026#34;frecuenciaPago\u0026#34;: { \u0026#34;id\u0026#34;: \u0026#34;ANUAL\u0026#34;, \u0026#34;nombre\u0026#34;: \u0026#34;Frecuencia de pago anual\u0026#34; } } }   Responses    Status Meaning Description Schema     200 OK 200 OK - Recupera el detalle del recibo de una poliza Recibo   400 Bad Request 400 Bad Request Mensajes   404 Not Found 404 Not Found Mensajes   500 Internal Server Error 500 Internal Error Mensajes    To perform this operation, you must be authenticated by means of one of the following methods: clientIdHeader  recuperarRecibosPoliza \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;https://$(catalog.host)/cross-recibos/api/v1/polizas/{id-poliza}/recibos?desdeFecha=2020-02-26\u0026amp;hastaFecha=2020-02-26\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;GET\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, \u0026#34;X-IBM-Client-Id\u0026#34;: []string{\u0026#34;API_KEY\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;GET\u0026#34;, \u0026#34;https://$(catalog.host)/cross-recibos/api/v1/polizas/{id-poliza}/recibos\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  var headers = { \u0026#39;Accept\u0026#39;:\u0026#39;application/json\u0026#39;, \u0026#39;X-IBM-Client-Id\u0026#39;:\u0026#39;API_KEY\u0026#39; }; $.ajax({ url: \u0026#39;https://$(catalog.host)/cross-recibos/api/v1/polizas/{id-poliza}/recibos\u0026#39;, method: \u0026#39;get\u0026#39;, data: \u0026#39;?desdeFecha=2020-02-26\u0026amp;hastaFecha=2020-02-26\u0026#39;, headers: headers, success: function(data) { console.log(JSON.stringify(data)); } })   1 2 3 4  GET https://$(catalog.host)/cross-recibos/api/v1/polizas/{id-poliza}/recibos?desdeFecha=2020-02-26\u0026amp;hastaFecha=2020-02-26 HTTP/1.1 Accept: application/json   GET /polizas/{id-poliza}/recibos\nConsulta de la lista de recibos de una póliza\nOperación que permite realizar la consulta de la lista de recibos de una póliza\nParameters    Name In Type Required Description     id-poliza path string true Identificador de la póliza   estadoRecibo query string false Estado del recibo a consultar   desdeFecha query string(date) true Fecha a partir de la cual se consulta   hastaFecha query string(date) true Fecha hasta la cual se consulta     Example responses\n  200 Response\n 1 2 3 4 5 6 7  [ { \u0026#34;id\u0026#34;: \u0026#34;25\u0026#34;, \u0026#34;descripcion\u0026#34;: \u0026#34;Recurso\u0026#34;, \u0026#34;url\u0026#34;: \u0026#34;/recursos/{id-recurso}\u0026#34; } ]   Responses    Status Meaning Description Schema     200 OK 200 OK - Recupera los recibos vinculados a esa poliza según el estado y fechas de consulta indicadas Inline   400 Bad Request 400 Bad Request Mensajes   404 Not Found 404 Not Found Mensajes   500 Internal Server Error 500 Internal Error Mensajes    Response Schema Status Code 200\n   Name Type Required Restrictions Description     anonymous [Item] false none [Agrupa los datos relativos a una entidad.]   » id string false none Identificador de la entidad   » descripcion string false none Descripción de la entidad   » url string false none URL para acceder al detalle de la entidad    To perform this operation, you must be authenticated by means of one of the following methods: clientIdHeader  recuperarMovimientosRecibo \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;https://$(catalog.host)/cross-recibos/api/v1/recibos/{id-recibo}/movimientos\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;GET\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, \u0026#34;X-IBM-Client-Id\u0026#34;: []string{\u0026#34;API_KEY\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;GET\u0026#34;, \u0026#34;https://$(catalog.host)/cross-recibos/api/v1/recibos/{id-recibo}/movimientos\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  var headers = { \u0026#39;Accept\u0026#39;:\u0026#39;application/json\u0026#39;, \u0026#39;X-IBM-Client-Id\u0026#39;:\u0026#39;API_KEY\u0026#39; }; $.ajax({ url: \u0026#39;https://$(catalog.host)/cross-recibos/api/v1/recibos/{id-recibo}/movimientos\u0026#39;, method: \u0026#39;get\u0026#39;, headers: headers, success: function(data) { console.log(JSON.stringify(data)); } })   1 2 3 4  GET https://$(catalog.host)/cross-recibos/api/v1/recibos/{id-recibo}/movimientos HTTP/1.1 Accept: application/json   GET /recibos/{id-recibo}/movimientos\nConsulta del historico de movimientos de un recibo\nOperación que permite realizar la consulta del historico de movimientos de un recibo\nParameters    Name In Type Required Description     id-recibo path string true Identificador del recibo     Example responses\n  200 Response\n 1 2 3 4 5 6 7 8  [ { \u0026#34;idMovimiento\u0026#34;: \u0026#34;15\u0026#34;, \u0026#34;fechaMovimiento\u0026#34;: \u0026#34;2019-06-10\u0026#34;, \u0026#34;descripcionMovimiento\u0026#34;: \u0026#34;RECIBO EMITIDO\u0026#34;, \u0026#34;fechaSituacionRecibo\u0026#34;: \u0026#34;2019-04-30\u0026#34; } ]   Responses    Status Meaning Description Schema     200 OK 200 OK - Recupera los movimientos historicos de un recibo Inline   400 Bad Request 400 Bad Request Mensajes   404 Not Found 404 Not Found Mensajes   500 Internal Server Error 500 Internal Error Mensajes    Response Schema Status Code 200\n   Name Type Required Restrictions Description     anonymous [MovimientoRecibo] false none [Agrupa los datos relativos al movimiento de un recibo]   » idMovimiento string false none Identificador del movimiento del recibo   » fechaMovimiento string(date) false none Fecha del movimiento   » descripcionMovimiento string false none Descripcion del movimiento: recibo emitido, enviado por el banco\u0026hellip;   » fechaSituacionRecibo string(date) false none Fecha de efecto del cambio de situacion    To perform this operation, you must be authenticated by means of one of the following methods: clientIdHeader  recuperarMovimientoRecibo \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;https://$(catalog.host)/cross-recibos/api/v1/recibos/{id-recibo}/movimientos/{id-movimiento}\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;GET\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, \u0026#34;X-IBM-Client-Id\u0026#34;: []string{\u0026#34;API_KEY\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;GET\u0026#34;, \u0026#34;https://$(catalog.host)/cross-recibos/api/v1/recibos/{id-recibo}/movimientos/{id-movimiento}\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  var headers = { \u0026#39;Accept\u0026#39;:\u0026#39;application/json\u0026#39;, \u0026#39;X-IBM-Client-Id\u0026#39;:\u0026#39;API_KEY\u0026#39; }; $.ajax({ url: \u0026#39;https://$(catalog.host)/cross-recibos/api/v1/recibos/{id-recibo}/movimientos/{id-movimiento}\u0026#39;, method: \u0026#39;get\u0026#39;, headers: headers, success: function(data) { console.log(JSON.stringify(data)); } })   1 2 3 4  GET https://$(catalog.host)/cross-recibos/api/v1/recibos/{id-recibo}/movimientos/{id-movimiento} HTTP/1.1 Accept: application/json   GET /recibos/{id-recibo}/movimientos/{id-movimiento}\nConsulta del detalle de un movimiento de un recibo\nOperación que permite realizar la consulta del detalle del movimiento de un recibo\nParameters    Name In Type Required Description     id-recibo path string true Identificador del recibo   id-movimiento path string true Identificador del movimiento de un recibo     Example responses\n  200 Response\n 1 2 3 4 5 6  { \u0026#34;idMovimiento\u0026#34;: \u0026#34;15\u0026#34;, \u0026#34;fechaMovimiento\u0026#34;: \u0026#34;2019-06-10\u0026#34;, \u0026#34;descripcionMovimiento\u0026#34;: \u0026#34;RECIBO EMITIDO\u0026#34;, \u0026#34;fechaSituacionRecibo\u0026#34;: \u0026#34;2019-04-30\u0026#34; }   Responses    Status Meaning Description Schema     200 OK 200 OK - Recupera el detalle del movimiento de un recibo MovimientoRecibo   400 Bad Request 400 Bad Request Mensajes   404 Not Found 404 Not Found Mensajes   500 Internal Server Error 500 Internal Error Mensajes    To perform this operation, you must be authenticated by means of one of the following methods: clientIdHeader  recuperarRecibosPorNIF \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;https://$(catalog.host)/cross-recibos/api/v1/recibos-by-nif?fechaConsulta=2020-02-26\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;GET\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, \u0026#34;X-IBM-Client-Id\u0026#34;: []string{\u0026#34;API_KEY\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;GET\u0026#34;, \u0026#34;https://$(catalog.host)/cross-recibos/api/v1/recibos-by-nif\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  var headers = { \u0026#39;Accept\u0026#39;:\u0026#39;application/json\u0026#39;, \u0026#39;X-IBM-Client-Id\u0026#39;:\u0026#39;API_KEY\u0026#39; }; $.ajax({ url: \u0026#39;https://$(catalog.host)/cross-recibos/api/v1/recibos-by-nif\u0026#39;, method: \u0026#39;get\u0026#39;, data: \u0026#39;?fechaConsulta=2020-02-26\u0026#39;, headers: headers, success: function(data) { console.log(JSON.stringify(data)); } })   1 2 3 4  GET https://$(catalog.host)/cross-recibos/api/v1/recibos-by-nif?fechaConsulta=2020-02-26 HTTP/1.1 Accept: application/json   GET /recibos-by-nif\nConsulta de los recibos según NIF del cliente\nOperación que permite la consulta de los recibos según NIF del cliente\nParameters    Name In Type Required Description     nif query string false Identificador del documento de identidad de las personas   fechaConsulta query string(date) true Fecha de consulta     Example responses\n  200 Response\n 1 2 3 4 5 6 7  [ { \u0026#34;id\u0026#34;: \u0026#34;25\u0026#34;, \u0026#34;descripcion\u0026#34;: \u0026#34;Recurso\u0026#34;, \u0026#34;url\u0026#34;: \u0026#34;/recursos/{id-recurso}\u0026#34; } ]   Responses    Status Meaning Description Schema     200 OK 200 OK - Recupera los recibos del NIF del cliente Inline   400 Bad Request 400 Bad Request Mensajes   404 Not Found 404 Not Found Mensajes   500 Internal Server Error 500 Internal Error Mensajes    Response Schema Status Code 200\n   Name Type Required Restrictions Description     anonymous [Item] false none [Agrupa los datos relativos a una entidad.]   » id string false none Identificador de la entidad   » descripcion string false none Descripción de la entidad   » url string false none URL para acceder al detalle de la entidad    To perform this operation, you must be authenticated by means of one of the following methods: clientIdHeader  Documentación Agrupa la funcionalidad relacionada a la operativa de la documentación de los recibos asociados a pólizas\nrecuperarDocumentoRecibo \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;https://$(catalog.host)/cross-recibos/api/v1/recibos/{id-recibo}/pdf\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;GET\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, \u0026#34;X-IBM-Client-Id\u0026#34;: []string{\u0026#34;API_KEY\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;GET\u0026#34;, \u0026#34;https://$(catalog.host)/cross-recibos/api/v1/recibos/{id-recibo}/pdf\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  var headers = { \u0026#39;Accept\u0026#39;:\u0026#39;application/json\u0026#39;, \u0026#39;X-IBM-Client-Id\u0026#39;:\u0026#39;API_KEY\u0026#39; }; $.ajax({ url: \u0026#39;https://$(catalog.host)/cross-recibos/api/v1/recibos/{id-recibo}/pdf\u0026#39;, method: \u0026#39;get\u0026#39;, headers: headers, success: function(data) { console.log(JSON.stringify(data)); } })   1 2 3 4  GET https://$(catalog.host)/cross-recibos/api/v1/recibos/{id-recibo}/pdf HTTP/1.1 Accept: application/json   GET /recibos/{id-recibo}/pdf\nObtiene un documento con los datos del recibo en formato PDF\nOperación que permite obtener un documento con los datos del recibo\nParameters    Name In Type Required Description     id-recibo path string true Identificador del recibo     Example responses\n  200 Response\n 1 2 3 4  { \u0026#34;id\u0026#34;: \u0026#34;25\u0026#34;, \u0026#34;urlDescarga\u0026#34;: \u0026#34;https://aplicaciones.mutua.es/documentos/25\u0026#34; }   Responses    Status Meaning Description Schema     200 OK 200 OK - Recupera el documento del recibo de una poliza Documento   400 Bad Request 400 Bad Request Mensajes   404 Not Found 404 Not Found Mensajes   500 Internal Server Error 500 Internal Error Mensajes    To perform this operation, you must be authenticated by means of one of the following methods: clientIdHeader  solicitarReciboCarta \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;https://$(catalog.host)/cross-recibos/api/v1/recibos/{id-recibo}/carta\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;POST\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, \u0026#34;X-IBM-Client-Id\u0026#34;: []string{\u0026#34;API_KEY\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;POST\u0026#34;, \u0026#34;https://$(catalog.host)/cross-recibos/api/v1/recibos/{id-recibo}/carta\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  var headers = { \u0026#39;Accept\u0026#39;:\u0026#39;application/json\u0026#39;, \u0026#39;X-IBM-Client-Id\u0026#39;:\u0026#39;API_KEY\u0026#39; }; $.ajax({ url: \u0026#39;https://$(catalog.host)/cross-recibos/api/v1/recibos/{id-recibo}/carta\u0026#39;, method: \u0026#39;post\u0026#39;, headers: headers, success: function(data) { console.log(JSON.stringify(data)); } })   1 2 3 4  POST https://$(catalog.host)/cross-recibos/api/v1/recibos/{id-recibo}/carta HTTP/1.1 Accept: application/json   POST /recibos/{id-recibo}/carta\nEnvía una solicitud de recepción del recibo en forma de carta\nOperación que permite enviar una solicitud de recepción del recibo en forma de carta\nParameters    Name In Type Required Description     id-recibo path string true Identificador del recibo   direccionEnvio query string false Dirección a la cual se va a enviar el recibo en formato de carta     Example responses\n  201 Response\n 1 2 3 4 5 6 7 8 9 10  { \u0026#34;mensaje\u0026#34;: [ { \u0026#34;campo\u0026#34;: \u0026#34;id-poliza\u0026#34;, \u0026#34;codigo\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;descripcion\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;ampliacionInformacion\u0026#34;: \u0026#34;\u0026#34; } ] }   Responses    Status Meaning Description Schema     201 Created 201 OK - Envía la solicitud del recibo por carta Mensajes   400 Bad Request 400 Bad Request Mensajes   404 Not Found 404 Not Found Mensajes   500 Internal Server Error 500 Internal Error Mensajes    To perform this operation, you must be authenticated by means of one of the following methods: clientIdHeader  solicitarReciboEmail \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;https://$(catalog.host)/cross-recibos/api/v1/recibos/{id-recibo}/email\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;POST\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, \u0026#34;X-IBM-Client-Id\u0026#34;: []string{\u0026#34;API_KEY\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;POST\u0026#34;, \u0026#34;https://$(catalog.host)/cross-recibos/api/v1/recibos/{id-recibo}/email\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  var headers = { \u0026#39;Accept\u0026#39;:\u0026#39;application/json\u0026#39;, \u0026#39;X-IBM-Client-Id\u0026#39;:\u0026#39;API_KEY\u0026#39; }; $.ajax({ url: \u0026#39;https://$(catalog.host)/cross-recibos/api/v1/recibos/{id-recibo}/email\u0026#39;, method: \u0026#39;post\u0026#39;, headers: headers, success: function(data) { console.log(JSON.stringify(data)); } })   1 2 3 4  POST https://$(catalog.host)/cross-recibos/api/v1/recibos/{id-recibo}/email HTTP/1.1 Accept: application/json   POST /recibos/{id-recibo}/email\nEnvía una solicitud de recepción del recibo en forma de email\nOperación que permite enviar una solicitud de recepción del recibo en forma de email\nParameters    Name In Type Required Description     id-recibo path string true Identificador del recibo   direccionEmail query string false Dirección de email a la que se va a enviar el recibo     Example responses\n  201 Response\n 1 2 3 4 5 6 7 8 9 10  { \u0026#34;mensaje\u0026#34;: [ { \u0026#34;campo\u0026#34;: \u0026#34;id-poliza\u0026#34;, \u0026#34;codigo\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;descripcion\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;ampliacionInformacion\u0026#34;: \u0026#34;\u0026#34; } ] }   Responses    Status Meaning Description Schema     201 Created 201 OK - Envía la solicitud del recibo por email Mensajes   400 Bad Request 400 Bad Request Mensajes   404 Not Found 404 Not Found Mensajes   500 Internal Server Error 500 Internal Error Mensajes    To perform this operation, you must be authenticated by means of one of the following methods: clientIdHeader  solicitarReciboSms \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;https://$(catalog.host)/cross-recibos/api/v1/recibos/{id-recibo}/sms\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;POST\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, \u0026#34;X-IBM-Client-Id\u0026#34;: []string{\u0026#34;API_KEY\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;POST\u0026#34;, \u0026#34;https://$(catalog.host)/cross-recibos/api/v1/recibos/{id-recibo}/sms\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  var headers = { \u0026#39;Accept\u0026#39;:\u0026#39;application/json\u0026#39;, \u0026#39;X-IBM-Client-Id\u0026#39;:\u0026#39;API_KEY\u0026#39; }; $.ajax({ url: \u0026#39;https://$(catalog.host)/cross-recibos/api/v1/recibos/{id-recibo}/sms\u0026#39;, method: \u0026#39;post\u0026#39;, headers: headers, success: function(data) { console.log(JSON.stringify(data)); } })   1 2 3 4  POST https://$(catalog.host)/cross-recibos/api/v1/recibos/{id-recibo}/sms HTTP/1.1 Accept: application/json   POST /recibos/{id-recibo}/sms\nEnvia una solicitud de recepción del recibo en forma de SMS\nOperación que permite enviar una solicitud de recepción del recibo en forma de SMS\nParameters    Name In Type Required Description     id-recibo path string true Identificador del recibo   telefono query string false Número de teléfono al cual se va a enviar el recibo en formato SMS     Example responses\n  201 Response\n 1 2 3 4 5 6 7 8 9 10  { \u0026#34;mensaje\u0026#34;: [ { \u0026#34;campo\u0026#34;: \u0026#34;id-poliza\u0026#34;, \u0026#34;codigo\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;descripcion\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;ampliacionInformacion\u0026#34;: \u0026#34;\u0026#34; } ] }   Responses    Status Meaning Description Schema     201 Created 201 OK - Envía la solicitud del recibo por sms Mensajes   400 Bad Request 400 Bad Request Mensajes   404 Not Found 404 Not Found Mensajes   500 Internal Server Error 500 Internal Error Mensajes    To perform this operation, you must be authenticated by means of one of the following methods: clientIdHeader  Pagos Agrupa la funcionalidad relacionada a la operativa de los pagos asociados a pólizas\ncrearSolicitudReenvioBancoRecibo \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;https://$(catalog.host)/cross-recibos/api/v1/recibos/{id-recibo}/reenvios-bancos\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;POST\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, \u0026#34;X-IBM-Client-Id\u0026#34;: []string{\u0026#34;API_KEY\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;POST\u0026#34;, \u0026#34;https://$(catalog.host)/cross-recibos/api/v1/recibos/{id-recibo}/reenvios-bancos\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  var headers = { \u0026#39;Accept\u0026#39;:\u0026#39;application/json\u0026#39;, \u0026#39;X-IBM-Client-Id\u0026#39;:\u0026#39;API_KEY\u0026#39; }; $.ajax({ url: \u0026#39;https://$(catalog.host)/cross-recibos/api/v1/recibos/{id-recibo}/reenvios-bancos\u0026#39;, method: \u0026#39;post\u0026#39;, headers: headers, success: function(data) { console.log(JSON.stringify(data)); } })   1 2 3 4  POST https://$(catalog.host)/cross-recibos/api/v1/recibos/{id-recibo}/reenvios-bancos HTTP/1.1 Accept: application/json   POST /recibos/{id-recibo}/reenvios-bancos\nConfirma a Mutua que puede volver a enviar al banco el recibo que fue devuelto y se quedó sin cobrar\nOperación que permite confirmar a Mutua que puede volver a enviar al banco el recibo que fue devuelto y se quedó sin cobrar\nParameters    Name In Type Required Description     id-recibo path string true Identificador del recibo     Example responses\n  201 Response\n 1 2 3 4 5 6 7 8 9 10  { \u0026#34;mensaje\u0026#34;: [ { \u0026#34;campo\u0026#34;: \u0026#34;id-poliza\u0026#34;, \u0026#34;codigo\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;descripcion\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;ampliacionInformacion\u0026#34;: \u0026#34;\u0026#34; } ] }   Responses    Status Meaning Description Schema     201 Created 201 OK - Confirma el envío del recibo al banco Mensajes   400 Bad Request 400 Bad Request Mensajes   404 Not Found 404 Not Found Mensajes   500 Internal Server Error 500 Internal Error Mensajes    To perform this operation, you must be authenticated by means of one of the following methods: clientIdHeader  crearPagoRecibo \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;https://$(catalog.host)/cross-recibos/api/v1/recibos/{id-recibo}/confirmaciones-pagos\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;POST\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, \u0026#34;X-IBM-Client-Id\u0026#34;: []string{\u0026#34;API_KEY\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;POST\u0026#34;, \u0026#34;https://$(catalog.host)/cross-recibos/api/v1/recibos/{id-recibo}/confirmaciones-pagos\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  var headers = { \u0026#39;Accept\u0026#39;:\u0026#39;application/json\u0026#39;, \u0026#39;X-IBM-Client-Id\u0026#39;:\u0026#39;API_KEY\u0026#39; }; $.ajax({ url: \u0026#39;https://$(catalog.host)/cross-recibos/api/v1/recibos/{id-recibo}/confirmaciones-pagos\u0026#39;, method: \u0026#39;post\u0026#39;, headers: headers, success: function(data) { console.log(JSON.stringify(data)); } })   1 2 3 4  POST https://$(catalog.host)/cross-recibos/api/v1/recibos/{id-recibo}/confirmaciones-pagos HTTP/1.1 Accept: application/json   POST /recibos/{id-recibo}/confirmaciones-pagos\nConfirma a Mutua el pago de un recibo realizado por un cliente de forma explícita, por ejemplo porque se quedó impagado o devuelto por el banco\nOperación que permite confirmar a Mutua el pago de un recibo realizado por un cliente de forma explícita, por ejemplo porque se quedó impagado o devuelto por el banco\nParameters    Name In Type Required Description     id-recibo path string true Identificador del recibo     Example responses\n  201 Response\n 1 2 3 4 5 6 7 8 9 10  { \u0026#34;mensaje\u0026#34;: [ { \u0026#34;campo\u0026#34;: \u0026#34;id-poliza\u0026#34;, \u0026#34;codigo\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;descripcion\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;ampliacionInformacion\u0026#34;: \u0026#34;\u0026#34; } ] }   Responses    Status Meaning Description Schema     201 Created 201 Confirma el pago de un recibo de forma explícita Mensajes   400 Bad Request 400 Bad Request Mensajes   404 Not Found 404 Not Found Mensajes   500 Internal Server Error 500 Internal Error Mensajes    To perform this operation, you must be authenticated by means of one of the following methods: clientIdHeader  Schemas Recibo \n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61  { \u0026#34;datosBasicosRecibo\u0026#34;: { \u0026#34;id\u0026#34;: \u0026#34;054\u0026#34;, \u0026#34;fechaEfecto\u0026#34;: \u0026#34;2019-03-30\u0026#34;, \u0026#34;fraccion\u0026#34;: \u0026#34;1/3\u0026#34;, \u0026#34;detalleImporte\u0026#34;: { \u0026#34;importeTotalRecibo\u0026#34;: 99.62, \u0026#34;primaNeta\u0026#34;: 83.61, \u0026#34;descuento\u0026#34;: 0, \u0026#34;consorcio\u0026#34;: 8.32, \u0026#34;ips\u0026#34;: 5.2, \u0026#34;lea\u0026#34;: 0.38, \u0026#34;arbitrio\u0026#34;: 2.11, \u0026#34;gastosFraccionamiento\u0026#34;: 1.06 }, \u0026#34;situacionReciboAFecha\u0026#34;: \u0026#34;Pagado\u0026#34; }, \u0026#34;numeroPoliza\u0026#34;: \u0026#34;25\u0026#34;, \u0026#34;movimientoPoliza\u0026#34;: \u0026#34;ACTIVA\u0026#34;, \u0026#34;empresa\u0026#34;: \u0026#34;Mutua\u0026#34;, \u0026#34;ramo\u0026#34;: \u0026#34;AUTOS\u0026#34;, \u0026#34;anualidad\u0026#34;: \u0026#34;2018\u0026#34;, \u0026#34;fechaEmision\u0026#34;: \u0026#34;21-06-2018\u0026#34;, \u0026#34;fechaVencimiento\u0026#34;: \u0026#34;31-07-2018\u0026#34;, \u0026#34;tipoRecibo\u0026#34;: \u0026#34;Vencimiento\u0026#34;, \u0026#34;estadoRecibo\u0026#34;: \u0026#34;Emitido\u0026#34;, \u0026#34;estadoCobroRecibo\u0026#34;: \u0026#34;Pendiente poner al cobro\u0026#34;, \u0026#34;nifRecibo\u0026#34;: \u0026#34;53450262X\u0026#34;, \u0026#34;cuentaBancaria\u0026#34;: { \u0026#34;idCuentaBancaria\u0026#34;: \u0026#34;01\u0026#34;, \u0026#34;tipoCuenta\u0026#34;: \u0026#34;Ahorro\u0026#34;, \u0026#34;iban\u0026#34;: \u0026#34;ES82 7139 7713 11 8283827121\u0026#34;, \u0026#34;nombreBanco\u0026#34;: \u0026#34;BBVA\u0026#34;, \u0026#34;direccionBanco\u0026#34;: \u0026#34;Avda. Ripolles, 55\u0026#34; }, \u0026#34;domicilioRecibo\u0026#34;: \u0026#34;Avda. Albufera, 62\u0026#34;, \u0026#34;movimientoRecibo\u0026#34;: { \u0026#34;idMovimiento\u0026#34;: \u0026#34;15\u0026#34;, \u0026#34;fechaMovimiento\u0026#34;: \u0026#34;2019-06-10\u0026#34;, \u0026#34;descripcionMovimiento\u0026#34;: \u0026#34;RECIBO EMITIDO\u0026#34;, \u0026#34;fechaSituacionRecibo\u0026#34;: \u0026#34;2019-04-30\u0026#34; }, \u0026#34;motivoDevolucionAnulacion\u0026#34;: \u0026#34;ANULADO POR IMPAGO\u0026#34;, \u0026#34;datosCobro\u0026#34;: { \u0026#34;datosBasicosCobro\u0026#34;: { \u0026#34;datosCuentaBancaria\u0026#34;: { \u0026#34;idCuentaBancaria\u0026#34;: \u0026#34;01\u0026#34;, \u0026#34;tipoCuenta\u0026#34;: \u0026#34;Ahorro\u0026#34;, \u0026#34;iban\u0026#34;: \u0026#34;ES82 7139 7713 11 8283827121\u0026#34;, \u0026#34;nombreBanco\u0026#34;: \u0026#34;BBVA\u0026#34;, \u0026#34;direccionBanco\u0026#34;: \u0026#34;Avda. Ripolles, 55\u0026#34; }, \u0026#34;formaPago\u0026#34;: \u0026#34;BANCO\u0026#34; }, \u0026#34;frecuenciaPago\u0026#34;: { \u0026#34;id\u0026#34;: \u0026#34;ANUAL\u0026#34;, \u0026#34;nombre\u0026#34;: \u0026#34;Frecuencia de pago anual\u0026#34; } } }   Agrupa los datos relativos a un recibo de pago de una póliza\nProperties    Name Type Required Restrictions Description     datosBasicosRecibo DatosBasicosRecibo false none Datos básicos del recibo   numeroPoliza string false none Número de póliza   movimientoPoliza string false none Movimiento de la póliza al que se asocia al recibo   empresa string false none Empresa del recibo   ramo string false none Ramo del recibo   anualidad string false none Anualidad de efecto del recibo   fechaEmision string(date) false none Fecha de puesto al cobro del recibo (remesado para banco)   fechaVencimiento string(date) false none Fin de vigencia del recibo   tipoRecibo string false none Tipo de recibo: vencimiento, nueva produción o suplemento   estadoRecibo string false none Estado del recibo: emitido, retirado por suplemento, devuelto, anulado emision o anulado falta de pago   estadoCobroRecibo string false none Estado de cobro del recibo: pendiente poner al cobro, puesto al cobro o fuera de cobro   nifRecibo string false none NIF del pagador del recibo   cuentaBancaria CuentaBancaria false none Cuenta Bancaria asociada al pago de recibos de la póliza   domicilioRecibo string false none Domicilio al que se asocia el recibo   movimientoRecibo MovimientoRecibo false none Movimiento que origina el cambio sobre el recibo   motivoDevolucionAnulacion string false none Motivo por el que se devuelve o anula un recibo   datosCobro DatosCobro false none Datos relativos al cobro de un recibo    Enumerated Values    Property Value     tipoRecibo VENCIMIENTO   tipoRecibo NUEVA_PRODUCCCION   tipoRecibo SUPLEMENTOS   estadoRecibo EMITIDO   estadoRecibo RETIRADO_POR_SUPLEMENTO   estadoRecibo DEVUELTO   estadoRecibo ANULADO_EMISION   estadoRecibo ANULADO_FALTA_PAGO    DatosCobro \n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  { \u0026#34;datosBasicosCobro\u0026#34;: { \u0026#34;datosCuentaBancaria\u0026#34;: { \u0026#34;idCuentaBancaria\u0026#34;: \u0026#34;01\u0026#34;, \u0026#34;tipoCuenta\u0026#34;: \u0026#34;Ahorro\u0026#34;, \u0026#34;iban\u0026#34;: \u0026#34;ES82 7139 7713 11 8283827121\u0026#34;, \u0026#34;nombreBanco\u0026#34;: \u0026#34;BBVA\u0026#34;, \u0026#34;direccionBanco\u0026#34;: \u0026#34;Avda. Ripolles, 55\u0026#34; }, \u0026#34;formaPago\u0026#34;: \u0026#34;BANCO\u0026#34; }, \u0026#34;frecuenciaPago\u0026#34;: { \u0026#34;id\u0026#34;: \u0026#34;ANUAL\u0026#34;, \u0026#34;nombre\u0026#34;: \u0026#34;Frecuencia de pago anual\u0026#34; } }   Agrupa los datos relativos a un cobro\nProperties    Name Type Required Restrictions Description     datosBasicosCobro DatosBasicosCobro true none Datos básicos de cobro   frecuenciaPago FrecuenciaPago true none Frecuencia de pago    DatosBasicosCobro \n1 2 3 4 5 6 7 8 9 10 11  { \u0026#34;datosCuentaBancaria\u0026#34;: { \u0026#34;idCuentaBancaria\u0026#34;: \u0026#34;01\u0026#34;, \u0026#34;tipoCuenta\u0026#34;: \u0026#34;Ahorro\u0026#34;, \u0026#34;iban\u0026#34;: \u0026#34;ES82 7139 7713 11 8283827121\u0026#34;, \u0026#34;nombreBanco\u0026#34;: \u0026#34;BBVA\u0026#34;, \u0026#34;direccionBanco\u0026#34;: \u0026#34;Avda. Ripolles, 55\u0026#34; }, \u0026#34;formaPago\u0026#34;: \u0026#34;BANCO\u0026#34; }   Agrupa los datos básicos relativos a un cobro\nProperties    Name Type Required Restrictions Description     datosCuentaBancaria CuentaBancaria true none Datos de la cuenta bancaria   formaPago string false none Formas de pagar un recibo    Enumerated Values    Property Value     formaPago BANCO   formaPago TARJETA   formaPago VENTANILLA   formaPago DOMICILIADO   formaPago EFECTIVO    CuentaBancaria \n1 2 3 4 5 6 7 8  { \u0026#34;idCuentaBancaria\u0026#34;: \u0026#34;01\u0026#34;, \u0026#34;tipoCuenta\u0026#34;: \u0026#34;Ahorro\u0026#34;, \u0026#34;iban\u0026#34;: \u0026#34;ES82 7139 7713 11 8283827121\u0026#34;, \u0026#34;nombreBanco\u0026#34;: \u0026#34;BBVA\u0026#34;, \u0026#34;direccionBanco\u0026#34;: \u0026#34;Avda. Ripolles, 55\u0026#34; }   Datos relativos a una cuenta bancaria\nProperties    Name Type Required Restrictions Description     idCuentaBancaria string true none Identificador de la cuenta   tipoCuenta string false none Tipo de cuenta   iban string true none IBAN de la cuenta   nombreBanco string false none Nombre del banco de la cuenta   direccionBanco string false none Dirección de la sucursal en la que está abierta la cuenta    FrecuenciaPago \n1 2 3 4 5  { \u0026#34;id\u0026#34;: \u0026#34;ANUAL\u0026#34;, \u0026#34;nombre\u0026#34;: \u0026#34;Frecuencia de pago anual\u0026#34; }   Agrupa los datos de las frecuencias de pago disponibles\nProperties    Name Type Required Restrictions Description     id string false none Identificador de la frecuencia de pago   nombre string false none Descripción de la frecuencia de pago    Enumerated Values    Property Value     id ANUAL   id MENSUAL   id APLAZADO   id BIMESTRAL   id TRIMESTRAL   id CUATRIMESTRAL   id SEMESTRAL    ImporteRecibo \n1 2 3 4 5 6 7 8 9 10 11  { \u0026#34;importeTotalRecibo\u0026#34;: 99.62, \u0026#34;primaNeta\u0026#34;: 83.61, \u0026#34;descuento\u0026#34;: 0, \u0026#34;consorcio\u0026#34;: 8.32, \u0026#34;ips\u0026#34;: 5.2, \u0026#34;lea\u0026#34;: 0.38, \u0026#34;arbitrio\u0026#34;: 2.11, \u0026#34;gastosFraccionamiento\u0026#34;: 1.06 }   Agrupa los datos relativos a un importe.\nProperties    Name Type Required Restrictions Description     importeTotalRecibo number(float) false none Importe total del recibo   primaNeta number(float) false none Prima neta   descuento number(float) false none Descuento aplicado   consorcio number(float) false none Consorcio de Compensación de Seguros   ips number(float) false none Impuestos sobre Primas de Seguros   lea number(float) false none Liquidación Entidades Aseguradoras   arbitrio number(float) false none Arbitrio de bomberos   gastosFraccionamiento number(float) false none Gastos derivados del fraccionamiento del pago    DatosBasicosRecibo \n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  { \u0026#34;id\u0026#34;: \u0026#34;054\u0026#34;, \u0026#34;fechaEfecto\u0026#34;: \u0026#34;2019-03-30\u0026#34;, \u0026#34;fraccion\u0026#34;: \u0026#34;1/3\u0026#34;, \u0026#34;detalleImporte\u0026#34;: { \u0026#34;importeTotalRecibo\u0026#34;: 99.62, \u0026#34;primaNeta\u0026#34;: 83.61, \u0026#34;descuento\u0026#34;: 0, \u0026#34;consorcio\u0026#34;: 8.32, \u0026#34;ips\u0026#34;: 5.2, \u0026#34;lea\u0026#34;: 0.38, \u0026#34;arbitrio\u0026#34;: 2.11, \u0026#34;gastosFraccionamiento\u0026#34;: 1.06 }, \u0026#34;situacionReciboAFecha\u0026#34;: \u0026#34;Pagado\u0026#34; }   Agrupa los datos relativos a un recibo.\nProperties    Name Type Required Restrictions Description     id string false none Identificador del recibo   fechaEfecto string(date) false none Fecha de efecto del recibo   fraccion string false none Fracción del recibo   detalleImporte ImporteRecibo false none Detalle del importe del recibo   situacionReciboAFecha string false none Situacion del recibo a la fecha de consulta: pendiente, pagado, impagado o anulado    Enumerated Values    Property Value     situacionReciboAFecha PENDIENTE   situacionReciboAFecha PAGADO   situacionReciboAFecha IMPAGADO   situacionReciboAFecha ANULADO    Item \n1 2 3 4 5 6  { \u0026#34;id\u0026#34;: \u0026#34;25\u0026#34;, \u0026#34;descripcion\u0026#34;: \u0026#34;Recurso\u0026#34;, \u0026#34;url\u0026#34;: \u0026#34;/recursos/{id-recurso}\u0026#34; }   Agrupa los datos relativos a una entidad.\nProperties    Name Type Required Restrictions Description     id string false none Identificador de la entidad   descripcion string false none Descripción de la entidad   url string false none URL para acceder al detalle de la entidad    Documento \n1 2 3 4 5  { \u0026#34;id\u0026#34;: \u0026#34;25\u0026#34;, \u0026#34;urlDescarga\u0026#34;: \u0026#34;https://aplicaciones.mutua.es/documentos/25\u0026#34; }   Contiene la información necesaria para acceder a un documento\nProperties    Name Type Required Restrictions Description     id string false none Identificador del documento   urlDescarga string false none Dirección URL para la descarga del documento    Mensajes \n1 2 3 4 5 6 7 8 9 10 11  { \u0026#34;mensaje\u0026#34;: [ { \u0026#34;campo\u0026#34;: \u0026#34;id-poliza\u0026#34;, \u0026#34;codigo\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;descripcion\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;ampliacionInformacion\u0026#34;: \u0026#34;\u0026#34; } ] }   Objeto que permite agrupar los datos relativos a los mensajes.\nProperties    Name Type Required Restrictions Description     mensaje [DatosMensaje] false none Lista de mensajes al consumidor de la API    DatosMensaje \n1 2 3 4 5 6 7  { \u0026#34;campo\u0026#34;: \u0026#34;id-poliza\u0026#34;, \u0026#34;codigo\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;descripcion\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;ampliacionInformacion\u0026#34;: \u0026#34;\u0026#34; }   Objeto que permite agrupar los datos de mensaje.\nProperties    Name Type Required Restrictions Description     campo string false none Nombre del campo sobre el que se informa: del error producido en el caso de mensaje de error, del objeto actualizado/eliminado/creado en caso de actualización/eliminación/creación   codigo string false none Codigo descriptivo del mensaje al consumidor de la API   descripcion string false none Descripción del mensaje para el consumidor de la API   ampliacionInformacion string false none Detalle ampliado sobre el mensaje al consumidor. En el caso de fallo en la creación de un objeto, informa sobre el detalle de este fallo. En el caso de éxito de creación de un objeto, contiene un json con el id del objeto creado y el path relativo /entidad/{id-entidad}.    MovimientoRecibo \n1 2 3 4 5 6 7  { \u0026#34;idMovimiento\u0026#34;: \u0026#34;15\u0026#34;, \u0026#34;fechaMovimiento\u0026#34;: \u0026#34;2019-06-10\u0026#34;, \u0026#34;descripcionMovimiento\u0026#34;: \u0026#34;RECIBO EMITIDO\u0026#34;, \u0026#34;fechaSituacionRecibo\u0026#34;: \u0026#34;2019-04-30\u0026#34; }   Agrupa los datos relativos al movimiento de un recibo\nProperties    Name Type Required Restrictions Description     idMovimiento string false none Identificador del movimiento del recibo   fechaMovimiento string(date) false none Fecha del movimiento   descripcionMovimiento string false none Descripcion del movimiento: recibo emitido, enviado por el banco\u0026hellip;   fechaSituacionRecibo string(date) false none Fecha de efecto del cambio de situacion    ","description":"","id":23,"section":"docs","tags":null,"title":"CROSS - RECIBOS","uri":"/es/docs/apis/recibos/"},{"content":"MasMovil Ticketing API - Inbound (External Systems  MasMovil) v1.1.8  Scroll down for code samples, example requests and responses. Select a language for code samples from the tabs above or the mobile navigation menu.\n This is the ticketing-api server.\nBase URLs:\n  {protocol}://{environment}\n  protocol - Default: https\n  https\n  http\n    environment - Default: ticketing.dev.k8s.masmovil.com/v1/api\n  0.0.0.0:8080\n  ticketing.dev.k8s.masmovil.com/v1/api\n  ticketing.private.sta.k8s.masmovil.com/v1/api\n      Email: Support\nAuthentication  HTTP Authentication, scheme: bearer  Ticket Operations about Tickets\ncreateTicket \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;{protocol}://{environment}/ticket\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;POST\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Content-Type\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, \u0026#34;x-api-key\u0026#34;: []string{\u0026#34;string\u0026#34;}, \u0026#34;Authorization\u0026#34;: []string{\u0026#34;Bearer {access-token}\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;POST\u0026#34;, \u0026#34;{protocol}://{environment}/ticket\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   POST /ticket\nCreate new ticket\nCreates a ticket in MasMovil ticketing tool.\n Body parameter\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  { \u0026#34;project\u0026#34;: \u0026#34;IDR\u0026#34;, \u0026#34;summary\u0026#34;: \u0026#34;Ticket summary\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;This is a ticket description example\u0026#34;, \u0026#34;ticketType\u0026#34;: \u0026#34;Incidencia Red\u0026#34;, \u0026#34;createdDate\u0026#34;: \u0026#34;2019-08-20T10:29:29.908+1100\u0026#34;, \u0026#34;massive\u0026#34;: \u0026#34;NO\u0026#34;, \u0026#34;criticality\u0026#34;: \u0026#34;N1-Crítica o de corte\u0026#34;, \u0026#34;unavailability\u0026#34;: \u0026#34;SI\u0026#34;, \u0026#34;affectedNetworkElement\u0026#34;: \u0026#34;Network Element\u0026#34;, \u0026#34;affectedNetworkType\u0026#34;: \u0026#34;Voz-Red Mercurio\u0026#34;, \u0026#34;affectedBusiness\u0026#34;: \u0026#34;Empresas\u0026#34;, \u0026#34;eventStartDate\u0026#34;: \u0026#34;2019-08-19T10:29:29.908+1100\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;test\u0026#34; }   Parameters    Name In Type Required Description     x-api-key header string true none   body body object true Fields needed to create a ticket in MasMovil Ticketing tool     Example responses\n  201 Response\n 1 2 3 4  { \u0026#34;id\u0026#34;: \u0026#34;123456789\u0026#34;, \u0026#34;key\u0026#34;: \u0026#34;##-1234\u0026#34; }   Responses    Status Meaning Description Schema     201 Created Created inline_response_201   400 Bad Request Bad Request Error400   401 Unauthorized Unauthorized Error401   404 Not Found Not Found Error404   500 Internal Server Error Internal Server Error Error500    To perform this operation, you must be authenticated by means of one of the following methods: bearerAuth  getTicketById \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;{protocol}://{environment}/ticket/{ticketId}\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;GET\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, \u0026#34;x-api-key\u0026#34;: []string{\u0026#34;string\u0026#34;}, \u0026#34;Authorization\u0026#34;: []string{\u0026#34;Bearer {access-token}\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;GET\u0026#34;, \u0026#34;{protocol}://{environment}/ticket/{ticketId}\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   GET /ticket/{ticketId}\nGet a ticket by id\nRetrieves the details of a ticket that has previously been created.\nParameters    Name In Type Required Description     ticketId path string true The Ticket ID in MasMovil ticketing tool. You can use either ID or KEY.   expand query array[string] false Filter for ticket response body. (You must add \u0026lsquo;attachment\u0026rsquo; query param to get ticket attachments in response body)   x-api-key header string true none    Enumerated Values    Parameter Value     expand attachment     Example responses\n  200 Response\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  { \u0026#34;id\u0026#34;: \u0026#34;3240786\u0026#34;, \u0026#34;status\u0026#34;: \u0026#34;EN CURSO\u0026#34;, \u0026#34;summary\u0026#34;: \u0026#34;ERI_MM_OLTZ3562010LAP012_para que se revise\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;ERI_MM_OLTZ3562010LAP012_para que se revise\u0026#34;, \u0026#34;priority\u0026#34;: \u0026#34;Medium\u0026#34;, \u0026#34;ticketType\u0026#34;: \u0026#34;Incidencia Red\u0026#34;, \u0026#34;project\u0026#34;: \u0026#34;IDR\u0026#34;, \u0026#34;createdDate\u0026#34;: \u0026#34;2018-02-28T17:43:38.000+0100\u0026#34;, \u0026#34;attachment\u0026#34;: { \u0026#34;name\u0026#34;: \u0026#34;attachment.txt\u0026#34;, \u0026#34;data\u0026#34;: \u0026#34;SGVsbG8gd29ybGQgZnJvbSBNUywgY2hhbmdlZA==\u0026#34;, \u0026#34;mimeType\u0026#34;: \u0026#34;multipart/form-data\u0026#34; } }   Responses    Status Meaning Description Schema     200 OK Ticket response TicketResponse   400 Bad Request Bad Request Error400   401 Unauthorized Unauthorized Error401   404 Not Found Not Found Error404   500 Internal Server Error Internal Server Error Error500    To perform this operation, you must be authenticated by means of one of the following methods: bearerAuth  updateTicket \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;{protocol}://{environment}/ticket/{ticketId}\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;PATCH\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Content-Type\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, \u0026#34;x-api-key\u0026#34;: []string{\u0026#34;string\u0026#34;}, \u0026#34;Authorization\u0026#34;: []string{\u0026#34;Bearer {access-token}\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;PATCH\u0026#34;, \u0026#34;{protocol}://{environment}/ticket/{ticketId}\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   PATCH /ticket/{ticketId}\nUpdate an existing ticket\nThis service can be used to update ticket information.\nFor udating ticket status, you must provide a transtition ID to apply. You can get this ID through this GET request: /ticket/{ticketId}/transitions\nIf your system needs to use a callback to send back information about previous MasMovil request, you must use this service using especified integration fields.\n Body parameter\n 1 2 3  { \u0026#34;transitionId\u0026#34;: 11 }   Parameters    Name In Type Required Description     ticketId path string true The Ticket ID in MasMovil ticketing tool. You can use either ID or KEY.   x-api-key header string true none   body body object true Body must include the ticket fields that need to be updated.    Detailed descriptions body: Body must include the ticket fields that need to be updated.\nSee examples below.\n Example responses\n  400 Response\n 1 2 3 4 5 6  { \u0026#34;code\u0026#34;: \u0026#34;0015\u0026#34;, \u0026#34;status\u0026#34;: \u0026#34;BAD_REQUEST\u0026#34;, \u0026#34;message\u0026#34;: \u0026#34;Bad Request\u0026#34;, \u0026#34;detailMsg\u0026#34;: \u0026#34;string\u0026#34; }   Responses    Status Meaning Description Schema     204 No Content No Content None   400 Bad Request Bad Request Error400   401 Unauthorized Unauthorized Error401   404 Not Found Not Found Error404   500 Internal Server Error Internal Server Error Error500    To perform this operation, you must be authenticated by means of one of the following methods: bearerAuth  addAttachment \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;{protocol}://{environment}/ticket/{ticketId}/attachment\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;POST\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Content-Type\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, \u0026#34;x-api-key\u0026#34;: []string{\u0026#34;string\u0026#34;}, \u0026#34;Authorization\u0026#34;: []string{\u0026#34;Bearer {access-token}\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;POST\u0026#34;, \u0026#34;{protocol}://{environment}/ticket/{ticketId}/attachment\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   POST /ticket/{ticketId}/attachment\nAdd attachment to ticket\n Body parameter\n 1 2 3 4  { \u0026#34;name\u0026#34;: \u0026#34;image_example.jpg\u0026#34;, \u0026#34;data\u0026#34;: \u0026#34;R0lGODdhAQABAPAAAP8AAAAAACwAAAAAAQABAAACAkQBADs\u0026#34; }   Parameters    Name In Type Required Description     ticketId path string true The Ticket ID in MasMovil ticketing tool. You can use either ID or KEY.   x-api-key header string true none   body body object true Both fields name and data are required.    Detailed descriptions body: Both fields name and data are required.\nData must be base64 encoded.\n Example responses\n  201 Response\n 1 2 3  { \u0026#34;message\u0026#34;: \u0026#34;Attachment added successfully.\u0026#34; }   Responses    Status Meaning Description Schema     201 Created Created inline_response_201_1   400 Bad Request Bad Request Error400   401 Unauthorized Unauthorized Error401   404 Not Found Not Found Error404   500 Internal Server Error Internal Server Error Error500    To perform this operation, you must be authenticated by means of one of the following methods: bearerAuth  addComment \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;{protocol}://{environment}/ticket/{ticketId}/comment\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;POST\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Content-Type\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, \u0026#34;x-api-key\u0026#34;: []string{\u0026#34;string\u0026#34;}, \u0026#34;Authorization\u0026#34;: []string{\u0026#34;Bearer {access-token}\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;POST\u0026#34;, \u0026#34;{protocol}://{environment}/ticket/{ticketId}/comment\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   POST /ticket/{ticketId}/comment\nAdd comment to ticket\n Body parameter\n 1 2 3  { \u0026#34;body\u0026#34;: \u0026#34;This is a comment example\u0026#34; }   Parameters    Name In Type Required Description     ticketId path string true The Ticket ID in MasMovil ticketing tool. You can use either ID or KEY.   x-api-key header string true none   body body object true Property body is mandatory.     Example responses\n  201 Response\n 1 2 3  { \u0026#34;message\u0026#34;: \u0026#34;Comment added successfully.\u0026#34; }   Responses    Status Meaning Description Schema     201 Created Created inline_response_201_2   400 Bad Request Bad Request Error400   401 Unauthorized Unauthorized Error401   404 Not Found Not Found Error404   500 Internal Server Error Internal Server Error Error500    To perform this operation, you must be authenticated by means of one of the following methods: bearerAuth  post__ticket_{ticketId}_attachmentWithComment  Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;{protocol}://{environment}/ticket/{ticketId}/attachmentWithComment\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;POST\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Content-Type\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, \u0026#34;x-api-key\u0026#34;: []string{\u0026#34;string\u0026#34;}, \u0026#34;Authorization\u0026#34;: []string{\u0026#34;Bearer {access-token}\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;POST\u0026#34;, \u0026#34;{protocol}://{environment}/ticket/{ticketId}/attachmentWithComment\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   POST /ticket/{ticketId}/attachmentWithComment\nAdd attachment with comment to ticket\n Body parameter\n 1  {}   Parameters    Name In Type Required Description     ticketId path string true The Ticket ID in MasMovil ticketing tool. You can use either ID or KEY.   x-api-key header string true none   body body object true Both comment and attachment are mandatory.     Example responses\n  201 Response\n 1 2 3  { \u0026#34;message\u0026#34;: \u0026#34;Attachment with comment added successfully.\u0026#34; }   Responses    Status Meaning Description Schema     201 Created Created inline_response_201_3   400 Bad Request Bad Request Error400   401 Unauthorized Unauthorized Error401   404 Not Found Not Found Error404   500 Internal Server Error Internal Server Error Error500    To perform this operation, you must be authenticated by means of one of the following methods: bearerAuth  getFieldInformation \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;{protocol}://{environment}/ticket/field/{fieldName}?projectKey=MAS\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;GET\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, \u0026#34;x-api-key\u0026#34;: []string{\u0026#34;string\u0026#34;}, \u0026#34;Authorization\u0026#34;: []string{\u0026#34;Bearer {access-token}\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;GET\u0026#34;, \u0026#34;{protocol}://{environment}/ticket/field/{fieldName}\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   GET /ticket/field/{fieldName}\nGet information about an API field. It returns info about MasMovil ticketing tool field name and allowed values.\nParameters    Name In Type Required Description     fieldName path string true The field name in MasMovil ticketing API.   projectKey query array[string] true The project key in MasMovil ticketing tool   x-api-key header string true none    Enumerated Values    Parameter Value     projectKey MAS     Example responses\n  200 Response\n 1 2 3 4  { \u0026#34;required\u0026#34;: true, \u0026#34;name\u0026#34;: \u0026#34;Titulo de la incidencia\u0026#34; }   Responses    Status Meaning Description Schema     200 OK Get field information FieldResponse   400 Bad Request Bad Request Error400   401 Unauthorized Unauthorized Error401   404 Not Found Not Found Error404   500 Internal Server Error Internal Server Error Error500    To perform this operation, you must be authenticated by means of one of the following methods: bearerAuth  getAllowedTransitions \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;{protocol}://{environment}/ticket/{ticketId}/transitions\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;GET\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, \u0026#34;x-api-key\u0026#34;: []string{\u0026#34;string\u0026#34;}, \u0026#34;Authorization\u0026#34;: []string{\u0026#34;Bearer {access-token}\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;GET\u0026#34;, \u0026#34;{protocol}://{environment}/ticket/{ticketId}/transitions\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   GET /ticket/{ticketId}/transitions\nGet information about allowed transitions for a ticket.\nParameters    Name In Type Required Description     ticketId path string true The Ticket ID in MasMovil ticketing tool. You can use either ID or KEY.   x-api-key header string true none     Example responses\n  200 Response\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  { \u0026#34;transitions\u0026#34;: [ { \u0026#34;id\u0026#34;: 41, \u0026#34;name\u0026#34;: \u0026#34;Reasignar\u0026#34;, \u0026#34;status\u0026#34;: \u0026#34;Asignado\u0026#34; }, { \u0026#34;id\u0026#34;: 21, \u0026#34;name\u0026#34;: \u0026#34;Resolver\u0026#34;, \u0026#34;status\u0026#34;: \u0026#34;RESUELTO\u0026#34; } ] }   Responses    Status Meaning Description Schema     200 OK Get transitions TransitionsResponse   400 Bad Request Bad Request Error400   401 Unauthorized Unauthorized Error401   404 Not Found Not Found Error404   500 Internal Server Error Internal Server Error Error500    To perform this operation, you must be authenticated by means of one of the following methods: bearerAuth  getFieldsForTicketType \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;{protocol}://{environment}/creationDataInfo?projectKey=MAS\u0026amp;ticketType=Aver%C3%ADa%20%28FTTH%29\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;GET\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, \u0026#34;x-api-key\u0026#34;: []string{\u0026#34;string\u0026#34;}, \u0026#34;Authorization\u0026#34;: []string{\u0026#34;Bearer {access-token}\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;GET\u0026#34;, \u0026#34;{protocol}://{environment}/creationDataInfo\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   GET /creationDataInfo\nGet information about fields needed to create a given type of ticket\nParameters    Name In Type Required Description     projectKey query array[string] true The project key in MasMovil ticketing tool   ticketType query array[string] true The ticket type in MasMovil ticketing tool   x-api-key header string true none    Enumerated Values    Parameter Value     projectKey MAS   ticketType Avería (FTTH)   ticketType Avería Cliente   ticketType Incidencia   ticketType Reclamación Instalación   ticketType Cancelación Cliente     Example responses\n  200 Response\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  { \u0026#34;subscriptionNumber\u0026#34;: { \u0026#34;required\u0026#34;: true, \u0026#34;name\u0026#34;: \u0026#34;Suscripción\u0026#34; }, \u0026#34;icc\u0026#34;: { \u0026#34;required\u0026#34;: false, \u0026#34;name\u0026#34;: \u0026#34;ICC\u0026#34; }, \u0026#34;contactEmail\u0026#34;: { \u0026#34;required\u0026#34;: false, \u0026#34;name\u0026#34;: \u0026#34;Email del Cliente\u0026#34; } }   Responses    Status Meaning Description Schema     200 OK Fields for ticket type CreationDataInfo   400 Bad Request Bad Request Error400   401 Unauthorized Unauthorized Error401   404 Not Found Not Found Error404   500 Internal Server Error Internal Server Error Error500    To perform this operation, you must be authenticated by means of one of the following methods: bearerAuth  getTicketTypes \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;{protocol}://{environment}/project/ticketTypes\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;GET\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, \u0026#34;x-api-key\u0026#34;: []string{\u0026#34;string\u0026#34;}, \u0026#34;Authorization\u0026#34;: []string{\u0026#34;Bearer {access-token}\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;GET\u0026#34;, \u0026#34;{protocol}://{environment}/project/ticketTypes\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   GET /project/ticketTypes\nGet information about ticket types per project\nParameters    Name In Type Required Description     x-api-key header string true none     Example responses\n  200 Response\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  { \u0026#34;projects\u0026#34;: [ { \u0026#34;key\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;ticketTypes\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;string\u0026#34; } ] } ] }   Responses    Status Meaning Description Schema     200 OK Get ticket types TicketTypesResponse   400 Bad Request Bad Request Error400   401 Unauthorized Unauthorized Error401   404 Not Found Not Found Error404   500 Internal Server Error Internal Server Error Error500    To perform this operation, you must be authenticated by means of one of the following methods: bearerAuth  getEditableFields \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;{protocol}://{environment}/ticket/{ticketId}/editableFields\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;GET\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, \u0026#34;Authorization\u0026#34;: []string{\u0026#34;Bearer {access-token}\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;GET\u0026#34;, \u0026#34;{protocol}://{environment}/ticket/{ticketId}/editableFields\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   GET /ticket/{ticketId}/editableFields\nGet information about editable fields for a ticket\nParameters    Name In Type Required Description     ticketId path string true The Ticket ID in MasMovil ticketing tool. You can use either ID or KEY.     Example responses\n  200 Response\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28  { \u0026#34;description\u0026#34;: { \u0026#34;name\u0026#34;: \u0026#34;Descripción\u0026#34;, \u0026#34;required\u0026#34;: true }, \u0026#34;customerPostalCode\u0026#34;: { \u0026#34;name\u0026#34;: \u0026#34;Código Postal\u0026#34;, \u0026#34;required\u0026#34;: false }, \u0026#34;customerSegment\u0026#34;: { \u0026#34;name\u0026#34;: \u0026#34;Segmento Cliente\u0026#34;, \u0026#34;required\u0026#34;: false, \u0026#34;allowedValues\u0026#34;: [ { \u0026#34;value\u0026#34;: \u0026#34;EMPRESA\u0026#34; }, { \u0026#34;value\u0026#34;: \u0026#34;RESIDENCIAL\u0026#34; }, { \u0026#34;value\u0026#34;: \u0026#34;HORECA\u0026#34; }, { \u0026#34;value\u0026#34;: \u0026#34;AUTONOMO\u0026#34; } ] } }   Responses    Status Meaning Description Schema     200 OK Editable Fields for ticket EditableFields   400 Bad Request Bad Request Error400   401 Unauthorized Unauthorized Error401   404 Not Found Not Found Error404   500 Internal Server Error Internal Server Error Error500    To perform this operation, you must be authenticated by means of one of the following methods: bearerAuth  searchTickets \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;{protocol}://{environment}/search\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;POST\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Content-Type\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, \u0026#34;x-api-key\u0026#34;: []string{\u0026#34;string\u0026#34;}, \u0026#34;Authorization\u0026#34;: []string{\u0026#34;Bearer {access-token}\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;POST\u0026#34;, \u0026#34;{protocol}://{environment}/search\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   POST /search\nSearch tickets\nYou can add fields to filter tickets. Allowed special opeators are $like:value and $in:[array], maxResults default results is 10.\nFields to return must be specified in \u0026ldquo;fields\u0026rdquo; json property.\nField names used in filters can be both Jira field name or ms-ticketing-API name, i.e.: you can use \u0026ldquo;customerDocument\u0026rdquo; or \u0026ldquo;Documento Cliente\u0026rdquo;.\n Body parameter\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  { \u0026#34;filters\u0026#34;: { \u0026#34;project\u0026#34;: \u0026#34;MAS\u0026#34;, \u0026#34;customerDocument\u0026#34;: { \u0026#34;$like\u0026#34;: \u0026#34;50744198B\u0026#34; } }, \u0026#34;startAt\u0026#34;: 0, \u0026#34;maxResults\u0026#34;: 10, \u0026#34;fields\u0026#34;: [ \u0026#34;key\u0026#34;, \u0026#34;summary\u0026#34;, \u0026#34;issuetype\u0026#34;, \u0026#34;status\u0026#34; ] }   Parameters    Name In Type Required Description     x-api-key header string true none   body body object true Filters to apply to search query     Example responses\n  200 Response\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  [ { \u0026#34;id\u0026#34;: \u0026#34;3240786\u0026#34;, \u0026#34;status\u0026#34;: \u0026#34;EN CURSO\u0026#34;, \u0026#34;summary\u0026#34;: \u0026#34;ERI_MM_OLTZ3562010LAP012_para que se revise\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;ERI_MM_OLTZ3562010LAP012_para que se revise\u0026#34;, \u0026#34;priority\u0026#34;: \u0026#34;Medium\u0026#34;, \u0026#34;ticketType\u0026#34;: \u0026#34;Incidencia Red\u0026#34;, \u0026#34;project\u0026#34;: \u0026#34;IDR\u0026#34;, \u0026#34;createdDate\u0026#34;: \u0026#34;2018-02-28T17:43:38.000+0100\u0026#34;, \u0026#34;attachment\u0026#34;: { \u0026#34;name\u0026#34;: \u0026#34;attachment.txt\u0026#34;, \u0026#34;data\u0026#34;: \u0026#34;SGVsbG8gd29ybGQgZnJvbSBNUywgY2hhbmdlZA==\u0026#34;, \u0026#34;mimeType\u0026#34;: \u0026#34;multipart/form-data\u0026#34; } } ]   Responses    Status Meaning Description Schema     200 OK Ticket response Inline   400 Bad Request Bad Request Error400   401 Unauthorized Unauthorized Error401   404 Not Found Not Found Error404   500 Internal Server Error Internal Server Error Error500    Response Schema Status Code 200\n   Name Type Required Restrictions Description     anonymous [TicketResponse] false none none   » id string false none none   » status string false none none   » summary string false none none   » description string false none none   » priority string false none none   » ticketType string false none none   » project string false none none   » createdDate string false none none   » attachment TicketResponse_attachment false none none   »» name string false none none   »» data string false none none   »» mimeType string false none none    To perform this operation, you must be authenticated by means of one of the following methods: bearerAuth  Schemas TicketResponse \n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  { \u0026#34;id\u0026#34;: \u0026#34;3240786\u0026#34;, \u0026#34;status\u0026#34;: \u0026#34;EN CURSO\u0026#34;, \u0026#34;summary\u0026#34;: \u0026#34;ERI_MM_OLTZ3562010LAP012_para que se revise\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;ERI_MM_OLTZ3562010LAP012_para que se revise\u0026#34;, \u0026#34;priority\u0026#34;: \u0026#34;Medium\u0026#34;, \u0026#34;ticketType\u0026#34;: \u0026#34;Incidencia Red\u0026#34;, \u0026#34;project\u0026#34;: \u0026#34;IDR\u0026#34;, \u0026#34;createdDate\u0026#34;: \u0026#34;2018-02-28T17:43:38.000+0100\u0026#34;, \u0026#34;attachment\u0026#34;: { \u0026#34;name\u0026#34;: \u0026#34;attachment.txt\u0026#34;, \u0026#34;data\u0026#34;: \u0026#34;SGVsbG8gd29ybGQgZnJvbSBNUywgY2hhbmdlZA==\u0026#34;, \u0026#34;mimeType\u0026#34;: \u0026#34;multipart/form-data\u0026#34; } }   Properties    Name Type Required Restrictions Description     id string false none none   status string false none none   summary string false none none   description string false none none   priority string false none none   ticketType string false none none   project string false none none   createdDate string false none none   attachment TicketResponse_attachment false none none    FieldResponse \n1 2 3 4 5  { \u0026#34;required\u0026#34;: true, \u0026#34;name\u0026#34;: \u0026#34;Titulo de la incidencia\u0026#34; }   Properties    Name Type Required Restrictions Description     required boolean false none none   name string false none none    CreationDataInfo \n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  { \u0026#34;subscriptionNumber\u0026#34;: { \u0026#34;required\u0026#34;: true, \u0026#34;name\u0026#34;: \u0026#34;Suscripción\u0026#34; }, \u0026#34;icc\u0026#34;: { \u0026#34;required\u0026#34;: false, \u0026#34;name\u0026#34;: \u0026#34;ICC\u0026#34; }, \u0026#34;contactEmail\u0026#34;: { \u0026#34;required\u0026#34;: false, \u0026#34;name\u0026#34;: \u0026#34;Email del Cliente\u0026#34; } }   Properties    Name Type Required Restrictions Description     subscriptionNumber CreationDataInfo_subscriptionNumber false none none   icc CreationDataInfo_icc false none none   contactEmail CreationDataInfo_contactEmail false none none    EditableFields \n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29  { \u0026#34;description\u0026#34;: { \u0026#34;name\u0026#34;: \u0026#34;Descripción\u0026#34;, \u0026#34;required\u0026#34;: true }, \u0026#34;customerPostalCode\u0026#34;: { \u0026#34;name\u0026#34;: \u0026#34;Código Postal\u0026#34;, \u0026#34;required\u0026#34;: false }, \u0026#34;customerSegment\u0026#34;: { \u0026#34;name\u0026#34;: \u0026#34;Segmento Cliente\u0026#34;, \u0026#34;required\u0026#34;: false, \u0026#34;allowedValues\u0026#34;: [ { \u0026#34;value\u0026#34;: \u0026#34;EMPRESA\u0026#34; }, { \u0026#34;value\u0026#34;: \u0026#34;RESIDENCIAL\u0026#34; }, { \u0026#34;value\u0026#34;: \u0026#34;HORECA\u0026#34; }, { \u0026#34;value\u0026#34;: \u0026#34;AUTONOMO\u0026#34; } ] } }   Properties    Name Type Required Restrictions Description     description EditableFields_description false none none   customerPostalCode EditableFields_customerPostalCode false none none   customerSegment EditableFields_customerSegment false none none    FieldNotFound \n1 2 3 4  { \u0026#34;message\u0026#34;: \u0026#34;We didn\u0026#39;t found information about that field.\u0026#34; }   Properties    Name Type Required Restrictions Description     message string false none none    Error400 \n1 2 3 4 5 6 7  { \u0026#34;code\u0026#34;: \u0026#34;0015\u0026#34;, \u0026#34;status\u0026#34;: \u0026#34;BAD_REQUEST\u0026#34;, \u0026#34;message\u0026#34;: \u0026#34;Bad Request\u0026#34;, \u0026#34;detailMsg\u0026#34;: \u0026#34;string\u0026#34; }   Properties    Name Type Required Restrictions Description     code string false none none   status string false none none   message string false none none   detailMsg string false none none    Error401 \n1 2 3 4 5 6 7  { \u0026#34;code\u0026#34;: \u0026#34;0003\u0026#34;, \u0026#34;status\u0026#34;: \u0026#34;UNAUTHORIZED\u0026#34;, \u0026#34;message\u0026#34;: \u0026#34;Unauthorized\u0026#34;, \u0026#34;detailMsg\u0026#34;: \u0026#34;string\u0026#34; }   Properties    Name Type Required Restrictions Description     code string false none none   status string false none none   message string false none none   detailMsg string false none none    Error404 \n1 2 3 4 5 6 7  { \u0026#34;code\u0026#34;: \u0026#34;0004\u0026#34;, \u0026#34;status\u0026#34;: \u0026#34;NOT_FOUND\u0026#34;, \u0026#34;message\u0026#34;: \u0026#34;Not found\u0026#34;, \u0026#34;detailMsg\u0026#34;: \u0026#34;Resource not found\u0026#34; }   Properties    Name Type Required Restrictions Description     code string false none none   status string false none none   message string false none none   detailMsg string false none none    Error500 \n1 2 3 4 5 6 7  { \u0026#34;code\u0026#34;: \u0026#34;0002\u0026#34;, \u0026#34;status\u0026#34;: \u0026#34;UNEXPECTED\u0026#34;, \u0026#34;message\u0026#34;: \u0026#34;Unexpected Error\u0026#34;, \u0026#34;detailMsg\u0026#34;: \u0026#34;string\u0026#34; }   Properties    Name Type Required Restrictions Description     code string false none none   status string false none none   message string false none none   detailMsg string false none none    TransitionsResponse \n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  { \u0026#34;transitions\u0026#34;: [ { \u0026#34;id\u0026#34;: 41, \u0026#34;name\u0026#34;: \u0026#34;Reasignar\u0026#34;, \u0026#34;status\u0026#34;: \u0026#34;Asignado\u0026#34; }, { \u0026#34;id\u0026#34;: 21, \u0026#34;name\u0026#34;: \u0026#34;Resolver\u0026#34;, \u0026#34;status\u0026#34;: \u0026#34;RESUELTO\u0026#34; } ] }   Properties    Name Type Required Restrictions Description     transitions [TransitionsResponse_transitions] false none none    TicketTypesResponse \n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  { \u0026#34;projects\u0026#34;: [ { \u0026#34;key\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;ticketTypes\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;string\u0026#34; } ] } ] }   Properties    Name Type Required Restrictions Description     projects [TicketTypesResponse_projects] false none none    inline_response_201 \n1 2 3 4 5  { \u0026#34;id\u0026#34;: \u0026#34;123456789\u0026#34;, \u0026#34;key\u0026#34;: \u0026#34;##-1234\u0026#34; }   Properties    Name Type Required Restrictions Description     id string false none none   key string false none none    inline_response_201_1 \n1 2 3 4  { \u0026#34;message\u0026#34;: \u0026#34;Attachment added successfully.\u0026#34; }   Properties    Name Type Required Restrictions Description     message string false none none    inline_response_201_2 \n1 2 3 4  { \u0026#34;message\u0026#34;: \u0026#34;Comment added successfully.\u0026#34; }   Properties    Name Type Required Restrictions Description     message string false none none    inline_response_201_3 \n1 2 3 4  { \u0026#34;message\u0026#34;: \u0026#34;Attachment with comment added successfully.\u0026#34; }   Properties    Name Type Required Restrictions Description     message string false none none    TicketResponse_attachment \n1 2 3 4 5 6  { \u0026#34;name\u0026#34;: \u0026#34;attachment.txt\u0026#34;, \u0026#34;data\u0026#34;: \u0026#34;SGVsbG8gd29ybGQgZnJvbSBNUywgY2hhbmdlZA==\u0026#34;, \u0026#34;mimeType\u0026#34;: \u0026#34;multipart/form-data\u0026#34; }   Properties    Name Type Required Restrictions Description     name string false none none   data string false none none   mimeType string false none none    CreationDataInfo_subscriptionNumber \n1 2 3 4 5  { \u0026#34;required\u0026#34;: true, \u0026#34;name\u0026#34;: \u0026#34;Suscripción\u0026#34; }   Properties    Name Type Required Restrictions Description     required boolean false none none   name string false none none    CreationDataInfo_icc \n1 2 3 4 5  { \u0026#34;required\u0026#34;: false, \u0026#34;name\u0026#34;: \u0026#34;ICC\u0026#34; }   Properties    Name Type Required Restrictions Description     required boolean false none none   name string false none none    CreationDataInfo_contactEmail \n1 2 3 4 5  { \u0026#34;required\u0026#34;: false, \u0026#34;name\u0026#34;: \u0026#34;Email del Cliente\u0026#34; }   Properties    Name Type Required Restrictions Description     required boolean false none none   name string false none none    EditableFields_description \n1 2 3 4 5  { \u0026#34;name\u0026#34;: \u0026#34;Descripción\u0026#34;, \u0026#34;required\u0026#34;: true }   Properties    Name Type Required Restrictions Description     name string false none none   required boolean false none none    EditableFields_customerPostalCode \n1 2 3 4 5  { \u0026#34;name\u0026#34;: \u0026#34;Código Postal\u0026#34;, \u0026#34;required\u0026#34;: false }   Properties    Name Type Required Restrictions Description     name string false none none   required boolean false none none    EditableFields_customerSegment_allowedValues \n1 2 3 4  { \u0026#34;value\u0026#34;: \u0026#34;string\u0026#34; }   Properties    Name Type Required Restrictions Description     value string false none none    EditableFields_customerSegment \n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  { \u0026#34;name\u0026#34;: \u0026#34;Segmento Cliente\u0026#34;, \u0026#34;required\u0026#34;: false, \u0026#34;allowedValues\u0026#34;: [ { \u0026#34;value\u0026#34;: \u0026#34;EMPRESA\u0026#34; }, { \u0026#34;value\u0026#34;: \u0026#34;RESIDENCIAL\u0026#34; }, { \u0026#34;value\u0026#34;: \u0026#34;HORECA\u0026#34; }, { \u0026#34;value\u0026#34;: \u0026#34;AUTONOMO\u0026#34; } ] }   Properties    Name Type Required Restrictions Description     name string false none none   required boolean false none none   allowedValues [EditableFields_customerSegment_allowedValues] false none none    TransitionsResponse_transitions \n1 2 3 4 5 6  { \u0026#34;id\u0026#34;: 0, \u0026#34;name\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;status\u0026#34;: \u0026#34;string\u0026#34; }   Properties    Name Type Required Restrictions Description     id integer false none none   name string false none none   status string false none none    TicketTypesResponse_ticketTypes \n1 2 3 4 5  { \u0026#34;name\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;string\u0026#34; }   Properties    Name Type Required Restrictions Description     name string false none none   description string false none none    TicketTypesResponse_projects \n1 2 3 4 5 6 7 8 9 10 11  { \u0026#34;key\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;ticketTypes\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;string\u0026#34; } ] }   Properties    Name Type Required Restrictions Description     key string false none none   name string false none none   ticketTypes [TicketTypesResponse_ticketTypes] false none none    ","description":"","id":24,"section":"docs","tags":null,"title":"MasMovil Ticketing API - Inbound (External Systems \u003e MasMovil)","uri":"/es/docs/apis/openapi/"},{"content":"Rakam API Documentation v1.0  Scroll down for code samples, example requests and responses. Select a language for code samples from the tabs above or the mobile navigation menu.\n An analytics platform API that lets you create your own analytics services.\nBase URLs:\n //https://app.getrakam.com/  Email: Support\nLicense: Apache License 2.0\nAuthentication   API Key (ui_read_key)\n Parameter Name: undefined, in: header.    API Key (read_key)\n Parameter Name: read_key, in: header.    API Key (ui_master_key)\n Parameter Name: undefined, in: header.    API Key (master_key)\n Parameter Name: master_key, in: header.    API Key (write_key)\n Parameter Name: undefined, in: header.    event-stream Event Stream Module\nRakam Documentation\nsubscribe \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;/https://app.getrakam.com/stream/subscribe\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;GET\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;GET\u0026#34;, \u0026#34;/https://app.getrakam.com/stream/subscribe\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   1 2 3 4 5 6 7 8 9 10  $.ajax({ url: \u0026#39;/https://app.getrakam.com/stream/subscribe\u0026#39;, method: \u0026#39;get\u0026#39;, success: function(data) { console.log(JSON.stringify(data)); } })   1 2  GET /https://app.getrakam.com/stream/subscribe HTTP/1.1   GET /stream/subscribe\nSubscribe Event Stream\nSubscribes the event stream periodically to the client.\nResponses    Status Meaning Description Schema     400 Bad Request Project does not exist. None    This operation does not require authentication  funnel Funnel Analyzer module\nRakam Documentation\nanalyze \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;/https://app.getrakam.com/funnel/analyze\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;GET\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Content-Type\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, \u0026#34;read_key\u0026#34;: []string{\u0026#34;API_KEY\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;GET\u0026#34;, \u0026#34;/https://app.getrakam.com/funnel/analyze\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  var headers = { \u0026#39;Content-Type\u0026#39;:\u0026#39;application/json\u0026#39;, \u0026#39;read_key\u0026#39;:\u0026#39;API_KEY\u0026#39; }; $.ajax({ url: \u0026#39;/https://app.getrakam.com/funnel/analyze\u0026#39;, method: \u0026#39;get\u0026#39;, headers: headers, success: function(data) { console.log(JSON.stringify(data)); } })   1 2 3 4  GET /https://app.getrakam.com/funnel/analyze HTTP/1.1 Content-Type: application/json   GET /funnel/analyze\nExecute query\n Body parameter\n 1 2 3 4 5 6 7 8 9 10 11 12 13  { \u0026#34;project\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;steps\u0026#34;: [ { \u0026#34;collection\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;filterExpression\u0026#34;: \u0026#34;string\u0026#34; } ], \u0026#34;dimension\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;startDate\u0026#34;: \u0026#34;2020-02-26\u0026#34;, \u0026#34;endDate\u0026#34;: \u0026#34;2020-02-26\u0026#34;, \u0026#34;enableOtherGrouping\u0026#34;: true }   Parameters    Name In Type Required Description     body body FunnelQuery true none    Responses    Status Meaning Description Schema     default Default successful operation None    To perform this operation, you must be authenticated by means of one of the following methods: read_key  retention Retention Analyzer module\nRakam Documentation\nexecute \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;/https://app.getrakam.com/retention/analyze\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;GET\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;read_key\u0026#34;: []string{\u0026#34;API_KEY\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;GET\u0026#34;, \u0026#34;/https://app.getrakam.com/retention/analyze\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  var headers = { \u0026#39;read_key\u0026#39;:\u0026#39;API_KEY\u0026#39; }; $.ajax({ url: \u0026#39;/https://app.getrakam.com/retention/analyze\u0026#39;, method: \u0026#39;get\u0026#39;, headers: headers, success: function(data) { console.log(JSON.stringify(data)); } })   1 2  GET /https://app.getrakam.com/retention/analyze HTTP/1.1   GET /retention/analyze\nExecute query\nResponses    Status Meaning Description Schema     default Default successful operation None    To perform this operation, you must be authenticated by means of one of the following methods: read_key  user User module for Rakam\nRakam Documentation\ncreate \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;/https://app.getrakam.com/user/create\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;POST\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Content-Type\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;POST\u0026#34;, \u0026#34;/https://app.getrakam.com/user/create\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  var headers = { \u0026#39;Content-Type\u0026#39;:\u0026#39;application/json\u0026#39;, \u0026#39;Accept\u0026#39;:\u0026#39;application/json\u0026#39; }; $.ajax({ url: \u0026#39;/https://app.getrakam.com/user/create\u0026#39;, method: \u0026#39;post\u0026#39;, headers: headers, success: function(data) { console.log(JSON.stringify(data)); } })   1 2 3 4 5  POST /https://app.getrakam.com/user/create HTTP/1.1 Content-Type: application/json Accept: application/json   POST /user/create\nCreate new user\n Body parameter\n 1 2 3 4 5 6 7  { \u0026#34;project\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;properties\u0026#34;: { \u0026#34;property1\u0026#34;: {}, \u0026#34;property2\u0026#34;: {} } }   Parameters    Name In Type Required Description     body body UserHttpService_create true none     Example responses\n  200 Response\n 1 2 3  { \u0026#34;identifier\u0026#34;: {} }   Responses    Status Meaning Description Schema     200 OK successful operation CreateUserResponse   400 Bad Request Project does not exist. None    This operation does not require authentication  getUser \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;/https://app.getrakam.com/user/get\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;POST\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Content-Type\u0026#34;: []string{\u0026#34;application/x-www-form-urlencoded\u0026#34;}, \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;POST\u0026#34;, \u0026#34;/https://app.getrakam.com/user/get\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  var headers = { \u0026#39;Content-Type\u0026#39;:\u0026#39;application/x-www-form-urlencoded\u0026#39;, \u0026#39;Accept\u0026#39;:\u0026#39;application/json\u0026#39; }; $.ajax({ url: \u0026#39;/https://app.getrakam.com/user/get\u0026#39;, method: \u0026#39;post\u0026#39;, headers: headers, success: function(data) { console.log(JSON.stringify(data)); } })   1 2 3 4 5  POST /https://app.getrakam.com/user/get HTTP/1.1 Content-Type: application/x-www-form-urlencoded Accept: application/json   POST /user/get\nGet user\n Body parameter\n 1 2 3  project:stringuser:string  Parameters    Name In Type Required Description     body body object false none   » project body string false none   » user body string false none     Example responses\n  200 Response\n 1 2 3 4 5 6 7 8  { \u0026#34;project\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;id\u0026#34;: {}, \u0026#34;properties\u0026#34;: { \u0026#34;property1\u0026#34;: {}, \u0026#34;property2\u0026#34;: {} } }   Responses    Status Meaning Description Schema     200 OK successful operation User   400 Bad Request User does not exist. None    This operation does not require authentication  getEvents \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;/https://app.getrakam.com/user/get_events\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;POST\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Content-Type\u0026#34;: []string{\u0026#34;application/x-www-form-urlencoded\u0026#34;}, \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;POST\u0026#34;, \u0026#34;/https://app.getrakam.com/user/get_events\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  var headers = { \u0026#39;Content-Type\u0026#39;:\u0026#39;application/x-www-form-urlencoded\u0026#39;, \u0026#39;Accept\u0026#39;:\u0026#39;application/json\u0026#39; }; $.ajax({ url: \u0026#39;/https://app.getrakam.com/user/get_events\u0026#39;, method: \u0026#39;post\u0026#39;, headers: headers, success: function(data) { console.log(JSON.stringify(data)); } })   1 2 3 4 5  POST /https://app.getrakam.com/user/get_events HTTP/1.1 Content-Type: application/x-www-form-urlencoded Accept: application/json   POST /user/get_events\nGet events of the user\n Body parameter\n 1 2 3 4 5  project:stringuser:stringlimit:0offset:0  Parameters    Name In Type Required Description     body body object false none   » project body string false none   » user body string false none   » limit body integer(int32) false none   » offset body integer(int64) false none     Example responses\n  200 Response\n 1 2 3  [ {} ]   Responses    Status Meaning Description Schema     200 OK successful operation Inline   400 Bad Request User does not exist. None    Response Schema This operation does not require authentication  metadata \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;/https://app.getrakam.com/user/metadata\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;POST\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Content-Type\u0026#34;: []string{\u0026#34;application/x-www-form-urlencoded\u0026#34;}, \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;POST\u0026#34;, \u0026#34;/https://app.getrakam.com/user/metadata\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  var headers = { \u0026#39;Content-Type\u0026#39;:\u0026#39;application/x-www-form-urlencoded\u0026#39;, \u0026#39;Accept\u0026#39;:\u0026#39;application/json\u0026#39; }; $.ajax({ url: \u0026#39;/https://app.getrakam.com/user/metadata\u0026#39;, method: \u0026#39;post\u0026#39;, headers: headers, success: function(data) { console.log(JSON.stringify(data)); } })   1 2 3 4 5  POST /https://app.getrakam.com/user/metadata HTTP/1.1 Content-Type: application/x-www-form-urlencoded Accept: application/json   POST /user/metadata\nGet user storage metadata\n Body parameter\n 1 2  project:string  Parameters    Name In Type Required Description     body body listQueries false none   » project body string false none     Example responses\n  200 Response\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  { \u0026#34;columns\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;STRING\u0026#34;, \u0026#34;nullable\u0026#34;: false, \u0026#34;unique\u0026#34;: false, \u0026#34;descriptiveName\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;category\u0026#34;: \u0026#34;string\u0026#34; } ], \u0026#34;identifierColumn\u0026#34;: \u0026#34;string\u0026#34; }   Responses    Status Meaning Description Schema     200 OK successful operation MetadataResponse   400 Bad Request Project does not exist. None    This operation does not require authentication  search \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;/https://app.getrakam.com/user/search\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;POST\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Content-Type\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;POST\u0026#34;, \u0026#34;/https://app.getrakam.com/user/search\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  var headers = { \u0026#39;Content-Type\u0026#39;:\u0026#39;application/json\u0026#39;, \u0026#39;Accept\u0026#39;:\u0026#39;application/json\u0026#39; }; $.ajax({ url: \u0026#39;/https://app.getrakam.com/user/search\u0026#39;, method: \u0026#39;post\u0026#39;, headers: headers, success: function(data) { console.log(JSON.stringify(data)); } })   1 2 3 4 5  POST /https://app.getrakam.com/user/search HTTP/1.1 Content-Type: application/json Accept: application/json   POST /user/search\nSearch users\n Body parameter\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22  { \u0026#34;project\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;filter\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;event_filters\u0026#34;: [ { \u0026#34;collection\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;aggregation\u0026#34;: { \u0026#34;field\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;minimum\u0026#34;: 0, \u0026#34;maximum\u0026#34;: 0, \u0026#34;type\u0026#34;: \u0026#34;COUNT\u0026#34; }, \u0026#34;filterExpression\u0026#34;: \u0026#34;string\u0026#34; } ], \u0026#34;sorting\u0026#34;: { \u0026#34;column\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;order\u0026#34;: \u0026#34;asc\u0026#34; }, \u0026#34;offset\u0026#34;: 0, \u0026#34;limit\u0026#34;: 0 }   Parameters    Name In Type Required Description     body body UserHttpService_search true none     Example responses\n  200 Response\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28  { \u0026#34;metadata\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;STRING\u0026#34;, \u0026#34;nullable\u0026#34;: false, \u0026#34;unique\u0026#34;: false, \u0026#34;descriptiveName\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;category\u0026#34;: \u0026#34;string\u0026#34; } ], \u0026#34;result\u0026#34;: [ [ {} ] ], \u0026#34;error\u0026#34;: { \u0026#34;message\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;sqlState\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;errorCode\u0026#34;: 0 }, \u0026#34;properties\u0026#34;: { \u0026#34;property1\u0026#34;: {}, \u0026#34;property2\u0026#34;: {} }, \u0026#34;failed\u0026#34;: false }   Responses    Status Meaning Description Schema     200 OK successful operation QueryResult   400 Bad Request Project does not exist. None    This operation does not require authentication  setUserProperty \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;/https://app.getrakam.com/user/set_property\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;POST\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Content-Type\u0026#34;: []string{\u0026#34;application/x-www-form-urlencoded\u0026#34;}, \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;POST\u0026#34;, \u0026#34;/https://app.getrakam.com/user/set_property\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  var headers = { \u0026#39;Content-Type\u0026#39;:\u0026#39;application/x-www-form-urlencoded\u0026#39;, \u0026#39;Accept\u0026#39;:\u0026#39;application/json\u0026#39; }; $.ajax({ url: \u0026#39;/https://app.getrakam.com/user/set_property\u0026#39;, method: \u0026#39;post\u0026#39;, headers: headers, success: function(data) { console.log(JSON.stringify(data)); } })   1 2 3 4 5  POST /https://app.getrakam.com/user/set_property HTTP/1.1 Content-Type: application/x-www-form-urlencoded Accept: application/json   POST /user/set_property\nSet user property\n Body parameter\n 1 2 3 4 5  project:stringuser:stringproperty:stringvalue:string  Parameters    Name In Type Required Description     body body object false none   » project body string false none   » user body string false none   » property body string false none   » value body string false none     Example responses\n  200 Response\n 1 2 3 4  { \u0026#34;success\u0026#34;: false, \u0026#34;message\u0026#34;: \u0026#34;string\u0026#34; }   Responses    Status Meaning Description Schema     200 OK successful operation JsonResponse   400 Bad Request User does not exist. None    This operation does not require authentication  user-mailbox Rakam Documentation\nget \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;/https://app.getrakam.com/user/mailbox/get\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;POST\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Content-Type\u0026#34;: []string{\u0026#34;application/x-www-form-urlencoded\u0026#34;}, \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, \u0026#34;read_key\u0026#34;: []string{\u0026#34;API_KEY\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;POST\u0026#34;, \u0026#34;/https://app.getrakam.com/user/mailbox/get\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  var headers = { \u0026#39;Content-Type\u0026#39;:\u0026#39;application/x-www-form-urlencoded\u0026#39;, \u0026#39;Accept\u0026#39;:\u0026#39;application/json\u0026#39;, \u0026#39;read_key\u0026#39;:\u0026#39;API_KEY\u0026#39; }; $.ajax({ url: \u0026#39;/https://app.getrakam.com/user/mailbox/get\u0026#39;, method: \u0026#39;post\u0026#39;, headers: headers, success: function(data) { console.log(JSON.stringify(data)); } })   1 2 3 4 5  POST /https://app.getrakam.com/user/mailbox/get HTTP/1.1 Content-Type: application/x-www-form-urlencoded Accept: application/json   POST /user/mailbox/get\nGet user mailbox\nReturns the last mails sent to the user\n Body parameter\n 1 2 3 4 5 6  project:stringuser:stringparent:0limit:0offset:0  Parameters    Name In Type Required Description     body body object false none   » project body string false none   » user body string false none   » parent body integer(int32) false none   » limit body integer(int32) false none   » offset body integer(int64) false none     Example responses\n  200 Response\n 1 2 3 4 5 6 7 8 9 10 11 12  [ { \u0026#34;id\u0026#34;: 0, \u0026#34;content\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;from_user\u0026#34;: {}, \u0026#34;to_user\u0026#34;: {}, \u0026#34;parentId\u0026#34;: 0, \u0026#34;seen\u0026#34;: false, \u0026#34;time\u0026#34;: 0, \u0026#34;project\u0026#34;: \u0026#34;string\u0026#34; } ]   Responses    Status Meaning Description Schema     200 OK successful operation Inline   400 Bad Request Project does not exist. None   404 Not Found User does not exist. None    Response Schema Status Code 200\n   Name Type Required Restrictions Description     anonymous [Message] false none none   » id integer(int32) false none none   » content string false none none   » from_user object false none none   » to_user object false none none   » parentId integer(int32) false none none   » seen boolean false none none   » time integer(int64) false none none   » project string false none none    To perform this operation, you must be authenticated by means of one of the following methods: read_key  getConnectedUsers \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;/https://app.getrakam.com/user/mailbox/getOnlineUsers\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;POST\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Content-Type\u0026#34;: []string{\u0026#34;application/x-www-form-urlencoded\u0026#34;}, \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, \u0026#34;read_key\u0026#34;: []string{\u0026#34;API_KEY\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;POST\u0026#34;, \u0026#34;/https://app.getrakam.com/user/mailbox/getOnlineUsers\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  var headers = { \u0026#39;Content-Type\u0026#39;:\u0026#39;application/x-www-form-urlencoded\u0026#39;, \u0026#39;Accept\u0026#39;:\u0026#39;application/json\u0026#39;, \u0026#39;read_key\u0026#39;:\u0026#39;API_KEY\u0026#39; }; $.ajax({ url: \u0026#39;/https://app.getrakam.com/user/mailbox/getOnlineUsers\u0026#39;, method: \u0026#39;post\u0026#39;, headers: headers, success: function(data) { console.log(JSON.stringify(data)); } })   1 2 3 4 5  POST /https://app.getrakam.com/user/mailbox/getOnlineUsers HTTP/1.1 Content-Type: application/x-www-form-urlencoded Accept: application/json   POST /user/mailbox/getOnlineUsers\nGet connected users\n Body parameter\n 1 2  project:string  Parameters    Name In Type Required Description     body body listQueries false none   » project body string false none     Example responses\n  200 Response\n 1 2 3  [ {} ]   Responses    Status Meaning Description Schema     200 OK successful operation Inline   400 Bad Request Project does not exist. None    Response Schema To perform this operation, you must be authenticated by means of one of the following methods: read_key  listen \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;/https://app.getrakam.com/user/mailbox/listen\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;GET\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;read_key\u0026#34;: []string{\u0026#34;API_KEY\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;GET\u0026#34;, \u0026#34;/https://app.getrakam.com/user/mailbox/listen\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  var headers = { \u0026#39;read_key\u0026#39;:\u0026#39;API_KEY\u0026#39; }; $.ajax({ url: \u0026#39;/https://app.getrakam.com/user/mailbox/listen\u0026#39;, method: \u0026#39;get\u0026#39;, headers: headers, success: function(data) { console.log(JSON.stringify(data)); } })   1 2  GET /https://app.getrakam.com/user/mailbox/listen HTTP/1.1   GET /user/mailbox/listen\nListen all mailboxes\nParameters    Name In Type Required Description     project query string false none    Responses    Status Meaning Description Schema     default Default successful operation None    To perform this operation, you must be authenticated by means of one of the following methods: read_key  markAsRead \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;/https://app.getrakam.com/user/mailbox/mark_as_read\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;POST\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Content-Type\u0026#34;: []string{\u0026#34;application/x-www-form-urlencoded\u0026#34;}, \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, \u0026#34;undefined\u0026#34;: []string{\u0026#34;API_KEY\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;POST\u0026#34;, \u0026#34;/https://app.getrakam.com/user/mailbox/mark_as_read\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  var headers = { \u0026#39;Content-Type\u0026#39;:\u0026#39;application/x-www-form-urlencoded\u0026#39;, \u0026#39;Accept\u0026#39;:\u0026#39;application/json\u0026#39;, \u0026#39;undefined\u0026#39;:\u0026#39;API_KEY\u0026#39; }; $.ajax({ url: \u0026#39;/https://app.getrakam.com/user/mailbox/mark_as_read\u0026#39;, method: \u0026#39;post\u0026#39;, headers: headers, success: function(data) { console.log(JSON.stringify(data)); } })   1 2 3 4 5  POST /https://app.getrakam.com/user/mailbox/mark_as_read HTTP/1.1 Content-Type: application/x-www-form-urlencoded Accept: application/json   POST /user/mailbox/mark_as_read\nMark mail as read\nMarks the specified mails as read.\n Body parameter\n 1 2 3 4 5  project:stringuser:stringmessage_ids:- 0  Parameters    Name In Type Required Description     body body object false none   » project body string false none   » user body string false none   » message_ids body [integer] false none     Example responses\n  200 Response\n 1 2 3 4  { \u0026#34;success\u0026#34;: false, \u0026#34;message\u0026#34;: \u0026#34;string\u0026#34; }   Responses    Status Meaning Description Schema     200 OK successful operation JsonResponse   400 Bad Request Project does not exist. None   404 Not Found User does not exist. None    To perform this operation, you must be authenticated by means of one of the following methods: write_key  send \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;/https://app.getrakam.com/user/mailbox/send\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;POST\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Content-Type\u0026#34;: []string{\u0026#34;application/x-www-form-urlencoded\u0026#34;}, \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, \u0026#34;undefined\u0026#34;: []string{\u0026#34;API_KEY\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;POST\u0026#34;, \u0026#34;/https://app.getrakam.com/user/mailbox/send\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  var headers = { \u0026#39;Content-Type\u0026#39;:\u0026#39;application/x-www-form-urlencoded\u0026#39;, \u0026#39;Accept\u0026#39;:\u0026#39;application/json\u0026#39;, \u0026#39;undefined\u0026#39;:\u0026#39;API_KEY\u0026#39; }; $.ajax({ url: \u0026#39;/https://app.getrakam.com/user/mailbox/send\u0026#39;, method: \u0026#39;post\u0026#39;, headers: headers, success: function(data) { console.log(JSON.stringify(data)); } })   1 2 3 4 5  POST /https://app.getrakam.com/user/mailbox/send HTTP/1.1 Content-Type: application/x-www-form-urlencoded Accept: application/json   POST /user/mailbox/send\nSend mail to user\nSends a mail to users mailbox\n Body parameter\n 1 2 3 4 5 6 7  project:stringfrom_user:stringto_user:stringparent:0message:stringtimestamp:0  Parameters    Name In Type Required Description     body body object false none   » project body string false none   » from_user body string false none   » to_user body string false none   » parent body integer(int32) false none   » message body string false none   » timestamp body integer(int64) false none     Example responses\n  200 Response\n 1 2 3 4 5 6 7 8 9 10  { \u0026#34;id\u0026#34;: 0, \u0026#34;content\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;from_user\u0026#34;: {}, \u0026#34;to_user\u0026#34;: {}, \u0026#34;parentId\u0026#34;: 0, \u0026#34;seen\u0026#34;: false, \u0026#34;time\u0026#34;: 0, \u0026#34;project\u0026#34;: \u0026#34;string\u0026#34; }   Responses    Status Meaning Description Schema     200 OK successful operation Message   400 Bad Request Project does not exist. None   404 Not Found User does not exist. None    To perform this operation, you must be authenticated by means of one of the following methods: write_key  realtime Rakam Documentation\ncreate \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;/https://app.getrakam.com/realtime/create\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;POST\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Content-Type\u0026#34;: []string{\u0026#34;application/x-www-form-urlencoded\u0026#34;}, \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, \u0026#34;read_key\u0026#34;: []string{\u0026#34;API_KEY\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;POST\u0026#34;, \u0026#34;/https://app.getrakam.com/realtime/create\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  var headers = { \u0026#39;Content-Type\u0026#39;:\u0026#39;application/x-www-form-urlencoded\u0026#39;, \u0026#39;Accept\u0026#39;:\u0026#39;application/json\u0026#39;, \u0026#39;read_key\u0026#39;:\u0026#39;API_KEY\u0026#39; }; $.ajax({ url: \u0026#39;/https://app.getrakam.com/realtime/create\u0026#39;, method: \u0026#39;post\u0026#39;, headers: headers, success: function(data) { console.log(JSON.stringify(data)); } })   1 2 3 4 5  POST /https://app.getrakam.com/realtime/create HTTP/1.1 Content-Type: application/x-www-form-urlencoded Accept: application/json   POST /realtime/create\nCreate report\n Body parameter\n 1 2 3 4 5 6 7 8 9 10 11  project:stringname:stringchart:stringcollections:- stringaggregation:stringtable_name:stringfilter:stringmeasure:stringdimension:string  Parameters    Name In Type Required Description     body body object false none   » project body string false none   » name body string false none   » chart body string false none   » collections body [string] false none   » aggregation body string false none   » table_name body string false none   » filter body string false none   » measure body string false none   » dimension body string false none     Example responses\n  200 Response\n 1 2 3 4  { \u0026#34;success\u0026#34;: false, \u0026#34;message\u0026#34;: \u0026#34;string\u0026#34; }   Responses    Status Meaning Description Schema     200 OK successful operation JsonResponse   400 Bad Request Project does not exist. None    To perform this operation, you must be authenticated by means of one of the following methods: read_key  delete \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;/https://app.getrakam.com/realtime/delete\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;POST\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Content-Type\u0026#34;: []string{\u0026#34;application/x-www-form-urlencoded\u0026#34;}, \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, \u0026#34;read_key\u0026#34;: []string{\u0026#34;API_KEY\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;POST\u0026#34;, \u0026#34;/https://app.getrakam.com/realtime/delete\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  var headers = { \u0026#39;Content-Type\u0026#39;:\u0026#39;application/x-www-form-urlencoded\u0026#39;, \u0026#39;Accept\u0026#39;:\u0026#39;application/json\u0026#39;, \u0026#39;read_key\u0026#39;:\u0026#39;API_KEY\u0026#39; }; $.ajax({ url: \u0026#39;/https://app.getrakam.com/realtime/delete\u0026#39;, method: \u0026#39;post\u0026#39;, headers: headers, success: function(data) { console.log(JSON.stringify(data)); } })   1 2 3 4 5  POST /https://app.getrakam.com/realtime/delete HTTP/1.1 Content-Type: application/x-www-form-urlencoded Accept: application/json   POST /realtime/delete\nDelete report\n Body parameter\n 1 2 3  project:stringname:string  Parameters    Name In Type Required Description     body body delete false none   » project body string false none   » name body string false none     Example responses\n  200 Response\n 1  {}   Responses    Status Meaning Description Schema     200 OK successful operation Inline    Response Schema To perform this operation, you must be authenticated by means of one of the following methods: read_key  get \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;/https://app.getrakam.com/realtime/get\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;POST\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Content-Type\u0026#34;: []string{\u0026#34;application/x-www-form-urlencoded\u0026#34;}, \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, \u0026#34;read_key\u0026#34;: []string{\u0026#34;API_KEY\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;POST\u0026#34;, \u0026#34;/https://app.getrakam.com/realtime/get\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  var headers = { \u0026#39;Content-Type\u0026#39;:\u0026#39;application/x-www-form-urlencoded\u0026#39;, \u0026#39;Accept\u0026#39;:\u0026#39;application/json\u0026#39;, \u0026#39;read_key\u0026#39;:\u0026#39;API_KEY\u0026#39; }; $.ajax({ url: \u0026#39;/https://app.getrakam.com/realtime/get\u0026#39;, method: \u0026#39;post\u0026#39;, headers: headers, success: function(data) { console.log(JSON.stringify(data)); } })   1 2 3 4 5  POST /https://app.getrakam.com/realtime/get HTTP/1.1 Content-Type: application/x-www-form-urlencoded Accept: application/json   POST /realtime/get\nGet report\n Body parameter\n 1 2 3 4 5 6 7  project:stringtable_name:stringfilter:stringaggregate:truedate_start:\u0026#39;2020-02-26T14:50:19Z\u0026#39;date_end:\u0026#39;2020-02-26T14:50:19Z\u0026#39;  Parameters    Name In Type Required Description     body body object false none   » project body string false none   » table_name body string false none   » filter body string false none   » aggregate body boolean false none   » date_start body string(date-time) false none   » date_end body string(date-time) false none     Example responses\n  200 Response\n 1  {}   Responses    Status Meaning Description Schema     200 OK successful operation Inline   400 Bad Request Report does not exist. None    Response Schema To perform this operation, you must be authenticated by means of one of the following methods: read_key  listReports \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;/https://app.getrakam.com/realtime/list\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;POST\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Content-Type\u0026#34;: []string{\u0026#34;application/x-www-form-urlencoded\u0026#34;}, \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, \u0026#34;read_key\u0026#34;: []string{\u0026#34;API_KEY\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;POST\u0026#34;, \u0026#34;/https://app.getrakam.com/realtime/list\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  var headers = { \u0026#39;Content-Type\u0026#39;:\u0026#39;application/x-www-form-urlencoded\u0026#39;, \u0026#39;Accept\u0026#39;:\u0026#39;application/json\u0026#39;, \u0026#39;read_key\u0026#39;:\u0026#39;API_KEY\u0026#39; }; $.ajax({ url: \u0026#39;/https://app.getrakam.com/realtime/list\u0026#39;, method: \u0026#39;post\u0026#39;, headers: headers, success: function(data) { console.log(JSON.stringify(data)); } })   1 2 3 4 5  POST /https://app.getrakam.com/realtime/list HTTP/1.1 Content-Type: application/x-www-form-urlencoded Accept: application/json   POST /realtime/list\nList reports\n Body parameter\n 1 2  project:string  Parameters    Name In Type Required Description     body body listQueries false none   » project body string false none     Example responses\n  200 Response\n 1 2 3  [ {} ]   Responses    Status Meaning Description Schema     200 OK successful operation Inline    Response Schema To perform this operation, you must be authenticated by means of one of the following methods: read_key  admin System related actions\nRakam Documentation\ngetModules \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;/https://app.getrakam.com/admin/modules\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;GET\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, \u0026#34;master_key\u0026#34;: []string{\u0026#34;API_KEY\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;GET\u0026#34;, \u0026#34;/https://app.getrakam.com/admin/modules\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  var headers = { \u0026#39;Accept\u0026#39;:\u0026#39;application/json\u0026#39;, \u0026#39;master_key\u0026#39;:\u0026#39;API_KEY\u0026#39; }; $.ajax({ url: \u0026#39;/https://app.getrakam.com/admin/modules\u0026#39;, method: \u0026#39;get\u0026#39;, headers: headers, success: function(data) { console.log(JSON.stringify(data)); } })   1 2 3 4  GET /https://app.getrakam.com/admin/modules HTTP/1.1 Accept: application/json   GET /admin/modules\nList installed modules\n Example responses\n  200 Response\n 1 2 3  [ {} ]   Responses    Status Meaning Description Schema     200 OK successful operation Inline    Response Schema To perform this operation, you must be authenticated by means of one of the following methods: master_key  event Event Analyzer\nRakam Documentation\ncollect \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;/https://app.getrakam.com/event/collect\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;POST\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Content-Type\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, \u0026#34;undefined\u0026#34;: []string{\u0026#34;API_KEY\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;POST\u0026#34;, \u0026#34;/https://app.getrakam.com/event/collect\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  var headers = { \u0026#39;Content-Type\u0026#39;:\u0026#39;application/json\u0026#39;, \u0026#39;undefined\u0026#39;:\u0026#39;API_KEY\u0026#39; }; $.ajax({ url: \u0026#39;/https://app.getrakam.com/event/collect\u0026#39;, method: \u0026#39;post\u0026#39;, headers: headers, success: function(data) { console.log(JSON.stringify(data)); } })   1 2 3 4  POST /https://app.getrakam.com/event/collect HTTP/1.1 Content-Type: application/json   POST /event/collect\nCollect event\n Body parameter\n 1 2 3 4 5  { \u0026#34;project\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;collection\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;properties\u0026#34;: {} }   Parameters    Name In Type Required Description     body body org.rakam.collection.event.EventCollectionHttpService.collect false none    Responses    Status Meaning Description Schema     400 Bad Request Project does not exist. None    To perform this operation, you must be authenticated by means of one of the following methods: write_key  execute \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;/https://app.getrakam.com/query/execute\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;POST\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Content-Type\u0026#34;: []string{\u0026#34;application/x-www-form-urlencoded\u0026#34;}, \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, \u0026#34;read_key\u0026#34;: []string{\u0026#34;API_KEY\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;POST\u0026#34;, \u0026#34;/https://app.getrakam.com/query/execute\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  var headers = { \u0026#39;Content-Type\u0026#39;:\u0026#39;application/x-www-form-urlencoded\u0026#39;, \u0026#39;Accept\u0026#39;:\u0026#39;application/json\u0026#39;, \u0026#39;read_key\u0026#39;:\u0026#39;API_KEY\u0026#39; }; $.ajax({ url: \u0026#39;/https://app.getrakam.com/query/execute\u0026#39;, method: \u0026#39;post\u0026#39;, headers: headers, success: function(data) { console.log(JSON.stringify(data)); } })   1 2 3 4 5  POST /https://app.getrakam.com/query/execute HTTP/1.1 Content-Type: application/x-www-form-urlencoded Accept: application/json   POST /query/execute\nAnalyze events\n Body parameter\n 1 2 3 4  project:stringquery:stringlimit:0  Parameters    Name In Type Required Description     body body execute false none   » project body string false none   » query body string false none   » limit body integer(int32) false none     Example responses\n  200 Response\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28  { \u0026#34;metadata\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;STRING\u0026#34;, \u0026#34;nullable\u0026#34;: false, \u0026#34;unique\u0026#34;: false, \u0026#34;descriptiveName\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;category\u0026#34;: \u0026#34;string\u0026#34; } ], \u0026#34;result\u0026#34;: [ [ {} ] ], \u0026#34;error\u0026#34;: { \u0026#34;message\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;sqlState\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;errorCode\u0026#34;: 0 }, \u0026#34;properties\u0026#34;: { \u0026#34;property1\u0026#34;: {}, \u0026#34;property2\u0026#34;: {} }, \u0026#34;failed\u0026#34;: false }   Responses    Status Meaning Description Schema     200 OK successful operation QueryResult    To perform this operation, you must be authenticated by means of one of the following methods: read_key  materialized-view Materialized view\nRakam Documentation\ncreate \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;/https://app.getrakam.com/materialized-view/create\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;POST\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Content-Type\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;POST\u0026#34;, \u0026#34;/https://app.getrakam.com/materialized-view/create\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  var headers = { \u0026#39;Content-Type\u0026#39;:\u0026#39;application/json\u0026#39;, \u0026#39;Accept\u0026#39;:\u0026#39;application/json\u0026#39; }; $.ajax({ url: \u0026#39;/https://app.getrakam.com/materialized-view/create\u0026#39;, method: \u0026#39;post\u0026#39;, headers: headers, success: function(data) { console.log(JSON.stringify(data)); } })   1 2 3 4 5  POST /https://app.getrakam.com/materialized-view/create HTTP/1.1 Content-Type: application/json Accept: application/json   POST /materialized-view/create\nCreate view\n Body parameter\n 1 2 3 4 5 6 7 8 9 10 11  { \u0026#34;project\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;table_name\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;query\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;update_interval\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;options\u0026#34;: { \u0026#34;property1\u0026#34;: {}, \u0026#34;property2\u0026#34;: {} } }   Parameters    Name In Type Required Description     body body MaterializedView true none     Example responses\n  200 Response\n 1 2 3 4  { \u0026#34;success\u0026#34;: false, \u0026#34;message\u0026#34;: \u0026#34;string\u0026#34; }   Responses    Status Meaning Description Schema     200 OK successful operation JsonResponse   400 Bad Request Project does not exist. None    This operation does not require authentication  delete \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;/https://app.getrakam.com/materialized-view/delete\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;POST\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Content-Type\u0026#34;: []string{\u0026#34;application/x-www-form-urlencoded\u0026#34;}, \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;POST\u0026#34;, \u0026#34;/https://app.getrakam.com/materialized-view/delete\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  var headers = { \u0026#39;Content-Type\u0026#39;:\u0026#39;application/x-www-form-urlencoded\u0026#39;, \u0026#39;Accept\u0026#39;:\u0026#39;application/json\u0026#39; }; $.ajax({ url: \u0026#39;/https://app.getrakam.com/materialized-view/delete\u0026#39;, method: \u0026#39;post\u0026#39;, headers: headers, success: function(data) { console.log(JSON.stringify(data)); } })   1 2 3 4 5  POST /https://app.getrakam.com/materialized-view/delete HTTP/1.1 Content-Type: application/x-www-form-urlencoded Accept: application/json   POST /materialized-view/delete\nDelete materialized view\n Body parameter\n 1 2 3  project:stringname:string  Parameters    Name In Type Required Description     body body delete false none   » project body string false none   » name body string false none     Example responses\n  200 Response\n 1 2 3 4  { \u0026#34;success\u0026#34;: false, \u0026#34;message\u0026#34;: \u0026#34;string\u0026#34; }   Responses    Status Meaning Description Schema     200 OK successful operation JsonResponse   400 Bad Request Project does not exist. None    This operation does not require authentication  get \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;/https://app.getrakam.com/materialized-view/get\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;POST\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Content-Type\u0026#34;: []string{\u0026#34;application/x-www-form-urlencoded\u0026#34;}, \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;POST\u0026#34;, \u0026#34;/https://app.getrakam.com/materialized-view/get\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  var headers = { \u0026#39;Content-Type\u0026#39;:\u0026#39;application/x-www-form-urlencoded\u0026#39;, \u0026#39;Accept\u0026#39;:\u0026#39;application/json\u0026#39; }; $.ajax({ url: \u0026#39;/https://app.getrakam.com/materialized-view/get\u0026#39;, method: \u0026#39;post\u0026#39;, headers: headers, success: function(data) { console.log(JSON.stringify(data)); } })   1 2 3 4 5  POST /https://app.getrakam.com/materialized-view/get HTTP/1.1 Content-Type: application/x-www-form-urlencoded Accept: application/json   POST /materialized-view/get\nGet view\n Body parameter\n 1 2 3  project:stringname:string  Parameters    Name In Type Required Description     body body delete false none   » project body string false none   » name body string false none     Example responses\n  200 Response\n 1  {}   Responses    Status Meaning Description Schema     200 OK successful operation Inline   400 Bad Request Project does not exist. None    Response Schema This operation does not require authentication  listViews \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;/https://app.getrakam.com/materialized-view/list\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;POST\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Content-Type\u0026#34;: []string{\u0026#34;application/x-www-form-urlencoded\u0026#34;}, \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;POST\u0026#34;, \u0026#34;/https://app.getrakam.com/materialized-view/list\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  var headers = { \u0026#39;Content-Type\u0026#39;:\u0026#39;application/x-www-form-urlencoded\u0026#39;, \u0026#39;Accept\u0026#39;:\u0026#39;application/json\u0026#39; }; $.ajax({ url: \u0026#39;/https://app.getrakam.com/materialized-view/list\u0026#39;, method: \u0026#39;post\u0026#39;, headers: headers, success: function(data) { console.log(JSON.stringify(data)); } })   1 2 3 4 5  POST /https://app.getrakam.com/materialized-view/list HTTP/1.1 Content-Type: application/x-www-form-urlencoded Accept: application/json   POST /materialized-view/list\nList views\n Body parameter\n 1 2  project:string  Parameters    Name In Type Required Description     body body listQueries false none   » project body string false none     Example responses\n  200 Response\n 1  {}   Responses    Status Meaning Description Schema     200 OK successful operation Inline   400 Bad Request Project does not exist. None    Response Schema This operation does not require authentication  schema \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;/https://app.getrakam.com/materialized-view/schema\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;POST\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Content-Type\u0026#34;: []string{\u0026#34;application/x-www-form-urlencoded\u0026#34;}, \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;POST\u0026#34;, \u0026#34;/https://app.getrakam.com/materialized-view/schema\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  var headers = { \u0026#39;Content-Type\u0026#39;:\u0026#39;application/x-www-form-urlencoded\u0026#39;, \u0026#39;Accept\u0026#39;:\u0026#39;application/json\u0026#39; }; $.ajax({ url: \u0026#39;/https://app.getrakam.com/materialized-view/schema\u0026#39;, method: \u0026#39;post\u0026#39;, headers: headers, success: function(data) { console.log(JSON.stringify(data)); } })   1 2 3 4 5  POST /https://app.getrakam.com/materialized-view/schema HTTP/1.1 Content-Type: application/x-www-form-urlencoded Accept: application/json   POST /materialized-view/schema\nGet schemas\n Body parameter\n 1 2  project:string  Parameters    Name In Type Required Description     body body listQueries false none   » project body string false none     Example responses\n  200 Response\n 1 2 3  [ {} ]   Responses    Status Meaning Description Schema     200 OK successful operation Inline   400 Bad Request Project does not exist. None    Response Schema This operation does not require authentication  update \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;/https://app.getrakam.com/materialized-view/update\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;GET\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;GET\u0026#34;, \u0026#34;/https://app.getrakam.com/materialized-view/update\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   1 2 3 4 5 6 7 8 9 10  $.ajax({ url: \u0026#39;/https://app.getrakam.com/materialized-view/update\u0026#39;, method: \u0026#39;get\u0026#39;, success: function(data) { console.log(JSON.stringify(data)); } })   1 2  GET /https://app.getrakam.com/materialized-view/update HTTP/1.1   GET /materialized-view/update\nUpdate view\nResponses    Status Meaning Description Schema     400 Bad Request Project does not exist. None    This operation does not require authentication  continuous-query Continuous query\nRakam Documentation\ncreate \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;/https://app.getrakam.com/continuous-query/create\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;POST\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Content-Type\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;POST\u0026#34;, \u0026#34;/https://app.getrakam.com/continuous-query/create\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  var headers = { \u0026#39;Content-Type\u0026#39;:\u0026#39;application/json\u0026#39;, \u0026#39;Accept\u0026#39;:\u0026#39;application/json\u0026#39; }; $.ajax({ url: \u0026#39;/https://app.getrakam.com/continuous-query/create\u0026#39;, method: \u0026#39;post\u0026#39;, headers: headers, success: function(data) { console.log(JSON.stringify(data)); } })   1 2 3 4 5  POST /https://app.getrakam.com/continuous-query/create HTTP/1.1 Content-Type: application/json Accept: application/json   POST /continuous-query/create\nCreate stream\n Body parameter\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  { \u0026#34;project\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;query\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;table_name\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;collections\u0026#34;: [ \u0026#34;string\u0026#34; ], \u0026#34;partition_keys\u0026#34;: [ \u0026#34;string\u0026#34; ], \u0026#34;options\u0026#34;: { \u0026#34;property1\u0026#34;: {}, \u0026#34;property2\u0026#34;: {} } }   Parameters    Name In Type Required Description     body body ContinuousQuery true none     Example responses\n  200 Response\n 1 2 3 4  { \u0026#34;success\u0026#34;: false, \u0026#34;message\u0026#34;: \u0026#34;string\u0026#34; }   Responses    Status Meaning Description Schema     200 OK successful operation JsonResponse   400 Bad Request Project does not exist. None    This operation does not require authentication  delete \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;/https://app.getrakam.com/continuous-query/delete\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;POST\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Content-Type\u0026#34;: []string{\u0026#34;application/x-www-form-urlencoded\u0026#34;}, \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;POST\u0026#34;, \u0026#34;/https://app.getrakam.com/continuous-query/delete\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  var headers = { \u0026#39;Content-Type\u0026#39;:\u0026#39;application/x-www-form-urlencoded\u0026#39;, \u0026#39;Accept\u0026#39;:\u0026#39;application/json\u0026#39; }; $.ajax({ url: \u0026#39;/https://app.getrakam.com/continuous-query/delete\u0026#39;, method: \u0026#39;post\u0026#39;, headers: headers, success: function(data) { console.log(JSON.stringify(data)); } })   1 2 3 4 5  POST /https://app.getrakam.com/continuous-query/delete HTTP/1.1 Content-Type: application/x-www-form-urlencoded Accept: application/json   POST /continuous-query/delete\nDelete stream\n Body parameter\n 1 2 3  project:stringname:string  Parameters    Name In Type Required Description     body body delete false none   » project body string false none   » name body string false none     Example responses\n  200 Response\n 1  {}   Responses    Status Meaning Description Schema     200 OK successful operation Inline   400 Bad Request Project does not exist. None    Response Schema This operation does not require authentication  listQueries \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;/https://app.getrakam.com/continuous-query/list\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;POST\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Content-Type\u0026#34;: []string{\u0026#34;application/x-www-form-urlencoded\u0026#34;}, \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;POST\u0026#34;, \u0026#34;/https://app.getrakam.com/continuous-query/list\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  var headers = { \u0026#39;Content-Type\u0026#39;:\u0026#39;application/x-www-form-urlencoded\u0026#39;, \u0026#39;Accept\u0026#39;:\u0026#39;application/json\u0026#39; }; $.ajax({ url: \u0026#39;/https://app.getrakam.com/continuous-query/list\u0026#39;, method: \u0026#39;post\u0026#39;, headers: headers, success: function(data) { console.log(JSON.stringify(data)); } })   1 2 3 4 5  POST /https://app.getrakam.com/continuous-query/list HTTP/1.1 Content-Type: application/x-www-form-urlencoded Accept: application/json   POST /continuous-query/list\nList queries\n Body parameter\n 1 2  project:string  Parameters    Name In Type Required Description     body body listQueries false none   » project body string false none     Example responses\n  200 Response\n 1  {}   Responses    Status Meaning Description Schema     200 OK successful operation Inline   400 Bad Request Project does not exist. None    Response Schema This operation does not require authentication  schema \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;/https://app.getrakam.com/continuous-query/schema\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;POST\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Content-Type\u0026#34;: []string{\u0026#34;application/x-www-form-urlencoded\u0026#34;}, \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;POST\u0026#34;, \u0026#34;/https://app.getrakam.com/continuous-query/schema\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  var headers = { \u0026#39;Content-Type\u0026#39;:\u0026#39;application/x-www-form-urlencoded\u0026#39;, \u0026#39;Accept\u0026#39;:\u0026#39;application/json\u0026#39; }; $.ajax({ url: \u0026#39;/https://app.getrakam.com/continuous-query/schema\u0026#39;, method: \u0026#39;post\u0026#39;, headers: headers, success: function(data) { console.log(JSON.stringify(data)); } })   1 2 3 4 5  POST /https://app.getrakam.com/continuous-query/schema HTTP/1.1 Content-Type: application/x-www-form-urlencoded Accept: application/json   POST /continuous-query/schema\nGet query schema\n Body parameter\n 1 2  project:string  Parameters    Name In Type Required Description     body body listQueries false none   » project body string false none     Example responses\n  200 Response\n 1 2 3  [ {} ]   Responses    Status Meaning Description Schema     200 OK successful operation Inline   400 Bad Request Project does not exist. None    Response Schema This operation does not require authentication  event-explorer execute \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;/https://app.getrakam.com/event-explorer/analyze\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;POST\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Content-Type\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, \u0026#34;read_key\u0026#34;: []string{\u0026#34;API_KEY\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;POST\u0026#34;, \u0026#34;/https://app.getrakam.com/event-explorer/analyze\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  var headers = { \u0026#39;Content-Type\u0026#39;:\u0026#39;application/json\u0026#39;, \u0026#39;Accept\u0026#39;:\u0026#39;application/json\u0026#39;, \u0026#39;read_key\u0026#39;:\u0026#39;API_KEY\u0026#39; }; $.ajax({ url: \u0026#39;/https://app.getrakam.com/event-explorer/analyze\u0026#39;, method: \u0026#39;post\u0026#39;, headers: headers, success: function(data) { console.log(JSON.stringify(data)); } })   1 2 3 4 5  POST /https://app.getrakam.com/event-explorer/analyze HTTP/1.1 Content-Type: application/json Accept: application/json   POST /event-explorer/analyze\nPerform simple query on event data\n Body parameter\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21  { \u0026#34;project\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;measure\u0026#34;: { \u0026#34;column\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;aggregation\u0026#34;: \u0026#34;COUNT\u0026#34; }, \u0026#34;grouping\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;COLUMN\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;string\u0026#34; }, \u0026#34;segment\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;COLUMN\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;string\u0026#34; }, \u0026#34;filterExpression\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;startDate\u0026#34;: \u0026#34;2020-02-26\u0026#34;, \u0026#34;endDate\u0026#34;: \u0026#34;2020-02-26\u0026#34;, \u0026#34;collections\u0026#34;: [ \u0026#34;string\u0026#34; ] }   Parameters    Name In Type Required Description     body body EventExplorerHttpService_execute true none     Example responses\n  200 Response\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28  { \u0026#34;metadata\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;STRING\u0026#34;, \u0026#34;nullable\u0026#34;: false, \u0026#34;unique\u0026#34;: false, \u0026#34;descriptiveName\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;category\u0026#34;: \u0026#34;string\u0026#34; } ], \u0026#34;result\u0026#34;: [ [ {} ] ], \u0026#34;error\u0026#34;: { \u0026#34;message\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;sqlState\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;errorCode\u0026#34;: 0 }, \u0026#34;properties\u0026#34;: { \u0026#34;property1\u0026#34;: {}, \u0026#34;property2\u0026#34;: {} }, \u0026#34;failed\u0026#34;: false }   Responses    Status Meaning Description Schema     200 OK successful operation QueryResult    To perform this operation, you must be authenticated by means of one of the following methods: read_key  getEventDimensions \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;/https://app.getrakam.com/event-explorer/event_dimensions\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;POST\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Content-Type\u0026#34;: []string{\u0026#34;application/x-www-form-urlencoded\u0026#34;}, \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, \u0026#34;read_key\u0026#34;: []string{\u0026#34;API_KEY\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;POST\u0026#34;, \u0026#34;/https://app.getrakam.com/event-explorer/event_dimensions\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  var headers = { \u0026#39;Content-Type\u0026#39;:\u0026#39;application/x-www-form-urlencoded\u0026#39;, \u0026#39;Accept\u0026#39;:\u0026#39;application/json\u0026#39;, \u0026#39;read_key\u0026#39;:\u0026#39;API_KEY\u0026#39; }; $.ajax({ url: \u0026#39;/https://app.getrakam.com/event-explorer/event_dimensions\u0026#39;, method: \u0026#39;post\u0026#39;, headers: headers, success: function(data) { console.log(JSON.stringify(data)); } })   1 2 3 4 5  POST /https://app.getrakam.com/event-explorer/event_dimensions HTTP/1.1 Content-Type: application/x-www-form-urlencoded Accept: application/json   POST /event-explorer/event_dimensions\nEvent statistics\n Body parameter\n 1 2  project:string  Parameters    Name In Type Required Description     body body listQueries false none   » project body string false none     Example responses\n  200 Response\n 1 2 3  [ {} ]   Responses    Status Meaning Description Schema     200 OK successful operation Inline    Response Schema To perform this operation, you must be authenticated by means of one of the following methods: read_key  getExtraDimensions \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;/https://app.getrakam.com/event-explorer/extra_dimensions\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;POST\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Content-Type\u0026#34;: []string{\u0026#34;application/x-www-form-urlencoded\u0026#34;}, \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, \u0026#34;read_key\u0026#34;: []string{\u0026#34;API_KEY\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;POST\u0026#34;, \u0026#34;/https://app.getrakam.com/event-explorer/extra_dimensions\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  var headers = { \u0026#39;Content-Type\u0026#39;:\u0026#39;application/x-www-form-urlencoded\u0026#39;, \u0026#39;Accept\u0026#39;:\u0026#39;application/json\u0026#39;, \u0026#39;read_key\u0026#39;:\u0026#39;API_KEY\u0026#39; }; $.ajax({ url: \u0026#39;/https://app.getrakam.com/event-explorer/extra_dimensions\u0026#39;, method: \u0026#39;post\u0026#39;, headers: headers, success: function(data) { console.log(JSON.stringify(data)); } })   1 2 3 4 5  POST /https://app.getrakam.com/event-explorer/extra_dimensions HTTP/1.1 Content-Type: application/x-www-form-urlencoded Accept: application/json   POST /event-explorer/extra_dimensions\nEvent statistics\n Body parameter\n 1 2  project:string  Parameters    Name In Type Required Description     body body listQueries false none   » project body string false none     Example responses\n  200 Response\n 1 2 3  [ {} ]   Responses    Status Meaning Description Schema     200 OK successful operation Inline    Response Schema To perform this operation, you must be authenticated by means of one of the following methods: read_key  getEventStatistics \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;/https://app.getrakam.com/event-explorer/statistics\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;POST\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Content-Type\u0026#34;: []string{\u0026#34;application/x-www-form-urlencoded\u0026#34;}, \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, \u0026#34;read_key\u0026#34;: []string{\u0026#34;API_KEY\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;POST\u0026#34;, \u0026#34;/https://app.getrakam.com/event-explorer/statistics\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  var headers = { \u0026#39;Content-Type\u0026#39;:\u0026#39;application/x-www-form-urlencoded\u0026#39;, \u0026#39;Accept\u0026#39;:\u0026#39;application/json\u0026#39;, \u0026#39;read_key\u0026#39;:\u0026#39;API_KEY\u0026#39; }; $.ajax({ url: \u0026#39;/https://app.getrakam.com/event-explorer/statistics\u0026#39;, method: \u0026#39;post\u0026#39;, headers: headers, success: function(data) { console.log(JSON.stringify(data)); } })   1 2 3 4 5  POST /https://app.getrakam.com/event-explorer/statistics HTTP/1.1 Content-Type: application/x-www-form-urlencoded Accept: application/json   POST /event-explorer/statistics\nEvent statistics\n Body parameter\n 1 2 3 4 5  project:stringdimension:stringstartDate:\u0026#39;2020-02-26\u0026#39;endDate:\u0026#39;2020-02-26\u0026#39;  Parameters    Name In Type Required Description     body body object false none   » project body string false none   » dimension body string false none   » startDate body string(date) false none   » endDate body string(date) false none     Example responses\n  200 Response\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28  { \u0026#34;metadata\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;STRING\u0026#34;, \u0026#34;nullable\u0026#34;: false, \u0026#34;unique\u0026#34;: false, \u0026#34;descriptiveName\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;category\u0026#34;: \u0026#34;string\u0026#34; } ], \u0026#34;result\u0026#34;: [ [ {} ] ], \u0026#34;error\u0026#34;: { \u0026#34;message\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;sqlState\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;errorCode\u0026#34;: 0 }, \u0026#34;properties\u0026#34;: { \u0026#34;property1\u0026#34;: {}, \u0026#34;property2\u0026#34;: {} }, \u0026#34;failed\u0026#34;: false }   Responses    Status Meaning Description Schema     200 OK successful operation QueryResult    To perform this operation, you must be authenticated by means of one of the following methods: read_key  project createProject \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;/https://app.getrakam.com/project/create\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;POST\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Content-Type\u0026#34;: []string{\u0026#34;application/x-www-form-urlencoded\u0026#34;}, \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, \u0026#34;master_key\u0026#34;: []string{\u0026#34;API_KEY\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;POST\u0026#34;, \u0026#34;/https://app.getrakam.com/project/create\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  var headers = { \u0026#39;Content-Type\u0026#39;:\u0026#39;application/x-www-form-urlencoded\u0026#39;, \u0026#39;Accept\u0026#39;:\u0026#39;application/json\u0026#39;, \u0026#39;master_key\u0026#39;:\u0026#39;API_KEY\u0026#39; }; $.ajax({ url: \u0026#39;/https://app.getrakam.com/project/create\u0026#39;, method: \u0026#39;post\u0026#39;, headers: headers, success: function(data) { console.log(JSON.stringify(data)); } })   1 2 3 4 5  POST /https://app.getrakam.com/project/create HTTP/1.1 Content-Type: application/x-www-form-urlencoded Accept: application/json   POST /project/create\nCreate project\n Body parameter\n 1 2  name:string  Parameters    Name In Type Required Description     body body object false none   » name body string false none     Example responses\n  200 Response\n 1 2 3 4  { \u0026#34;success\u0026#34;: false, \u0026#34;message\u0026#34;: \u0026#34;string\u0026#34; }   Responses    Status Meaning Description Schema     200 OK successful operation JsonResponse    To perform this operation, you must be authenticated by means of one of the following methods: master_key  getProjects \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;/https://app.getrakam.com/project/list\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;GET\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, \u0026#34;master_key\u0026#34;: []string{\u0026#34;API_KEY\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;GET\u0026#34;, \u0026#34;/https://app.getrakam.com/project/list\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  var headers = { \u0026#39;Accept\u0026#39;:\u0026#39;application/json\u0026#39;, \u0026#39;master_key\u0026#39;:\u0026#39;API_KEY\u0026#39; }; $.ajax({ url: \u0026#39;/https://app.getrakam.com/project/list\u0026#39;, method: \u0026#39;get\u0026#39;, headers: headers, success: function(data) { console.log(JSON.stringify(data)); } })   1 2 3 4  GET /https://app.getrakam.com/project/list HTTP/1.1 Accept: application/json   GET /project/list\nList created projects\n Example responses\n  200 Response\n 1 2 3  [ {} ]   Responses    Status Meaning Description Schema     200 OK successful operation Inline    Response Schema To perform this operation, you must be authenticated by means of one of the following methods: master_key  schema \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;/https://app.getrakam.com/project/schema\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;POST\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Content-Type\u0026#34;: []string{\u0026#34;application/x-www-form-urlencoded\u0026#34;}, \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, \u0026#34;master_key\u0026#34;: []string{\u0026#34;API_KEY\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;POST\u0026#34;, \u0026#34;/https://app.getrakam.com/project/schema\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  var headers = { \u0026#39;Content-Type\u0026#39;:\u0026#39;application/x-www-form-urlencoded\u0026#39;, \u0026#39;Accept\u0026#39;:\u0026#39;application/json\u0026#39;, \u0026#39;master_key\u0026#39;:\u0026#39;API_KEY\u0026#39; }; $.ajax({ url: \u0026#39;/https://app.getrakam.com/project/schema\u0026#39;, method: \u0026#39;post\u0026#39;, headers: headers, success: function(data) { console.log(JSON.stringify(data)); } })   1 2 3 4 5  POST /https://app.getrakam.com/project/schema HTTP/1.1 Content-Type: application/x-www-form-urlencoded Accept: application/json   POST /project/schema\nGet collection schema\n Body parameter\n 1 2  project:string  Parameters    Name In Type Required Description     body body listQueries false none   » project body string false none     Example responses\n  200 Response\n 1 2 3  [ {} ]   Responses    Status Meaning Description Schema     200 OK successful operation Inline   400 Bad Request Project does not exist. None    Response Schema To perform this operation, you must be authenticated by means of one of the following methods: master_key  Schemas UserHttpService_search \n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  { \u0026#34;project\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;filter\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;event_filters\u0026#34;: [ { \u0026#34;collection\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;aggregation\u0026#34;: { \u0026#34;field\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;minimum\u0026#34;: 0, \u0026#34;maximum\u0026#34;: 0, \u0026#34;type\u0026#34;: \u0026#34;COUNT\u0026#34; }, \u0026#34;filterExpression\u0026#34;: \u0026#34;string\u0026#34; } ], \u0026#34;sorting\u0026#34;: { \u0026#34;column\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;order\u0026#34;: \u0026#34;asc\u0026#34; }, \u0026#34;offset\u0026#34;: 0, \u0026#34;limit\u0026#34;: 0 }   Properties    Name Type Required Restrictions Description     project string false none none   filter string false none none   event_filters [EventFilter] false none none   sorting Sorting false none none   offset integer(int32) false none none   limit integer(int32) false none none    User \n1 2 3 4 5 6 7 8 9  { \u0026#34;project\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;id\u0026#34;: {}, \u0026#34;properties\u0026#34;: { \u0026#34;property1\u0026#34;: {}, \u0026#34;property2\u0026#34;: {} } }   Properties    Name Type Required Restrictions Description     project string false none none   id object false none none   properties object false none none   » additionalProperties object false none none    Message \n1 2 3 4 5 6 7 8 9 10 11  { \u0026#34;id\u0026#34;: 0, \u0026#34;content\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;from_user\u0026#34;: {}, \u0026#34;to_user\u0026#34;: {}, \u0026#34;parentId\u0026#34;: 0, \u0026#34;seen\u0026#34;: false, \u0026#34;time\u0026#34;: 0, \u0026#34;project\u0026#34;: \u0026#34;string\u0026#34; }   Properties    Name Type Required Restrictions Description     id integer(int32) false none none   content string false none none   from_user object false none none   to_user object false none none   parentId integer(int32) false none none   seen boolean false none none   time integer(int64) false none none   project string false none none    Reference \n1 2 3 4 5  { \u0026#34;type\u0026#34;: \u0026#34;COLUMN\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;string\u0026#34; }   Properties    Name Type Required Restrictions Description     type string false none none   value string false none none    Enumerated Values    Property Value     type COLUMN   type REFERENCE    UserHttpService_create \n1 2 3 4 5 6 7 8  { \u0026#34;project\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;properties\u0026#34;: { \u0026#34;property1\u0026#34;: {}, \u0026#34;property2\u0026#34;: {} } }   Properties    Name Type Required Restrictions Description     project string false none none   properties object false none none   » additionalProperties object false none none    EventFilter \n1 2 3 4 5 6 7 8 9 10 11  { \u0026#34;collection\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;aggregation\u0026#34;: { \u0026#34;field\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;minimum\u0026#34;: 0, \u0026#34;maximum\u0026#34;: 0, \u0026#34;type\u0026#34;: \u0026#34;COUNT\u0026#34; }, \u0026#34;filterExpression\u0026#34;: \u0026#34;string\u0026#34; }   Properties    Name Type Required Restrictions Description     collection string false none none   aggregation EventFilterAggregation false none none   filterExpression string false none none    JsonResponse \n1 2 3 4 5  { \u0026#34;success\u0026#34;: false, \u0026#34;message\u0026#34;: \u0026#34;string\u0026#34; }   Properties    Name Type Required Restrictions Description     success boolean false none none   message string false none none    Sorting \n1 2 3 4 5  { \u0026#34;column\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;order\u0026#34;: \u0026#34;asc\u0026#34; }   Properties    Name Type Required Restrictions Description     column string false none none   order string false none none    Enumerated Values    Property Value     order asc   order desc    SchemaField \n1 2 3 4 5 6 7 8 9 10  { \u0026#34;name\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;STRING\u0026#34;, \u0026#34;nullable\u0026#34;: false, \u0026#34;unique\u0026#34;: false, \u0026#34;descriptiveName\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;category\u0026#34;: \u0026#34;string\u0026#34; }   Properties    Name Type Required Restrictions Description     name string false read-only none   type string false read-only none   nullable boolean false read-only none   unique boolean false read-only none   descriptiveName string false read-only none   description string false read-only none   category string false read-only none    Enumerated Values    Property Value     type STRING   type ARRAY   type LONG   type DOUBLE   type BOOLEAN   type DATE   type HYPERLOGLOG   type TIME   type TIMESTAMP    QueryResult \n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29  { \u0026#34;metadata\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;STRING\u0026#34;, \u0026#34;nullable\u0026#34;: false, \u0026#34;unique\u0026#34;: false, \u0026#34;descriptiveName\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;category\u0026#34;: \u0026#34;string\u0026#34; } ], \u0026#34;result\u0026#34;: [ [ {} ] ], \u0026#34;error\u0026#34;: { \u0026#34;message\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;sqlState\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;errorCode\u0026#34;: 0 }, \u0026#34;properties\u0026#34;: { \u0026#34;property1\u0026#34;: {}, \u0026#34;property2\u0026#34;: {} }, \u0026#34;failed\u0026#34;: false }   Properties    Name Type Required Restrictions Description     metadata [SchemaField] false none none   result [array] false none none   error QueryError false none none   properties object false none none   » additionalProperties object false none none   failed boolean false none none    ContinuousQuery \n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  { \u0026#34;project\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;query\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;table_name\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;collections\u0026#34;: [ \u0026#34;string\u0026#34; ], \u0026#34;partition_keys\u0026#34;: [ \u0026#34;string\u0026#34; ], \u0026#34;options\u0026#34;: { \u0026#34;property1\u0026#34;: {}, \u0026#34;property2\u0026#34;: {} } }   Properties    Name Type Required Restrictions Description     project string false none none   name string false none none   query string false none none   table_name string false none none   collections [string] false none none   partition_keys [string] false none none   options object false none none   » additionalProperties object false none none    EventExplorerHttpService_execute \n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22  { \u0026#34;project\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;measure\u0026#34;: { \u0026#34;column\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;aggregation\u0026#34;: \u0026#34;COUNT\u0026#34; }, \u0026#34;grouping\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;COLUMN\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;string\u0026#34; }, \u0026#34;segment\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;COLUMN\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;string\u0026#34; }, \u0026#34;filterExpression\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;startDate\u0026#34;: \u0026#34;2020-02-26\u0026#34;, \u0026#34;endDate\u0026#34;: \u0026#34;2020-02-26\u0026#34;, \u0026#34;collections\u0026#34;: [ \u0026#34;string\u0026#34; ] }   Properties    Name Type Required Restrictions Description     project string false none none   measure Measure false none none   grouping Reference false none none   segment Reference false none none   filterExpression string false none none   startDate string(date) false none none   endDate string(date) false none none   collections [string] false none none    Measure \n1 2 3 4 5  { \u0026#34;column\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;aggregation\u0026#34;: \u0026#34;COUNT\u0026#34; }   Properties    Name Type Required Restrictions Description     column string false none none   aggregation string false none none    Enumerated Values    Property Value     aggregation COUNT   aggregation COUNT_UNIQUE   aggregation SUM   aggregation MINIMUM   aggregation MAXIMUM   aggregation APPROXIMATE_UNIQUE   aggregation VARIANCE   aggregation POPULATION_VARIANCE   aggregation STANDARD_DEVIATION   aggregation AVERAGE    CreateUserResponse \n1 2 3 4  { \u0026#34;identifier\u0026#34;: {} }   Properties    Name Type Required Restrictions Description     identifier object false none none    MetadataResponse \n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  { \u0026#34;columns\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;STRING\u0026#34;, \u0026#34;nullable\u0026#34;: false, \u0026#34;unique\u0026#34;: false, \u0026#34;descriptiveName\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;category\u0026#34;: \u0026#34;string\u0026#34; } ], \u0026#34;identifierColumn\u0026#34;: \u0026#34;string\u0026#34; }   Properties    Name Type Required Restrictions Description     columns [SchemaField] false none none   identifierColumn string false none none    org.rakam.collection.event.EventCollectionHttpService.collect \n1 2 3 4 5 6  { \u0026#34;project\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;collection\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;properties\u0026#34;: {} }   Properties    Name Type Required Restrictions Description     project string true none none   collection string true none none   properties object true none none    MaterializedView \n1 2 3 4 5 6 7 8 9 10 11 12  { \u0026#34;project\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;table_name\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;query\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;update_interval\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;options\u0026#34;: { \u0026#34;property1\u0026#34;: {}, \u0026#34;property2\u0026#34;: {} } }   Properties    Name Type Required Restrictions Description     project string false none none   name string false none none   table_name string false none none   query string false none none   update_interval string false none none   options object false none none   » additionalProperties object false none none    QueryError \n1 2 3 4 5 6  { \u0026#34;message\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;sqlState\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;errorCode\u0026#34;: 0 }   Properties    Name Type Required Restrictions Description     message string false none none   sqlState string false none none   errorCode integer(int32) false none none    EventFilterAggregation \n1 2 3 4 5 6 7  { \u0026#34;field\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;minimum\u0026#34;: 0, \u0026#34;maximum\u0026#34;: 0, \u0026#34;type\u0026#34;: \u0026#34;COUNT\u0026#34; }   Properties    Name Type Required Restrictions Description     field string false none none   minimum integer(int64) false none none   maximum integer(int64) false none none   type string false none none    Enumerated Values    Property Value     type COUNT   type COUNT_UNIQUE   type SUM   type MINIMUM   type MAXIMUM   type APPROXIMATE_UNIQUE   type VARIANCE   type POPULATION_VARIANCE   type STANDARD_DEVIATION   type AVERAGE    FunnelQuery \n1 2 3 4 5 6 7 8 9 10 11 12 13 14  { \u0026#34;project\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;steps\u0026#34;: [ { \u0026#34;collection\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;filterExpression\u0026#34;: \u0026#34;string\u0026#34; } ], \u0026#34;dimension\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;startDate\u0026#34;: \u0026#34;2020-02-26\u0026#34;, \u0026#34;endDate\u0026#34;: \u0026#34;2020-02-26\u0026#34;, \u0026#34;enableOtherGrouping\u0026#34;: true }   Properties    Name Type Required Restrictions Description     project string false none none   steps [FunnelStep] false none none   dimension string false none none   startDate string(date) false none none   endDate string(date) false none none   enableOtherGrouping boolean false none none    FunnelStep \n1 2 3 4 5  { \u0026#34;collection\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;filterExpression\u0026#34;: \u0026#34;string\u0026#34; }   Properties    Name Type Required Restrictions Description     collection string false none none   filterExpression string false none none    ","description":"","id":25,"section":"docs","tags":null,"title":"Rakam API Documentation","uri":"/es/docs/apis/rakam/"},{"content":"Swagger Petstore v1.0.3  Scroll down for code samples, example requests and responses. Select a language for code samples from the tabs above or the mobile navigation menu.\n This is a sample server Petstore server. You can find out more about Swagger at http://swagger.io or on irc.freenode.net, #swagger. For this sample, you can use the api key special-key to test the authorization filters.\nBase URLs:\n  https://petstore.swagger.io/v2\n  http://petstore.swagger.io/v2\n  Terms of service\nEmail: Support\nLicense: Apache 2.0\nAuthentication  API Key (api_key)  Parameter Name: api_key, in: header.      oAuth2 authentication.\n Flow: implicit Authorization URL = https://petstore.swagger.io/oauth/authorize       Scope Scope Description     read:pets read your pets   write:pets modify pets in your account    pet Everything about your Pets\nFind out more\ngetPetById \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;https://petstore.swagger.io/v2/pet/{petId}\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;GET\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, \u0026#34;api_key\u0026#34;: []string{\u0026#34;API_KEY\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;GET\u0026#34;, \u0026#34;https://petstore.swagger.io/v2/pet/{petId}\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  var headers = { \u0026#39;Accept\u0026#39;:\u0026#39;application/json\u0026#39;, \u0026#39;api_key\u0026#39;:\u0026#39;API_KEY\u0026#39; }; $.ajax({ url: \u0026#39;https://petstore.swagger.io/v2/pet/{petId}\u0026#39;, method: \u0026#39;get\u0026#39;, headers: headers, success: function(data) { console.log(JSON.stringify(data)); } })   1 2 3 4  GET https://petstore.swagger.io/v2/pet/{petId} HTTP/1.1 Host: petstore.swagger.io Accept: application/json   GET /pet/{petId}\nFind pet by ID\nReturns a single pet\nParameters    Name In Type Required Description     petId path integer(int64) true ID of pet to return     Example responses\n  200 Response\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  { \u0026#34;id\u0026#34;: 0, \u0026#34;category\u0026#34;: { \u0026#34;id\u0026#34;: 0, \u0026#34;name\u0026#34;: \u0026#34;string\u0026#34; }, \u0026#34;name\u0026#34;: \u0026#34;doggie\u0026#34;, \u0026#34;photoUrls\u0026#34;: [ \u0026#34;string\u0026#34; ], \u0026#34;tags\u0026#34;: [ { \u0026#34;id\u0026#34;: 0, \u0026#34;name\u0026#34;: \u0026#34;string\u0026#34; } ], \u0026#34;status\u0026#34;: \u0026#34;available\u0026#34; }   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34; ?\u0026gt; \u0026lt;Pet\u0026gt; \u0026lt;id\u0026gt;0\u0026lt;/id\u0026gt; \u0026lt;category\u0026gt; \u0026lt;id\u0026gt;0\u0026lt;/id\u0026gt; \u0026lt;name\u0026gt;string\u0026lt;/name\u0026gt; \u0026lt;/category\u0026gt; \u0026lt;name\u0026gt;doggie\u0026lt;/name\u0026gt; \u0026lt;photoUrls\u0026gt;string\u0026lt;/photoUrls\u0026gt; \u0026lt;tags\u0026gt; \u0026lt;id\u0026gt;0\u0026lt;/id\u0026gt; \u0026lt;name\u0026gt;string\u0026lt;/name\u0026gt; \u0026lt;/tags\u0026gt; \u0026lt;status\u0026gt;available\u0026lt;/status\u0026gt; \u0026lt;/Pet\u0026gt;   Responses    Status Meaning Description Schema     200 OK successful operation Pet   400 Bad Request Invalid ID supplied None   404 Not Found Pet not found None    To perform this operation, you must be authenticated by means of one of the following methods: api_key  updatePetWithForm \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;https://petstore.swagger.io/v2/pet/{petId}\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;POST\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Content-Type\u0026#34;: []string{\u0026#34;application/x-www-form-urlencoded\u0026#34;}, \u0026#34;Authorization\u0026#34;: []string{\u0026#34;Bearer {access-token}\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;POST\u0026#34;, \u0026#34;https://petstore.swagger.io/v2/pet/{petId}\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  var headers = { \u0026#39;Content-Type\u0026#39;:\u0026#39;application/x-www-form-urlencoded\u0026#39;, \u0026#39;Authorization\u0026#39;:\u0026#39;Bearer {access-token}\u0026#39; }; $.ajax({ url: \u0026#39;https://petstore.swagger.io/v2/pet/{petId}\u0026#39;, method: \u0026#39;post\u0026#39;, headers: headers, success: function(data) { console.log(JSON.stringify(data)); } })   1 2 3 4  POST https://petstore.swagger.io/v2/pet/{petId} HTTP/1.1 Host: petstore.swagger.io Content-Type: application/x-www-form-urlencoded   POST /pet/{petId}\nUpdates a pet in the store with form data\n Body parameter\n 1 2 3  name:stringstatus:string  Parameters    Name In Type Required Description     petId path integer(int64) true ID of pet that needs to be updated   body body object false none   » name body string false Updated name of the pet   » status body string false Updated status of the pet    Responses    Status Meaning Description Schema     405 Method Not Allowed Invalid input None    To perform this operation, you must be authenticated by means of one of the following methods: petstore_auth ( Scopes: write:pets read:pets )  deletePet \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;https://petstore.swagger.io/v2/pet/{petId}\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;DELETE\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;api_key\u0026#34;: []string{\u0026#34;string\u0026#34;}, \u0026#34;Authorization\u0026#34;: []string{\u0026#34;Bearer {access-token}\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;DELETE\u0026#34;, \u0026#34;https://petstore.swagger.io/v2/pet/{petId}\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  var headers = { \u0026#39;api_key\u0026#39;:\u0026#39;string\u0026#39;, \u0026#39;Authorization\u0026#39;:\u0026#39;Bearer {access-token}\u0026#39; }; $.ajax({ url: \u0026#39;https://petstore.swagger.io/v2/pet/{petId}\u0026#39;, method: \u0026#39;delete\u0026#39;, headers: headers, success: function(data) { console.log(JSON.stringify(data)); } })   1 2 3 4 5  DELETE https://petstore.swagger.io/v2/pet/{petId} HTTP/1.1 Host: petstore.swagger.io api_key: string   DELETE /pet/{petId}\nDeletes a pet\nParameters    Name In Type Required Description     api_key header string false none   petId path integer(int64) true Pet id to delete    Responses    Status Meaning Description Schema     400 Bad Request Invalid ID supplied None   404 Not Found Pet not found None    To perform this operation, you must be authenticated by means of one of the following methods: petstore_auth ( Scopes: write:pets read:pets )  uploadFile \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;https://petstore.swagger.io/v2/pet/{petId}/uploadImage\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;POST\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Content-Type\u0026#34;: []string{\u0026#34;multipart/form-data\u0026#34;}, \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, \u0026#34;Authorization\u0026#34;: []string{\u0026#34;Bearer {access-token}\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;POST\u0026#34;, \u0026#34;https://petstore.swagger.io/v2/pet/{petId}/uploadImage\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  var headers = { \u0026#39;Content-Type\u0026#39;:\u0026#39;multipart/form-data\u0026#39;, \u0026#39;Accept\u0026#39;:\u0026#39;application/json\u0026#39;, \u0026#39;Authorization\u0026#39;:\u0026#39;Bearer {access-token}\u0026#39; }; $.ajax({ url: \u0026#39;https://petstore.swagger.io/v2/pet/{petId}/uploadImage\u0026#39;, method: \u0026#39;post\u0026#39;, headers: headers, success: function(data) { console.log(JSON.stringify(data)); } })   1 2 3 4 5  POST https://petstore.swagger.io/v2/pet/{petId}/uploadImage HTTP/1.1 Host: petstore.swagger.io Content-Type: multipart/form-data Accept: application/json   POST /pet/{petId}/uploadImage\nuploads an image\n Body parameter\n 1 2 3  additionalMetadata:stringfile:string  Parameters    Name In Type Required Description     petId path integer(int64) true ID of pet to update   body body object false none   » additionalMetadata body string false Additional data to pass to server   » file body string(binary) false file to upload     Example responses\n  200 Response\n 1 2 3 4 5  { \u0026#34;code\u0026#34;: 0, \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;message\u0026#34;: \u0026#34;string\u0026#34; }   Responses    Status Meaning Description Schema     200 OK successful operation ApiResponse    To perform this operation, you must be authenticated by means of one of the following methods: petstore_auth ( Scopes: write:pets read:pets )  addPet \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;https://petstore.swagger.io/v2/pet\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;POST\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Content-Type\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, \u0026#34;Authorization\u0026#34;: []string{\u0026#34;Bearer {access-token}\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;POST\u0026#34;, \u0026#34;https://petstore.swagger.io/v2/pet\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  var headers = { \u0026#39;Content-Type\u0026#39;:\u0026#39;application/json\u0026#39;, \u0026#39;Authorization\u0026#39;:\u0026#39;Bearer {access-token}\u0026#39; }; $.ajax({ url: \u0026#39;https://petstore.swagger.io/v2/pet\u0026#39;, method: \u0026#39;post\u0026#39;, headers: headers, success: function(data) { console.log(JSON.stringify(data)); } })   1 2 3 4  POST https://petstore.swagger.io/v2/pet HTTP/1.1 Host: petstore.swagger.io Content-Type: application/json   POST /pet\nAdd a new pet to the store\n Body parameter\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  { \u0026#34;id\u0026#34;: 0, \u0026#34;category\u0026#34;: { \u0026#34;id\u0026#34;: 0, \u0026#34;name\u0026#34;: \u0026#34;string\u0026#34; }, \u0026#34;name\u0026#34;: \u0026#34;doggie\u0026#34;, \u0026#34;photoUrls\u0026#34;: [ \u0026#34;string\u0026#34; ], \u0026#34;tags\u0026#34;: [ { \u0026#34;id\u0026#34;: 0, \u0026#34;name\u0026#34;: \u0026#34;string\u0026#34; } ], \u0026#34;status\u0026#34;: \u0026#34;available\u0026#34; }   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34; ?\u0026gt; \u0026lt;Pet\u0026gt; \u0026lt;id\u0026gt;0\u0026lt;/id\u0026gt; \u0026lt;category\u0026gt; \u0026lt;id\u0026gt;0\u0026lt;/id\u0026gt; \u0026lt;name\u0026gt;string\u0026lt;/name\u0026gt; \u0026lt;/category\u0026gt; \u0026lt;name\u0026gt;doggie\u0026lt;/name\u0026gt; \u0026lt;photoUrls\u0026gt;string\u0026lt;/photoUrls\u0026gt; \u0026lt;tags\u0026gt; \u0026lt;id\u0026gt;0\u0026lt;/id\u0026gt; \u0026lt;name\u0026gt;string\u0026lt;/name\u0026gt; \u0026lt;/tags\u0026gt; \u0026lt;status\u0026gt;available\u0026lt;/status\u0026gt; \u0026lt;/Pet\u0026gt;   Parameters    Name In Type Required Description     body body Pet true Pet object that needs to be added to the store    Responses    Status Meaning Description Schema     405 Method Not Allowed Invalid input None    To perform this operation, you must be authenticated by means of one of the following methods: petstore_auth ( Scopes: write:pets read:pets )  updatePet \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;https://petstore.swagger.io/v2/pet\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;PUT\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Content-Type\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, \u0026#34;Authorization\u0026#34;: []string{\u0026#34;Bearer {access-token}\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;PUT\u0026#34;, \u0026#34;https://petstore.swagger.io/v2/pet\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  var headers = { \u0026#39;Content-Type\u0026#39;:\u0026#39;application/json\u0026#39;, \u0026#39;Authorization\u0026#39;:\u0026#39;Bearer {access-token}\u0026#39; }; $.ajax({ url: \u0026#39;https://petstore.swagger.io/v2/pet\u0026#39;, method: \u0026#39;put\u0026#39;, headers: headers, success: function(data) { console.log(JSON.stringify(data)); } })   1 2 3 4  PUT https://petstore.swagger.io/v2/pet HTTP/1.1 Host: petstore.swagger.io Content-Type: application/json   PUT /pet\nUpdate an existing pet\n Body parameter\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  { \u0026#34;id\u0026#34;: 0, \u0026#34;category\u0026#34;: { \u0026#34;id\u0026#34;: 0, \u0026#34;name\u0026#34;: \u0026#34;string\u0026#34; }, \u0026#34;name\u0026#34;: \u0026#34;doggie\u0026#34;, \u0026#34;photoUrls\u0026#34;: [ \u0026#34;string\u0026#34; ], \u0026#34;tags\u0026#34;: [ { \u0026#34;id\u0026#34;: 0, \u0026#34;name\u0026#34;: \u0026#34;string\u0026#34; } ], \u0026#34;status\u0026#34;: \u0026#34;available\u0026#34; }   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34; ?\u0026gt; \u0026lt;Pet\u0026gt; \u0026lt;id\u0026gt;0\u0026lt;/id\u0026gt; \u0026lt;category\u0026gt; \u0026lt;id\u0026gt;0\u0026lt;/id\u0026gt; \u0026lt;name\u0026gt;string\u0026lt;/name\u0026gt; \u0026lt;/category\u0026gt; \u0026lt;name\u0026gt;doggie\u0026lt;/name\u0026gt; \u0026lt;photoUrls\u0026gt;string\u0026lt;/photoUrls\u0026gt; \u0026lt;tags\u0026gt; \u0026lt;id\u0026gt;0\u0026lt;/id\u0026gt; \u0026lt;name\u0026gt;string\u0026lt;/name\u0026gt; \u0026lt;/tags\u0026gt; \u0026lt;status\u0026gt;available\u0026lt;/status\u0026gt; \u0026lt;/Pet\u0026gt;   Parameters    Name In Type Required Description     body body Pet true Pet object that needs to be added to the store    Responses    Status Meaning Description Schema     400 Bad Request Invalid ID supplied None   404 Not Found Pet not found None   405 Method Not Allowed Validation exception None    To perform this operation, you must be authenticated by means of one of the following methods: petstore_auth ( Scopes: write:pets read:pets )  findPetsByStatus \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;https://petstore.swagger.io/v2/pet/findByStatus?status=available\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;GET\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, \u0026#34;Authorization\u0026#34;: []string{\u0026#34;Bearer {access-token}\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;GET\u0026#34;, \u0026#34;https://petstore.swagger.io/v2/pet/findByStatus\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  var headers = { \u0026#39;Accept\u0026#39;:\u0026#39;application/json\u0026#39;, \u0026#39;Authorization\u0026#39;:\u0026#39;Bearer {access-token}\u0026#39; }; $.ajax({ url: \u0026#39;https://petstore.swagger.io/v2/pet/findByStatus\u0026#39;, method: \u0026#39;get\u0026#39;, data: \u0026#39;?status=available\u0026#39;, headers: headers, success: function(data) { console.log(JSON.stringify(data)); } })   1 2 3 4  GET https://petstore.swagger.io/v2/pet/findByStatus?status=available HTTP/1.1 Host: petstore.swagger.io Accept: application/json   GET /pet/findByStatus\nFinds Pets by status\nMultiple status values can be provided with comma separated strings\nParameters    Name In Type Required Description     status query array[string] true Status values that need to be considered for filter    Enumerated Values    Parameter Value     status available   status pending   status sold     Example responses\n  200 Response\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  [ { \u0026#34;id\u0026#34;: 0, \u0026#34;category\u0026#34;: { \u0026#34;id\u0026#34;: 0, \u0026#34;name\u0026#34;: \u0026#34;string\u0026#34; }, \u0026#34;name\u0026#34;: \u0026#34;doggie\u0026#34;, \u0026#34;photoUrls\u0026#34;: [ \u0026#34;string\u0026#34; ], \u0026#34;tags\u0026#34;: [ { \u0026#34;id\u0026#34;: 0, \u0026#34;name\u0026#34;: \u0026#34;string\u0026#34; } ], \u0026#34;status\u0026#34;: \u0026#34;available\u0026#34; } ]   1 2 3 4 5 6 7 8 9 10 11 12 13  \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34; ?\u0026gt; \u0026lt;id\u0026gt;0\u0026lt;/id\u0026gt; \u0026lt;category\u0026gt; \u0026lt;id\u0026gt;0\u0026lt;/id\u0026gt; \u0026lt;name\u0026gt;string\u0026lt;/name\u0026gt; \u0026lt;/category\u0026gt; \u0026lt;name\u0026gt;doggie\u0026lt;/name\u0026gt; \u0026lt;photoUrls\u0026gt;string\u0026lt;/photoUrls\u0026gt; \u0026lt;tags\u0026gt; \u0026lt;id\u0026gt;0\u0026lt;/id\u0026gt; \u0026lt;name\u0026gt;string\u0026lt;/name\u0026gt; \u0026lt;/tags\u0026gt; \u0026lt;status\u0026gt;available\u0026lt;/status\u0026gt;   Responses    Status Meaning Description Schema     200 OK successful operation Inline   400 Bad Request Invalid status value None    Response Schema Status Code 200\n   Name Type Required Restrictions Description     anonymous [Pet] false none none   » id integer(int64) false none none   » category Category false none none   »» id integer(int64) false none none   »» name string false none none   » name string true none none   » photoUrls [string] true none none   » tags [Tag] false none none   »» id integer(int64) false none none   »» name string false none none   » status string false none pet status in the store    Enumerated Values    Property Value     status available   status pending   status sold    To perform this operation, you must be authenticated by means of one of the following methods: petstore_auth ( Scopes: write:pets read:pets )  findPetsByTags \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;https://petstore.swagger.io/v2/pet/findByTags?tags=string\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;GET\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, \u0026#34;Authorization\u0026#34;: []string{\u0026#34;Bearer {access-token}\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;GET\u0026#34;, \u0026#34;https://petstore.swagger.io/v2/pet/findByTags\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  var headers = { \u0026#39;Accept\u0026#39;:\u0026#39;application/json\u0026#39;, \u0026#39;Authorization\u0026#39;:\u0026#39;Bearer {access-token}\u0026#39; }; $.ajax({ url: \u0026#39;https://petstore.swagger.io/v2/pet/findByTags\u0026#39;, method: \u0026#39;get\u0026#39;, data: \u0026#39;?tags=string\u0026#39;, headers: headers, success: function(data) { console.log(JSON.stringify(data)); } })   1 2 3 4  GET https://petstore.swagger.io/v2/pet/findByTags?tags=string HTTP/1.1 Host: petstore.swagger.io Accept: application/json   GET /pet/findByTags\nFinds Pets by tags\nMultiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.\nParameters    Name In Type Required Description     tags query array[string] true Tags to filter by     Example responses\n  200 Response\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  [ { \u0026#34;id\u0026#34;: 0, \u0026#34;category\u0026#34;: { \u0026#34;id\u0026#34;: 0, \u0026#34;name\u0026#34;: \u0026#34;string\u0026#34; }, \u0026#34;name\u0026#34;: \u0026#34;doggie\u0026#34;, \u0026#34;photoUrls\u0026#34;: [ \u0026#34;string\u0026#34; ], \u0026#34;tags\u0026#34;: [ { \u0026#34;id\u0026#34;: 0, \u0026#34;name\u0026#34;: \u0026#34;string\u0026#34; } ], \u0026#34;status\u0026#34;: \u0026#34;available\u0026#34; } ]   1 2 3 4 5 6 7 8 9 10 11 12 13  \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34; ?\u0026gt; \u0026lt;id\u0026gt;0\u0026lt;/id\u0026gt; \u0026lt;category\u0026gt; \u0026lt;id\u0026gt;0\u0026lt;/id\u0026gt; \u0026lt;name\u0026gt;string\u0026lt;/name\u0026gt; \u0026lt;/category\u0026gt; \u0026lt;name\u0026gt;doggie\u0026lt;/name\u0026gt; \u0026lt;photoUrls\u0026gt;string\u0026lt;/photoUrls\u0026gt; \u0026lt;tags\u0026gt; \u0026lt;id\u0026gt;0\u0026lt;/id\u0026gt; \u0026lt;name\u0026gt;string\u0026lt;/name\u0026gt; \u0026lt;/tags\u0026gt; \u0026lt;status\u0026gt;available\u0026lt;/status\u0026gt;   Responses    Status Meaning Description Schema     200 OK successful operation Inline   400 Bad Request Invalid tag value None    Response Schema Status Code 200\n   Name Type Required Restrictions Description     anonymous [Pet] false none none   » id integer(int64) false none none   » category Category false none none   »» id integer(int64) false none none   »» name string false none none   » name string true none none   » photoUrls [string] true none none   » tags [Tag] false none none   »» id integer(int64) false none none   »» name string false none none   » status string false none pet status in the store    Enumerated Values    Property Value     status available   status pending   status sold    To perform this operation, you must be authenticated by means of one of the following methods: petstore_auth ( Scopes: write:pets read:pets )  store Access to Petstore orders\ngetInventory \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;https://petstore.swagger.io/v2/store/inventory\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;GET\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, \u0026#34;api_key\u0026#34;: []string{\u0026#34;API_KEY\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;GET\u0026#34;, \u0026#34;https://petstore.swagger.io/v2/store/inventory\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  var headers = { \u0026#39;Accept\u0026#39;:\u0026#39;application/json\u0026#39;, \u0026#39;api_key\u0026#39;:\u0026#39;API_KEY\u0026#39; }; $.ajax({ url: \u0026#39;https://petstore.swagger.io/v2/store/inventory\u0026#39;, method: \u0026#39;get\u0026#39;, headers: headers, success: function(data) { console.log(JSON.stringify(data)); } })   1 2 3 4  GET https://petstore.swagger.io/v2/store/inventory HTTP/1.1 Host: petstore.swagger.io Accept: application/json   GET /store/inventory\nReturns pet inventories by status\nReturns a map of status codes to quantities\n Example responses\n  200 Response\n 1 2 3 4  { \u0026#34;property1\u0026#34;: 0, \u0026#34;property2\u0026#34;: 0 }   Responses    Status Meaning Description Schema     200 OK successful operation Inline    Response Schema Status Code 200\n   Name Type Required Restrictions Description     » additionalProperties integer(int32) false none none    To perform this operation, you must be authenticated by means of one of the following methods: api_key  getOrderById \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;https://petstore.swagger.io/v2/store/order/{orderId}\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;GET\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;GET\u0026#34;, \u0026#34;https://petstore.swagger.io/v2/store/order/{orderId}\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  var headers = { \u0026#39;Accept\u0026#39;:\u0026#39;application/json\u0026#39; }; $.ajax({ url: \u0026#39;https://petstore.swagger.io/v2/store/order/{orderId}\u0026#39;, method: \u0026#39;get\u0026#39;, headers: headers, success: function(data) { console.log(JSON.stringify(data)); } })   1 2 3 4  GET https://petstore.swagger.io/v2/store/order/{orderId} HTTP/1.1 Host: petstore.swagger.io Accept: application/json   GET /store/order/{orderId}\nFind purchase order by ID\nFor valid response try integer IDs with value \u0026gt;= 1 and \u0026lt;= 10. Other values will generated exceptions\nParameters    Name In Type Required Description     orderId path integer(int64) true ID of pet that needs to be fetched     Example responses\n  200 Response\n 1 2 3 4 5 6 7 8  { \u0026#34;id\u0026#34;: 0, \u0026#34;petId\u0026#34;: 0, \u0026#34;quantity\u0026#34;: 0, \u0026#34;shipDate\u0026#34;: \u0026#34;2020-02-26T14:49:53Z\u0026#34;, \u0026#34;status\u0026#34;: \u0026#34;placed\u0026#34;, \u0026#34;complete\u0026#34;: true }   1 2 3 4 5 6 7 8 9  \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34; ?\u0026gt; \u0026lt;Order\u0026gt; \u0026lt;id\u0026gt;0\u0026lt;/id\u0026gt; \u0026lt;petId\u0026gt;0\u0026lt;/petId\u0026gt; \u0026lt;quantity\u0026gt;0\u0026lt;/quantity\u0026gt; \u0026lt;shipDate\u0026gt;2020-02-26T14:49:53Z\u0026lt;/shipDate\u0026gt; \u0026lt;status\u0026gt;placed\u0026lt;/status\u0026gt; \u0026lt;complete\u0026gt;true\u0026lt;/complete\u0026gt; \u0026lt;/Order\u0026gt;   Responses    Status Meaning Description Schema     200 OK successful operation Order   400 Bad Request Invalid ID supplied None   404 Not Found Order not found None    This operation does not require authentication  deleteOrder \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;https://petstore.swagger.io/v2/store/order/{orderId}\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;DELETE\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;DELETE\u0026#34;, \u0026#34;https://petstore.swagger.io/v2/store/order/{orderId}\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   1 2 3 4 5 6 7 8 9 10  $.ajax({ url: \u0026#39;https://petstore.swagger.io/v2/store/order/{orderId}\u0026#39;, method: \u0026#39;delete\u0026#39;, success: function(data) { console.log(JSON.stringify(data)); } })   1 2 3  DELETE https://petstore.swagger.io/v2/store/order/{orderId} HTTP/1.1 Host: petstore.swagger.io   DELETE /store/order/{orderId}\nDelete purchase order by ID\nFor valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors\nParameters    Name In Type Required Description     orderId path integer(int64) true ID of the order that needs to be deleted    Responses    Status Meaning Description Schema     400 Bad Request Invalid ID supplied None   404 Not Found Order not found None    This operation does not require authentication  placeOrder \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;https://petstore.swagger.io/v2/store/order\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;POST\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Content-Type\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;POST\u0026#34;, \u0026#34;https://petstore.swagger.io/v2/store/order\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  var headers = { \u0026#39;Content-Type\u0026#39;:\u0026#39;application/json\u0026#39;, \u0026#39;Accept\u0026#39;:\u0026#39;application/json\u0026#39; }; $.ajax({ url: \u0026#39;https://petstore.swagger.io/v2/store/order\u0026#39;, method: \u0026#39;post\u0026#39;, headers: headers, success: function(data) { console.log(JSON.stringify(data)); } })   1 2 3 4 5  POST https://petstore.swagger.io/v2/store/order HTTP/1.1 Host: petstore.swagger.io Content-Type: application/json Accept: application/json   POST /store/order\nPlace an order for a pet\n Body parameter\n 1 2 3 4 5 6 7 8  { \u0026#34;id\u0026#34;: 0, \u0026#34;petId\u0026#34;: 0, \u0026#34;quantity\u0026#34;: 0, \u0026#34;shipDate\u0026#34;: \u0026#34;2020-02-26T14:49:53Z\u0026#34;, \u0026#34;status\u0026#34;: \u0026#34;placed\u0026#34;, \u0026#34;complete\u0026#34;: true }   Parameters    Name In Type Required Description     body body Order true order placed for purchasing the pet     Example responses\n  200 Response\n 1 2 3 4 5 6 7 8  { \u0026#34;id\u0026#34;: 0, \u0026#34;petId\u0026#34;: 0, \u0026#34;quantity\u0026#34;: 0, \u0026#34;shipDate\u0026#34;: \u0026#34;2020-02-26T14:49:53Z\u0026#34;, \u0026#34;status\u0026#34;: \u0026#34;placed\u0026#34;, \u0026#34;complete\u0026#34;: true }   1 2 3 4 5 6 7 8 9  \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34; ?\u0026gt; \u0026lt;Order\u0026gt; \u0026lt;id\u0026gt;0\u0026lt;/id\u0026gt; \u0026lt;petId\u0026gt;0\u0026lt;/petId\u0026gt; \u0026lt;quantity\u0026gt;0\u0026lt;/quantity\u0026gt; \u0026lt;shipDate\u0026gt;2020-02-26T14:49:53Z\u0026lt;/shipDate\u0026gt; \u0026lt;status\u0026gt;placed\u0026lt;/status\u0026gt; \u0026lt;complete\u0026gt;true\u0026lt;/complete\u0026gt; \u0026lt;/Order\u0026gt;   Responses    Status Meaning Description Schema     200 OK successful operation Order   400 Bad Request Invalid Order None    This operation does not require authentication  user Operations about user\nFind out more about our store\ngetUserByName \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;https://petstore.swagger.io/v2/user/{username}\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;GET\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;GET\u0026#34;, \u0026#34;https://petstore.swagger.io/v2/user/{username}\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  var headers = { \u0026#39;Accept\u0026#39;:\u0026#39;application/json\u0026#39; }; $.ajax({ url: \u0026#39;https://petstore.swagger.io/v2/user/{username}\u0026#39;, method: \u0026#39;get\u0026#39;, headers: headers, success: function(data) { console.log(JSON.stringify(data)); } })   1 2 3 4  GET https://petstore.swagger.io/v2/user/{username} HTTP/1.1 Host: petstore.swagger.io Accept: application/json   GET /user/{username}\nGet user by user name\nParameters    Name In Type Required Description     username path string true The name that needs to be fetched. Use user1 for testing.     Example responses\n  200 Response\n 1 2 3 4 5 6 7 8 9 10  { \u0026#34;id\u0026#34;: 0, \u0026#34;username\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;firstName\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;lastName\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;password\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;userStatus\u0026#34;: 0 }   1 2 3 4 5 6 7 8 9 10 11  \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34; ?\u0026gt; \u0026lt;User\u0026gt; \u0026lt;id\u0026gt;0\u0026lt;/id\u0026gt; \u0026lt;username\u0026gt;string\u0026lt;/username\u0026gt; \u0026lt;firstName\u0026gt;string\u0026lt;/firstName\u0026gt; \u0026lt;lastName\u0026gt;string\u0026lt;/lastName\u0026gt; \u0026lt;email\u0026gt;string\u0026lt;/email\u0026gt; \u0026lt;password\u0026gt;string\u0026lt;/password\u0026gt; \u0026lt;phone\u0026gt;string\u0026lt;/phone\u0026gt; \u0026lt;userStatus\u0026gt;0\u0026lt;/userStatus\u0026gt; \u0026lt;/User\u0026gt;   Responses    Status Meaning Description Schema     200 OK successful operation User   400 Bad Request Invalid username supplied None   404 Not Found User not found None    This operation does not require authentication  updateUser \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;https://petstore.swagger.io/v2/user/{username}\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;PUT\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Content-Type\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;PUT\u0026#34;, \u0026#34;https://petstore.swagger.io/v2/user/{username}\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  var headers = { \u0026#39;Content-Type\u0026#39;:\u0026#39;application/json\u0026#39; }; $.ajax({ url: \u0026#39;https://petstore.swagger.io/v2/user/{username}\u0026#39;, method: \u0026#39;put\u0026#39;, headers: headers, success: function(data) { console.log(JSON.stringify(data)); } })   1 2 3 4  PUT https://petstore.swagger.io/v2/user/{username} HTTP/1.1 Host: petstore.swagger.io Content-Type: application/json   PUT /user/{username}\nUpdated user\nThis can only be done by the logged in user.\n Body parameter\n 1 2 3 4 5 6 7 8 9 10  { \u0026#34;id\u0026#34;: 0, \u0026#34;username\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;firstName\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;lastName\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;password\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;userStatus\u0026#34;: 0 }   Parameters    Name In Type Required Description     username path string true name that need to be updated   body body User true Updated user object    Responses    Status Meaning Description Schema     400 Bad Request Invalid user supplied None   404 Not Found User not found None    This operation does not require authentication  deleteUser \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;https://petstore.swagger.io/v2/user/{username}\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;DELETE\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;DELETE\u0026#34;, \u0026#34;https://petstore.swagger.io/v2/user/{username}\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   1 2 3 4 5 6 7 8 9 10  $.ajax({ url: \u0026#39;https://petstore.swagger.io/v2/user/{username}\u0026#39;, method: \u0026#39;delete\u0026#39;, success: function(data) { console.log(JSON.stringify(data)); } })   1 2 3  DELETE https://petstore.swagger.io/v2/user/{username} HTTP/1.1 Host: petstore.swagger.io   DELETE /user/{username}\nDelete user\nThis can only be done by the logged in user.\nParameters    Name In Type Required Description     username path string true The name that needs to be deleted    Responses    Status Meaning Description Schema     400 Bad Request Invalid username supplied None   404 Not Found User not found None    This operation does not require authentication  loginUser \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;https://petstore.swagger.io/v2/user/login?username=string\u0026amp;password=string\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;GET\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;GET\u0026#34;, \u0026#34;https://petstore.swagger.io/v2/user/login\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  var headers = { \u0026#39;Accept\u0026#39;:\u0026#39;application/json\u0026#39; }; $.ajax({ url: \u0026#39;https://petstore.swagger.io/v2/user/login\u0026#39;, method: \u0026#39;get\u0026#39;, data: \u0026#39;?username=string\u0026amp;password=string\u0026#39;, headers: headers, success: function(data) { console.log(JSON.stringify(data)); } })   1 2 3 4  GET https://petstore.swagger.io/v2/user/login?username=string\u0026amp;password=string HTTP/1.1 Host: petstore.swagger.io Accept: application/json   GET /user/login\nLogs user into the system\nParameters    Name In Type Required Description     username query string true The user name for login   password query string true The password for login in clear text     Example responses\n  200 Response\n 1  \u0026#34;string\u0026#34;   Responses    Status Meaning Description Schema     200 OK successful operation string   400 Bad Request Invalid username/password supplied None    Response Headers    Status Header Type Format Description     200 X-Expires-After string date-time date in UTC when token expires   200 X-Rate-Limit integer int32 calls per hour allowed by the user    This operation does not require authentication  logoutUser \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;https://petstore.swagger.io/v2/user/logout\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;GET\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;GET\u0026#34;, \u0026#34;https://petstore.swagger.io/v2/user/logout\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   1 2 3 4 5 6 7 8 9 10  $.ajax({ url: \u0026#39;https://petstore.swagger.io/v2/user/logout\u0026#39;, method: \u0026#39;get\u0026#39;, success: function(data) { console.log(JSON.stringify(data)); } })   1 2 3  GET https://petstore.swagger.io/v2/user/logout HTTP/1.1 Host: petstore.swagger.io   GET /user/logout\nLogs out current logged in user session\nResponses    Status Meaning Description Schema     default Default successful operation None    This operation does not require authentication  createUser \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;https://petstore.swagger.io/v2/user\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;POST\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Content-Type\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;POST\u0026#34;, \u0026#34;https://petstore.swagger.io/v2/user\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  var headers = { \u0026#39;Content-Type\u0026#39;:\u0026#39;application/json\u0026#39; }; $.ajax({ url: \u0026#39;https://petstore.swagger.io/v2/user\u0026#39;, method: \u0026#39;post\u0026#39;, headers: headers, success: function(data) { console.log(JSON.stringify(data)); } })   1 2 3 4  POST https://petstore.swagger.io/v2/user HTTP/1.1 Host: petstore.swagger.io Content-Type: application/json   POST /user\nCreate user\nThis can only be done by the logged in user.\n Body parameter\n 1 2 3 4 5 6 7 8 9 10  { \u0026#34;id\u0026#34;: 0, \u0026#34;username\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;firstName\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;lastName\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;password\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;userStatus\u0026#34;: 0 }   Parameters    Name In Type Required Description     body body User true Created user object    Responses    Status Meaning Description Schema     default Default successful operation None    This operation does not require authentication  createUsersWithArrayInput \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;https://petstore.swagger.io/v2/user/createWithArray\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;POST\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Content-Type\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;POST\u0026#34;, \u0026#34;https://petstore.swagger.io/v2/user/createWithArray\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  var headers = { \u0026#39;Content-Type\u0026#39;:\u0026#39;application/json\u0026#39; }; $.ajax({ url: \u0026#39;https://petstore.swagger.io/v2/user/createWithArray\u0026#39;, method: \u0026#39;post\u0026#39;, headers: headers, success: function(data) { console.log(JSON.stringify(data)); } })   1 2 3 4  POST https://petstore.swagger.io/v2/user/createWithArray HTTP/1.1 Host: petstore.swagger.io Content-Type: application/json   POST /user/createWithArray\nCreates list of users with given input array\n Body parameter\n 1 2 3 4 5 6 7 8 9 10 11 12  [ { \u0026#34;id\u0026#34;: 0, \u0026#34;username\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;firstName\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;lastName\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;password\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;userStatus\u0026#34;: 0 } ]   Parameters    Name In Type Required Description     body body UserArray true List of user object    Responses    Status Meaning Description Schema     default Default successful operation None    This operation does not require authentication  createUsersWithListInput \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;https://petstore.swagger.io/v2/user/createWithList\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;POST\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Content-Type\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;POST\u0026#34;, \u0026#34;https://petstore.swagger.io/v2/user/createWithList\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  var headers = { \u0026#39;Content-Type\u0026#39;:\u0026#39;application/json\u0026#39; }; $.ajax({ url: \u0026#39;https://petstore.swagger.io/v2/user/createWithList\u0026#39;, method: \u0026#39;post\u0026#39;, headers: headers, success: function(data) { console.log(JSON.stringify(data)); } })   1 2 3 4  POST https://petstore.swagger.io/v2/user/createWithList HTTP/1.1 Host: petstore.swagger.io Content-Type: application/json   POST /user/createWithList\nCreates list of users with given input array\n Body parameter\n 1 2 3 4 5 6 7 8 9 10 11 12  [ { \u0026#34;id\u0026#34;: 0, \u0026#34;username\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;firstName\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;lastName\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;password\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;userStatus\u0026#34;: 0 } ]   Parameters    Name In Type Required Description     body body UserArray true List of user object    Responses    Status Meaning Description Schema     default Default successful operation None    This operation does not require authentication  Schemas Category \n1 2 3 4 5  { \u0026#34;id\u0026#34;: 0, \u0026#34;name\u0026#34;: \u0026#34;string\u0026#34; }   Properties    Name Type Required Restrictions Description     id integer(int64) false none none   name string false none none    Pet \n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  { \u0026#34;id\u0026#34;: 0, \u0026#34;category\u0026#34;: { \u0026#34;id\u0026#34;: 0, \u0026#34;name\u0026#34;: \u0026#34;string\u0026#34; }, \u0026#34;name\u0026#34;: \u0026#34;doggie\u0026#34;, \u0026#34;photoUrls\u0026#34;: [ \u0026#34;string\u0026#34; ], \u0026#34;tags\u0026#34;: [ { \u0026#34;id\u0026#34;: 0, \u0026#34;name\u0026#34;: \u0026#34;string\u0026#34; } ], \u0026#34;status\u0026#34;: \u0026#34;available\u0026#34; }   Properties    Name Type Required Restrictions Description     id integer(int64) false none none   category Category false none none   name string true none none   photoUrls [string] true none none   tags [Tag] false none none   status string false none pet status in the store    Enumerated Values    Property Value     status available   status pending   status sold    Tag \n1 2 3 4 5  { \u0026#34;id\u0026#34;: 0, \u0026#34;name\u0026#34;: \u0026#34;string\u0026#34; }   Properties    Name Type Required Restrictions Description     id integer(int64) false none none   name string false none none    ApiResponse \n1 2 3 4 5 6  { \u0026#34;code\u0026#34;: 0, \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;message\u0026#34;: \u0026#34;string\u0026#34; }   Properties    Name Type Required Restrictions Description     code integer(int32) false none none   type string false none none   message string false none none    Order \n1 2 3 4 5 6 7 8 9  { \u0026#34;id\u0026#34;: 0, \u0026#34;petId\u0026#34;: 0, \u0026#34;quantity\u0026#34;: 0, \u0026#34;shipDate\u0026#34;: \u0026#34;2020-02-26T14:49:53Z\u0026#34;, \u0026#34;status\u0026#34;: \u0026#34;placed\u0026#34;, \u0026#34;complete\u0026#34;: true }   Properties    Name Type Required Restrictions Description     id integer(int64) false none none   petId integer(int64) false none none   quantity integer(int32) false none none   shipDate string(date-time) false none none   status string false none Order Status   complete boolean false none none    Enumerated Values    Property Value     status placed   status approved   status delivered    User \n1 2 3 4 5 6 7 8 9 10 11  { \u0026#34;id\u0026#34;: 0, \u0026#34;username\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;firstName\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;lastName\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;password\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;userStatus\u0026#34;: 0 }   Properties    Name Type Required Restrictions Description     id integer(int64) false none none   username string false none none   firstName string false none none   lastName string false none none   email string false none none   password string false none none   phone string false none none   userStatus integer(int32) false none User Status    ","description":"","id":26,"section":"docs","tags":null,"title":"Swagger Petstore","uri":"/es/docs/apis/petstore/"},{"content":"Swagger Petstore v1.0.3  Scroll down for code samples, example requests and responses. Select a language for code samples from the tabs above or the mobile navigation menu.\n This is a sample server Petstore server. You can find out more about Swagger at http://swagger.io or on irc.freenode.net, #swagger. For this sample, you can use the api key special-key to test the authorization filters.\nBase URLs:\n  https://petstore.swagger.io/v2\n  http://petstore.swagger.io/v2\n  Terms of service\nEmail: Support\nLicense: Apache 2.0\nAuthentication  API Key (api_key)  Parameter Name: api_key, in: header.      oAuth2 authentication.\n Flow: implicit Authorization URL = https://petstore.swagger.io/oauth/authorize       Scope Scope Description     read:pets read your pets   write:pets modify pets in your account    pet Everything about your Pets\nFind out more\ngetPetById \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;https://petstore.swagger.io/v2/pet/{petId}\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;GET\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   GET /pet/{petId}\nFind pet by ID\nReturns a single pet\nParameters    Name In Type Required Description     petId path integer(int64) true ID of pet to return     Example responses\n  200 Response\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  { \u0026#34;id\u0026#34;: 0, \u0026#34;category\u0026#34;: { \u0026#34;id\u0026#34;: 0, \u0026#34;name\u0026#34;: \u0026#34;string\u0026#34; }, \u0026#34;name\u0026#34;: \u0026#34;doggie\u0026#34;, \u0026#34;photoUrls\u0026#34;: [ \u0026#34;string\u0026#34; ], \u0026#34;tags\u0026#34;: [ { \u0026#34;id\u0026#34;: 0, \u0026#34;name\u0026#34;: \u0026#34;string\u0026#34; } ], \u0026#34;status\u0026#34;: \u0026#34;available\u0026#34; }   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34; ?\u0026gt; \u0026lt;Pet\u0026gt; \u0026lt;id\u0026gt;0\u0026lt;/id\u0026gt; \u0026lt;category\u0026gt; \u0026lt;id\u0026gt;0\u0026lt;/id\u0026gt; \u0026lt;name\u0026gt;string\u0026lt;/name\u0026gt; \u0026lt;/category\u0026gt; \u0026lt;name\u0026gt;doggie\u0026lt;/name\u0026gt; \u0026lt;photoUrls\u0026gt;string\u0026lt;/photoUrls\u0026gt; \u0026lt;tags\u0026gt; \u0026lt;id\u0026gt;0\u0026lt;/id\u0026gt; \u0026lt;name\u0026gt;string\u0026lt;/name\u0026gt; \u0026lt;/tags\u0026gt; \u0026lt;status\u0026gt;available\u0026lt;/status\u0026gt; \u0026lt;/Pet\u0026gt;   Responses    Status Meaning Description Schema     200 OK successful operation Pet   400 Bad Request Invalid ID supplied None   404 Not Found Pet not found None    To perform this operation, you must be authenticated by means of one of the following methods: api_key  updatePetWithForm \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;https://petstore.swagger.io/v2/pet/{petId}\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;POST\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   POST /pet/{petId}\nUpdates a pet in the store with form data\n Body parameter\n 1 2 3  name:stringstatus:string  Parameters    Name In Type Required Description     petId path integer(int64) true ID of pet that needs to be updated   body body object false none   » name body string false Updated name of the pet   » status body string false Updated status of the pet    Responses    Status Meaning Description Schema     405 Method Not Allowed Invalid input None    To perform this operation, you must be authenticated by means of one of the following methods: petstore_auth ( Scopes: write:pets read:pets )  deletePet \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;https://petstore.swagger.io/v2/pet/{petId}\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;DELETE\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   DELETE /pet/{petId}\nDeletes a pet\nParameters    Name In Type Required Description     api_key header string false none   petId path integer(int64) true Pet id to delete    Responses    Status Meaning Description Schema     400 Bad Request Invalid ID supplied None   404 Not Found Pet not found None    To perform this operation, you must be authenticated by means of one of the following methods: petstore_auth ( Scopes: write:pets read:pets )  uploadFile \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;https://petstore.swagger.io/v2/pet/{petId}/uploadImage\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;POST\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   POST /pet/{petId}/uploadImage\nuploads an image\n Body parameter\n 1 2 3  additionalMetadata:stringfile:string  Parameters    Name In Type Required Description     petId path integer(int64) true ID of pet to update   body body object false none   » additionalMetadata body string false Additional data to pass to server   » file body string(binary) false file to upload     Example responses\n  200 Response\n 1 2 3 4 5  { \u0026#34;code\u0026#34;: 0, \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;message\u0026#34;: \u0026#34;string\u0026#34; }   Responses    Status Meaning Description Schema     200 OK successful operation ApiResponse    To perform this operation, you must be authenticated by means of one of the following methods: petstore_auth ( Scopes: write:pets read:pets )  addPet \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;https://petstore.swagger.io/v2/pet\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;POST\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   POST /pet\nAdd a new pet to the store\n Body parameter\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  { \u0026#34;id\u0026#34;: 0, \u0026#34;category\u0026#34;: { \u0026#34;id\u0026#34;: 0, \u0026#34;name\u0026#34;: \u0026#34;string\u0026#34; }, \u0026#34;name\u0026#34;: \u0026#34;doggie\u0026#34;, \u0026#34;photoUrls\u0026#34;: [ \u0026#34;string\u0026#34; ], \u0026#34;tags\u0026#34;: [ { \u0026#34;id\u0026#34;: 0, \u0026#34;name\u0026#34;: \u0026#34;string\u0026#34; } ], \u0026#34;status\u0026#34;: \u0026#34;available\u0026#34; }   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34; ?\u0026gt; \u0026lt;Pet\u0026gt; \u0026lt;id\u0026gt;0\u0026lt;/id\u0026gt; \u0026lt;category\u0026gt; \u0026lt;id\u0026gt;0\u0026lt;/id\u0026gt; \u0026lt;name\u0026gt;string\u0026lt;/name\u0026gt; \u0026lt;/category\u0026gt; \u0026lt;name\u0026gt;doggie\u0026lt;/name\u0026gt; \u0026lt;photoUrls\u0026gt;string\u0026lt;/photoUrls\u0026gt; \u0026lt;tags\u0026gt; \u0026lt;id\u0026gt;0\u0026lt;/id\u0026gt; \u0026lt;name\u0026gt;string\u0026lt;/name\u0026gt; \u0026lt;/tags\u0026gt; \u0026lt;status\u0026gt;available\u0026lt;/status\u0026gt; \u0026lt;/Pet\u0026gt;   Parameters    Name In Type Required Description     body body Pet true Pet object that needs to be added to the store    Responses    Status Meaning Description Schema     405 Method Not Allowed Invalid input None    To perform this operation, you must be authenticated by means of one of the following methods: petstore_auth ( Scopes: write:pets read:pets )  updatePet \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;https://petstore.swagger.io/v2/pet\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;PUT\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   PUT /pet\nUpdate an existing pet\n Body parameter\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  { \u0026#34;id\u0026#34;: 0, \u0026#34;category\u0026#34;: { \u0026#34;id\u0026#34;: 0, \u0026#34;name\u0026#34;: \u0026#34;string\u0026#34; }, \u0026#34;name\u0026#34;: \u0026#34;doggie\u0026#34;, \u0026#34;photoUrls\u0026#34;: [ \u0026#34;string\u0026#34; ], \u0026#34;tags\u0026#34;: [ { \u0026#34;id\u0026#34;: 0, \u0026#34;name\u0026#34;: \u0026#34;string\u0026#34; } ], \u0026#34;status\u0026#34;: \u0026#34;available\u0026#34; }   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34; ?\u0026gt; \u0026lt;Pet\u0026gt; \u0026lt;id\u0026gt;0\u0026lt;/id\u0026gt; \u0026lt;category\u0026gt; \u0026lt;id\u0026gt;0\u0026lt;/id\u0026gt; \u0026lt;name\u0026gt;string\u0026lt;/name\u0026gt; \u0026lt;/category\u0026gt; \u0026lt;name\u0026gt;doggie\u0026lt;/name\u0026gt; \u0026lt;photoUrls\u0026gt;string\u0026lt;/photoUrls\u0026gt; \u0026lt;tags\u0026gt; \u0026lt;id\u0026gt;0\u0026lt;/id\u0026gt; \u0026lt;name\u0026gt;string\u0026lt;/name\u0026gt; \u0026lt;/tags\u0026gt; \u0026lt;status\u0026gt;available\u0026lt;/status\u0026gt; \u0026lt;/Pet\u0026gt;   Parameters    Name In Type Required Description     body body Pet true Pet object that needs to be added to the store    Responses    Status Meaning Description Schema     400 Bad Request Invalid ID supplied None   404 Not Found Pet not found None   405 Method Not Allowed Validation exception None    To perform this operation, you must be authenticated by means of one of the following methods: petstore_auth ( Scopes: write:pets read:pets )  findPetsByStatus \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;https://petstore.swagger.io/v2/pet/findByStatus?status=available\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;GET\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   GET /pet/findByStatus\nFinds Pets by status\nMultiple status values can be provided with comma separated strings\nParameters    Name In Type Required Description     status query array[string] true Status values that need to be considered for filter    Enumerated Values    Parameter Value     status available   status pending   status sold     Example responses\n  200 Response\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  [ { \u0026#34;id\u0026#34;: 0, \u0026#34;category\u0026#34;: { \u0026#34;id\u0026#34;: 0, \u0026#34;name\u0026#34;: \u0026#34;string\u0026#34; }, \u0026#34;name\u0026#34;: \u0026#34;doggie\u0026#34;, \u0026#34;photoUrls\u0026#34;: [ \u0026#34;string\u0026#34; ], \u0026#34;tags\u0026#34;: [ { \u0026#34;id\u0026#34;: 0, \u0026#34;name\u0026#34;: \u0026#34;string\u0026#34; } ], \u0026#34;status\u0026#34;: \u0026#34;available\u0026#34; } ]   1 2 3 4 5 6 7 8 9 10 11 12 13  \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34; ?\u0026gt; \u0026lt;id\u0026gt;0\u0026lt;/id\u0026gt; \u0026lt;category\u0026gt; \u0026lt;id\u0026gt;0\u0026lt;/id\u0026gt; \u0026lt;name\u0026gt;string\u0026lt;/name\u0026gt; \u0026lt;/category\u0026gt; \u0026lt;name\u0026gt;doggie\u0026lt;/name\u0026gt; \u0026lt;photoUrls\u0026gt;string\u0026lt;/photoUrls\u0026gt; \u0026lt;tags\u0026gt; \u0026lt;id\u0026gt;0\u0026lt;/id\u0026gt; \u0026lt;name\u0026gt;string\u0026lt;/name\u0026gt; \u0026lt;/tags\u0026gt; \u0026lt;status\u0026gt;available\u0026lt;/status\u0026gt;   Responses    Status Meaning Description Schema     200 OK successful operation Inline   400 Bad Request Invalid status value None    Response Schema Status Code 200\n   Name Type Required Restrictions Description     anonymous [Pet] false none none   » id integer(int64) false none none   » category Category false none none   »» id integer(int64) false none none   »» name string false none none   » name string true none none   » photoUrls [string] true none none   » tags [Tag] false none none   »» id integer(int64) false none none   »» name string false none none   » status string false none pet status in the store    Enumerated Values    Property Value     status available   status pending   status sold    To perform this operation, you must be authenticated by means of one of the following methods: petstore_auth ( Scopes: write:pets read:pets )  findPetsByTags \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;https://petstore.swagger.io/v2/pet/findByTags?tags=string\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;GET\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   GET /pet/findByTags\nFinds Pets by tags\nMultiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.\nParameters    Name In Type Required Description     tags query array[string] true Tags to filter by     Example responses\n  200 Response\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  [ { \u0026#34;id\u0026#34;: 0, \u0026#34;category\u0026#34;: { \u0026#34;id\u0026#34;: 0, \u0026#34;name\u0026#34;: \u0026#34;string\u0026#34; }, \u0026#34;name\u0026#34;: \u0026#34;doggie\u0026#34;, \u0026#34;photoUrls\u0026#34;: [ \u0026#34;string\u0026#34; ], \u0026#34;tags\u0026#34;: [ { \u0026#34;id\u0026#34;: 0, \u0026#34;name\u0026#34;: \u0026#34;string\u0026#34; } ], \u0026#34;status\u0026#34;: \u0026#34;available\u0026#34; } ]   1 2 3 4 5 6 7 8 9 10 11 12 13  \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34; ?\u0026gt; \u0026lt;id\u0026gt;0\u0026lt;/id\u0026gt; \u0026lt;category\u0026gt; \u0026lt;id\u0026gt;0\u0026lt;/id\u0026gt; \u0026lt;name\u0026gt;string\u0026lt;/name\u0026gt; \u0026lt;/category\u0026gt; \u0026lt;name\u0026gt;doggie\u0026lt;/name\u0026gt; \u0026lt;photoUrls\u0026gt;string\u0026lt;/photoUrls\u0026gt; \u0026lt;tags\u0026gt; \u0026lt;id\u0026gt;0\u0026lt;/id\u0026gt; \u0026lt;name\u0026gt;string\u0026lt;/name\u0026gt; \u0026lt;/tags\u0026gt; \u0026lt;status\u0026gt;available\u0026lt;/status\u0026gt;   Responses    Status Meaning Description Schema     200 OK successful operation Inline   400 Bad Request Invalid tag value None    Response Schema Status Code 200\n   Name Type Required Restrictions Description     anonymous [Pet] false none none   » id integer(int64) false none none   » category Category false none none   »» id integer(int64) false none none   »» name string false none none   » name string true none none   » photoUrls [string] true none none   » tags [Tag] false none none   »» id integer(int64) false none none   »» name string false none none   » status string false none pet status in the store    Enumerated Values    Property Value     status available   status pending   status sold    To perform this operation, you must be authenticated by means of one of the following methods: petstore_auth ( Scopes: write:pets read:pets )  store Access to Petstore orders\ngetInventory \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;https://petstore.swagger.io/v2/store/inventory\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;GET\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   GET /store/inventory\nReturns pet inventories by status\nReturns a map of status codes to quantities\n Example responses\n  200 Response\n 1 2 3 4  { \u0026#34;property1\u0026#34;: 0, \u0026#34;property2\u0026#34;: 0 }   Responses    Status Meaning Description Schema     200 OK successful operation Inline    Response Schema Status Code 200\n   Name Type Required Restrictions Description     » additionalProperties integer(int32) false none none    To perform this operation, you must be authenticated by means of one of the following methods: api_key  getOrderById \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;https://petstore.swagger.io/v2/store/order/{orderId}\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;GET\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   GET /store/order/{orderId}\nFind purchase order by ID\nFor valid response try integer IDs with value \u0026gt;= 1 and \u0026lt;= 10. Other values will generated exceptions\nParameters    Name In Type Required Description     orderId path integer(int64) true ID of pet that needs to be fetched     Example responses\n  200 Response\n 1 2 3 4 5 6 7 8  { \u0026#34;id\u0026#34;: 0, \u0026#34;petId\u0026#34;: 0, \u0026#34;quantity\u0026#34;: 0, \u0026#34;shipDate\u0026#34;: \u0026#34;2020-02-26T14:37:23Z\u0026#34;, \u0026#34;status\u0026#34;: \u0026#34;placed\u0026#34;, \u0026#34;complete\u0026#34;: true }   1 2 3 4 5 6 7 8 9  \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34; ?\u0026gt; \u0026lt;Order\u0026gt; \u0026lt;id\u0026gt;0\u0026lt;/id\u0026gt; \u0026lt;petId\u0026gt;0\u0026lt;/petId\u0026gt; \u0026lt;quantity\u0026gt;0\u0026lt;/quantity\u0026gt; \u0026lt;shipDate\u0026gt;2020-02-26T14:37:23Z\u0026lt;/shipDate\u0026gt; \u0026lt;status\u0026gt;placed\u0026lt;/status\u0026gt; \u0026lt;complete\u0026gt;true\u0026lt;/complete\u0026gt; \u0026lt;/Order\u0026gt;   Responses    Status Meaning Description Schema     200 OK successful operation Order   400 Bad Request Invalid ID supplied None   404 Not Found Order not found None    This operation does not require authentication  deleteOrder \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;https://petstore.swagger.io/v2/store/order/{orderId}\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;DELETE\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   DELETE /store/order/{orderId}\nDelete purchase order by ID\nFor valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors\nParameters    Name In Type Required Description     orderId path integer(int64) true ID of the order that needs to be deleted    Responses    Status Meaning Description Schema     400 Bad Request Invalid ID supplied None   404 Not Found Order not found None    This operation does not require authentication  placeOrder \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;https://petstore.swagger.io/v2/store/order\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;POST\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   POST /store/order\nPlace an order for a pet\n Body parameter\n 1 2 3 4 5 6 7 8  { \u0026#34;id\u0026#34;: 0, \u0026#34;petId\u0026#34;: 0, \u0026#34;quantity\u0026#34;: 0, \u0026#34;shipDate\u0026#34;: \u0026#34;2020-02-26T14:37:23Z\u0026#34;, \u0026#34;status\u0026#34;: \u0026#34;placed\u0026#34;, \u0026#34;complete\u0026#34;: true }   Parameters    Name In Type Required Description     body body Order true order placed for purchasing the pet     Example responses\n  200 Response\n 1 2 3 4 5 6 7 8  { \u0026#34;id\u0026#34;: 0, \u0026#34;petId\u0026#34;: 0, \u0026#34;quantity\u0026#34;: 0, \u0026#34;shipDate\u0026#34;: \u0026#34;2020-02-26T14:37:23Z\u0026#34;, \u0026#34;status\u0026#34;: \u0026#34;placed\u0026#34;, \u0026#34;complete\u0026#34;: true }   1 2 3 4 5 6 7 8 9  \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34; ?\u0026gt; \u0026lt;Order\u0026gt; \u0026lt;id\u0026gt;0\u0026lt;/id\u0026gt; \u0026lt;petId\u0026gt;0\u0026lt;/petId\u0026gt; \u0026lt;quantity\u0026gt;0\u0026lt;/quantity\u0026gt; \u0026lt;shipDate\u0026gt;2020-02-26T14:37:23Z\u0026lt;/shipDate\u0026gt; \u0026lt;status\u0026gt;placed\u0026lt;/status\u0026gt; \u0026lt;complete\u0026gt;true\u0026lt;/complete\u0026gt; \u0026lt;/Order\u0026gt;   Responses    Status Meaning Description Schema     200 OK successful operation Order   400 Bad Request Invalid Order None    This operation does not require authentication  user Operations about user\nFind out more about our store\ngetUserByName \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;https://petstore.swagger.io/v2/user/{username}\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;GET\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   GET /user/{username}\nGet user by user name\nParameters    Name In Type Required Description     username path string true The name that needs to be fetched. Use user1 for testing.     Example responses\n  200 Response\n 1 2 3 4 5 6 7 8 9 10  { \u0026#34;id\u0026#34;: 0, \u0026#34;username\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;firstName\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;lastName\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;password\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;userStatus\u0026#34;: 0 }   1 2 3 4 5 6 7 8 9 10 11  \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34; ?\u0026gt; \u0026lt;User\u0026gt; \u0026lt;id\u0026gt;0\u0026lt;/id\u0026gt; \u0026lt;username\u0026gt;string\u0026lt;/username\u0026gt; \u0026lt;firstName\u0026gt;string\u0026lt;/firstName\u0026gt; \u0026lt;lastName\u0026gt;string\u0026lt;/lastName\u0026gt; \u0026lt;email\u0026gt;string\u0026lt;/email\u0026gt; \u0026lt;password\u0026gt;string\u0026lt;/password\u0026gt; \u0026lt;phone\u0026gt;string\u0026lt;/phone\u0026gt; \u0026lt;userStatus\u0026gt;0\u0026lt;/userStatus\u0026gt; \u0026lt;/User\u0026gt;   Responses    Status Meaning Description Schema     200 OK successful operation User   400 Bad Request Invalid username supplied None   404 Not Found User not found None    This operation does not require authentication  updateUser \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;https://petstore.swagger.io/v2/user/{username}\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;PUT\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   PUT /user/{username}\nUpdated user\nThis can only be done by the logged in user.\n Body parameter\n 1 2 3 4 5 6 7 8 9 10  { \u0026#34;id\u0026#34;: 0, \u0026#34;username\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;firstName\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;lastName\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;password\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;userStatus\u0026#34;: 0 }   Parameters    Name In Type Required Description     username path string true name that need to be updated   body body User true Updated user object    Responses    Status Meaning Description Schema     400 Bad Request Invalid user supplied None   404 Not Found User not found None    This operation does not require authentication  deleteUser \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;https://petstore.swagger.io/v2/user/{username}\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;DELETE\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   DELETE /user/{username}\nDelete user\nThis can only be done by the logged in user.\nParameters    Name In Type Required Description     username path string true The name that needs to be deleted    Responses    Status Meaning Description Schema     400 Bad Request Invalid username supplied None   404 Not Found User not found None    This operation does not require authentication  loginUser \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;https://petstore.swagger.io/v2/user/login?username=string\u0026amp;password=string\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;GET\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   GET /user/login\nLogs user into the system\nParameters    Name In Type Required Description     username query string true The user name for login   password query string true The password for login in clear text     Example responses\n  200 Response\n 1  \u0026#34;string\u0026#34;   Responses    Status Meaning Description Schema     200 OK successful operation string   400 Bad Request Invalid username/password supplied None    Response Headers    Status Header Type Format Description     200 X-Expires-After string date-time date in UTC when token expires   200 X-Rate-Limit integer int32 calls per hour allowed by the user    This operation does not require authentication  logoutUser \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;https://petstore.swagger.io/v2/user/logout\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;GET\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   GET /user/logout\nLogs out current logged in user session\nResponses    Status Meaning Description Schema     default Default successful operation None    This operation does not require authentication  createUser \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;https://petstore.swagger.io/v2/user\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;POST\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   POST /user\nCreate user\nThis can only be done by the logged in user.\n Body parameter\n 1 2 3 4 5 6 7 8 9 10  { \u0026#34;id\u0026#34;: 0, \u0026#34;username\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;firstName\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;lastName\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;password\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;userStatus\u0026#34;: 0 }   Parameters    Name In Type Required Description     body body User true Created user object    Responses    Status Meaning Description Schema     default Default successful operation None    This operation does not require authentication  createUsersWithArrayInput \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;https://petstore.swagger.io/v2/user/createWithArray\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;POST\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   POST /user/createWithArray\nCreates list of users with given input array\n Body parameter\n 1 2 3 4 5 6 7 8 9 10 11 12  [ { \u0026#34;id\u0026#34;: 0, \u0026#34;username\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;firstName\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;lastName\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;password\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;userStatus\u0026#34;: 0 } ]   Parameters    Name In Type Required Description     body body UserArray true List of user object    Responses    Status Meaning Description Schema     default Default successful operation None    This operation does not require authentication  createUsersWithListInput \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;https://petstore.swagger.io/v2/user/createWithList\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;POST\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   POST /user/createWithList\nCreates list of users with given input array\n Body parameter\n 1 2 3 4 5 6 7 8 9 10 11 12  [ { \u0026#34;id\u0026#34;: 0, \u0026#34;username\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;firstName\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;lastName\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;password\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;userStatus\u0026#34;: 0 } ]   Parameters    Name In Type Required Description     body body UserArray true List of user object    Responses    Status Meaning Description Schema     default Default successful operation None    This operation does not require authentication  Schemas Category \n1 2 3 4 5  { \u0026#34;id\u0026#34;: 0, \u0026#34;name\u0026#34;: \u0026#34;string\u0026#34; }   Properties    Name Type Required Restrictions Description     id integer(int64) false none none   name string false none none    Pet \n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  { \u0026#34;id\u0026#34;: 0, \u0026#34;category\u0026#34;: { \u0026#34;id\u0026#34;: 0, \u0026#34;name\u0026#34;: \u0026#34;string\u0026#34; }, \u0026#34;name\u0026#34;: \u0026#34;doggie\u0026#34;, \u0026#34;photoUrls\u0026#34;: [ \u0026#34;string\u0026#34; ], \u0026#34;tags\u0026#34;: [ { \u0026#34;id\u0026#34;: 0, \u0026#34;name\u0026#34;: \u0026#34;string\u0026#34; } ], \u0026#34;status\u0026#34;: \u0026#34;available\u0026#34; }   Properties    Name Type Required Restrictions Description     id integer(int64) false none none   category Category false none none   name string true none none   photoUrls [string] true none none   tags [Tag] false none none   status string false none pet status in the store    Enumerated Values    Property Value     status available   status pending   status sold    Tag \n1 2 3 4 5  { \u0026#34;id\u0026#34;: 0, \u0026#34;name\u0026#34;: \u0026#34;string\u0026#34; }   Properties    Name Type Required Restrictions Description     id integer(int64) false none none   name string false none none    ApiResponse \n1 2 3 4 5 6  { \u0026#34;code\u0026#34;: 0, \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;message\u0026#34;: \u0026#34;string\u0026#34; }   Properties    Name Type Required Restrictions Description     code integer(int32) false none none   type string false none none   message string false none none    Order \n1 2 3 4 5 6 7 8 9  { \u0026#34;id\u0026#34;: 0, \u0026#34;petId\u0026#34;: 0, \u0026#34;quantity\u0026#34;: 0, \u0026#34;shipDate\u0026#34;: \u0026#34;2020-02-26T14:37:23Z\u0026#34;, \u0026#34;status\u0026#34;: \u0026#34;placed\u0026#34;, \u0026#34;complete\u0026#34;: true }   Properties    Name Type Required Restrictions Description     id integer(int64) false none none   petId integer(int64) false none none   quantity integer(int32) false none none   shipDate string(date-time) false none none   status string false none Order Status   complete boolean false none none    Enumerated Values    Property Value     status placed   status approved   status delivered    User \n1 2 3 4 5 6 7 8 9 10 11  { \u0026#34;id\u0026#34;: 0, \u0026#34;username\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;firstName\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;lastName\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;password\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;userStatus\u0026#34;: 0 }   Properties    Name Type Required Restrictions Description     id integer(int64) false none none   username string false none none   firstName string false none none   lastName string false none none   email string false none none   password string false none none   phone string false none none   userStatus integer(int32) false none User Status    ","description":"","id":27,"section":"docs","tags":null,"title":"Swagger Petstore","uri":"/es/docs/apis/prueba/"},{"content":"Swagger Petstore v1.0.3  Scroll down for code samples, example requests and responses. Select a language for code samples from the tabs above or the mobile navigation menu.\n This is a sample server Petstore server. You can find out more about Swagger at http://swagger.io or on irc.freenode.net, #swagger. For this sample, you can use the api key special-key to test the authorization filters.\nBase URLs:\n  https://petstore.swagger.io/v2\n  http://petstore.swagger.io/v2\n  Terms of service\nEmail: Support\nLicense: Apache 2.0\nAuthentication  API Key (api_key)  Parameter Name: api_key, in: header.      oAuth2 authentication.\n Flow: implicit Authorization URL = https://petstore.swagger.io/oauth/authorize       Scope Scope Description     read:pets read your pets   write:pets modify pets in your account    pet Everything about your Pets\nFind out more\ngetPetById \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;https://petstore.swagger.io/v2/pet/{petId}\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;GET\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, \u0026#34;api_key\u0026#34;: []string{\u0026#34;API_KEY\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;GET\u0026#34;, \u0026#34;https://petstore.swagger.io/v2/pet/{petId}\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   GET /pet/{petId}\nFind pet by ID\nReturns a single pet\nParameters    Name In Type Required Description     petId path integer(int64) true ID of pet to return     Example responses\n  200 Response\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  { \u0026#34;id\u0026#34;: 0, \u0026#34;category\u0026#34;: { \u0026#34;id\u0026#34;: 0, \u0026#34;name\u0026#34;: \u0026#34;string\u0026#34; }, \u0026#34;name\u0026#34;: \u0026#34;doggie\u0026#34;, \u0026#34;photoUrls\u0026#34;: [ \u0026#34;string\u0026#34; ], \u0026#34;tags\u0026#34;: [ { \u0026#34;id\u0026#34;: 0, \u0026#34;name\u0026#34;: \u0026#34;string\u0026#34; } ], \u0026#34;status\u0026#34;: \u0026#34;available\u0026#34; }   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34; ?\u0026gt; \u0026lt;Pet\u0026gt; \u0026lt;id\u0026gt;0\u0026lt;/id\u0026gt; \u0026lt;category\u0026gt; \u0026lt;id\u0026gt;0\u0026lt;/id\u0026gt; \u0026lt;name\u0026gt;string\u0026lt;/name\u0026gt; \u0026lt;/category\u0026gt; \u0026lt;name\u0026gt;doggie\u0026lt;/name\u0026gt; \u0026lt;photoUrls\u0026gt;string\u0026lt;/photoUrls\u0026gt; \u0026lt;tags\u0026gt; \u0026lt;id\u0026gt;0\u0026lt;/id\u0026gt; \u0026lt;name\u0026gt;string\u0026lt;/name\u0026gt; \u0026lt;/tags\u0026gt; \u0026lt;status\u0026gt;available\u0026lt;/status\u0026gt; \u0026lt;/Pet\u0026gt;   Responses    Status Meaning Description Schema     200 OK successful operation Pet   400 Bad Request Invalid ID supplied None   404 Not Found Pet not found None    To perform this operation, you must be authenticated by means of one of the following methods: api_key  updatePetWithForm \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;https://petstore.swagger.io/v2/pet/{petId}\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;POST\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Content-Type\u0026#34;: []string{\u0026#34;application/x-www-form-urlencoded\u0026#34;}, \u0026#34;Authorization\u0026#34;: []string{\u0026#34;Bearer {access-token}\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;POST\u0026#34;, \u0026#34;https://petstore.swagger.io/v2/pet/{petId}\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   POST /pet/{petId}\nUpdates a pet in the store with form data\n Body parameter\n 1 2 3  name:stringstatus:string  Parameters    Name In Type Required Description     petId path integer(int64) true ID of pet that needs to be updated   body body object false none   » name body string false Updated name of the pet   » status body string false Updated status of the pet    Responses    Status Meaning Description Schema     405 Method Not Allowed Invalid input None    To perform this operation, you must be authenticated by means of one of the following methods: petstore_auth ( Scopes: write:pets read:pets )  deletePet \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;https://petstore.swagger.io/v2/pet/{petId}\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;DELETE\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;api_key\u0026#34;: []string{\u0026#34;string\u0026#34;}, \u0026#34;Authorization\u0026#34;: []string{\u0026#34;Bearer {access-token}\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;DELETE\u0026#34;, \u0026#34;https://petstore.swagger.io/v2/pet/{petId}\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   DELETE /pet/{petId}\nDeletes a pet\nParameters    Name In Type Required Description     api_key header string false none   petId path integer(int64) true Pet id to delete    Responses    Status Meaning Description Schema     400 Bad Request Invalid ID supplied None   404 Not Found Pet not found None    To perform this operation, you must be authenticated by means of one of the following methods: petstore_auth ( Scopes: write:pets read:pets )  uploadFile \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;https://petstore.swagger.io/v2/pet/{petId}/uploadImage\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;POST\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Content-Type\u0026#34;: []string{\u0026#34;multipart/form-data\u0026#34;}, \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, \u0026#34;Authorization\u0026#34;: []string{\u0026#34;Bearer {access-token}\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;POST\u0026#34;, \u0026#34;https://petstore.swagger.io/v2/pet/{petId}/uploadImage\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   POST /pet/{petId}/uploadImage\nuploads an image\n Body parameter\n 1 2 3  additionalMetadata:stringfile:string  Parameters    Name In Type Required Description     petId path integer(int64) true ID of pet to update   body body object false none   » additionalMetadata body string false Additional data to pass to server   » file body string(binary) false file to upload     Example responses\n  200 Response\n 1 2 3 4 5  { \u0026#34;code\u0026#34;: 0, \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;message\u0026#34;: \u0026#34;string\u0026#34; }   Responses    Status Meaning Description Schema     200 OK successful operation ApiResponse    To perform this operation, you must be authenticated by means of one of the following methods: petstore_auth ( Scopes: write:pets read:pets )  addPet \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;https://petstore.swagger.io/v2/pet\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;POST\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Content-Type\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, \u0026#34;Authorization\u0026#34;: []string{\u0026#34;Bearer {access-token}\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;POST\u0026#34;, \u0026#34;https://petstore.swagger.io/v2/pet\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   POST /pet\nAdd a new pet to the store\n Body parameter\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  { \u0026#34;id\u0026#34;: 0, \u0026#34;category\u0026#34;: { \u0026#34;id\u0026#34;: 0, \u0026#34;name\u0026#34;: \u0026#34;string\u0026#34; }, \u0026#34;name\u0026#34;: \u0026#34;doggie\u0026#34;, \u0026#34;photoUrls\u0026#34;: [ \u0026#34;string\u0026#34; ], \u0026#34;tags\u0026#34;: [ { \u0026#34;id\u0026#34;: 0, \u0026#34;name\u0026#34;: \u0026#34;string\u0026#34; } ], \u0026#34;status\u0026#34;: \u0026#34;available\u0026#34; }   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34; ?\u0026gt; \u0026lt;Pet\u0026gt; \u0026lt;id\u0026gt;0\u0026lt;/id\u0026gt; \u0026lt;category\u0026gt; \u0026lt;id\u0026gt;0\u0026lt;/id\u0026gt; \u0026lt;name\u0026gt;string\u0026lt;/name\u0026gt; \u0026lt;/category\u0026gt; \u0026lt;name\u0026gt;doggie\u0026lt;/name\u0026gt; \u0026lt;photoUrls\u0026gt;string\u0026lt;/photoUrls\u0026gt; \u0026lt;tags\u0026gt; \u0026lt;id\u0026gt;0\u0026lt;/id\u0026gt; \u0026lt;name\u0026gt;string\u0026lt;/name\u0026gt; \u0026lt;/tags\u0026gt; \u0026lt;status\u0026gt;available\u0026lt;/status\u0026gt; \u0026lt;/Pet\u0026gt;   Parameters    Name In Type Required Description     body body Pet true Pet object that needs to be added to the store    Responses    Status Meaning Description Schema     405 Method Not Allowed Invalid input None    To perform this operation, you must be authenticated by means of one of the following methods: petstore_auth ( Scopes: write:pets read:pets )  updatePet \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;https://petstore.swagger.io/v2/pet\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;PUT\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Content-Type\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, \u0026#34;Authorization\u0026#34;: []string{\u0026#34;Bearer {access-token}\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;PUT\u0026#34;, \u0026#34;https://petstore.swagger.io/v2/pet\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   PUT /pet\nUpdate an existing pet\n Body parameter\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  { \u0026#34;id\u0026#34;: 0, \u0026#34;category\u0026#34;: { \u0026#34;id\u0026#34;: 0, \u0026#34;name\u0026#34;: \u0026#34;string\u0026#34; }, \u0026#34;name\u0026#34;: \u0026#34;doggie\u0026#34;, \u0026#34;photoUrls\u0026#34;: [ \u0026#34;string\u0026#34; ], \u0026#34;tags\u0026#34;: [ { \u0026#34;id\u0026#34;: 0, \u0026#34;name\u0026#34;: \u0026#34;string\u0026#34; } ], \u0026#34;status\u0026#34;: \u0026#34;available\u0026#34; }   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34; ?\u0026gt; \u0026lt;Pet\u0026gt; \u0026lt;id\u0026gt;0\u0026lt;/id\u0026gt; \u0026lt;category\u0026gt; \u0026lt;id\u0026gt;0\u0026lt;/id\u0026gt; \u0026lt;name\u0026gt;string\u0026lt;/name\u0026gt; \u0026lt;/category\u0026gt; \u0026lt;name\u0026gt;doggie\u0026lt;/name\u0026gt; \u0026lt;photoUrls\u0026gt;string\u0026lt;/photoUrls\u0026gt; \u0026lt;tags\u0026gt; \u0026lt;id\u0026gt;0\u0026lt;/id\u0026gt; \u0026lt;name\u0026gt;string\u0026lt;/name\u0026gt; \u0026lt;/tags\u0026gt; \u0026lt;status\u0026gt;available\u0026lt;/status\u0026gt; \u0026lt;/Pet\u0026gt;   Parameters    Name In Type Required Description     body body Pet true Pet object that needs to be added to the store    Responses    Status Meaning Description Schema     400 Bad Request Invalid ID supplied None   404 Not Found Pet not found None   405 Method Not Allowed Validation exception None    To perform this operation, you must be authenticated by means of one of the following methods: petstore_auth ( Scopes: write:pets read:pets )  findPetsByStatus \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;https://petstore.swagger.io/v2/pet/findByStatus?status=available\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;GET\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, \u0026#34;Authorization\u0026#34;: []string{\u0026#34;Bearer {access-token}\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;GET\u0026#34;, \u0026#34;https://petstore.swagger.io/v2/pet/findByStatus\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   GET /pet/findByStatus\nFinds Pets by status\nMultiple status values can be provided with comma separated strings\nParameters    Name In Type Required Description     status query array[string] true Status values that need to be considered for filter    Enumerated Values    Parameter Value     status available   status pending   status sold     Example responses\n  200 Response\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  [ { \u0026#34;id\u0026#34;: 0, \u0026#34;category\u0026#34;: { \u0026#34;id\u0026#34;: 0, \u0026#34;name\u0026#34;: \u0026#34;string\u0026#34; }, \u0026#34;name\u0026#34;: \u0026#34;doggie\u0026#34;, \u0026#34;photoUrls\u0026#34;: [ \u0026#34;string\u0026#34; ], \u0026#34;tags\u0026#34;: [ { \u0026#34;id\u0026#34;: 0, \u0026#34;name\u0026#34;: \u0026#34;string\u0026#34; } ], \u0026#34;status\u0026#34;: \u0026#34;available\u0026#34; } ]   1 2 3 4 5 6 7 8 9 10 11 12 13  \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34; ?\u0026gt; \u0026lt;id\u0026gt;0\u0026lt;/id\u0026gt; \u0026lt;category\u0026gt; \u0026lt;id\u0026gt;0\u0026lt;/id\u0026gt; \u0026lt;name\u0026gt;string\u0026lt;/name\u0026gt; \u0026lt;/category\u0026gt; \u0026lt;name\u0026gt;doggie\u0026lt;/name\u0026gt; \u0026lt;photoUrls\u0026gt;string\u0026lt;/photoUrls\u0026gt; \u0026lt;tags\u0026gt; \u0026lt;id\u0026gt;0\u0026lt;/id\u0026gt; \u0026lt;name\u0026gt;string\u0026lt;/name\u0026gt; \u0026lt;/tags\u0026gt; \u0026lt;status\u0026gt;available\u0026lt;/status\u0026gt;   Responses    Status Meaning Description Schema     200 OK successful operation Inline   400 Bad Request Invalid status value None    Response Schema Status Code 200\n   Name Type Required Restrictions Description     anonymous [Pet] false none none   » id integer(int64) false none none   » category Category false none none   »» id integer(int64) false none none   »» name string false none none   » name string true none none   » photoUrls [string] true none none   » tags [Tag] false none none   »» id integer(int64) false none none   »» name string false none none   » status string false none pet status in the store    Enumerated Values    Property Value     status available   status pending   status sold    To perform this operation, you must be authenticated by means of one of the following methods: petstore_auth ( Scopes: write:pets read:pets )  findPetsByTags \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;https://petstore.swagger.io/v2/pet/findByTags?tags=string\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;GET\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, \u0026#34;Authorization\u0026#34;: []string{\u0026#34;Bearer {access-token}\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;GET\u0026#34;, \u0026#34;https://petstore.swagger.io/v2/pet/findByTags\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   GET /pet/findByTags\nFinds Pets by tags\nMultiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.\nParameters    Name In Type Required Description     tags query array[string] true Tags to filter by     Example responses\n  200 Response\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  [ { \u0026#34;id\u0026#34;: 0, \u0026#34;category\u0026#34;: { \u0026#34;id\u0026#34;: 0, \u0026#34;name\u0026#34;: \u0026#34;string\u0026#34; }, \u0026#34;name\u0026#34;: \u0026#34;doggie\u0026#34;, \u0026#34;photoUrls\u0026#34;: [ \u0026#34;string\u0026#34; ], \u0026#34;tags\u0026#34;: [ { \u0026#34;id\u0026#34;: 0, \u0026#34;name\u0026#34;: \u0026#34;string\u0026#34; } ], \u0026#34;status\u0026#34;: \u0026#34;available\u0026#34; } ]   1 2 3 4 5 6 7 8 9 10 11 12 13  \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34; ?\u0026gt; \u0026lt;id\u0026gt;0\u0026lt;/id\u0026gt; \u0026lt;category\u0026gt; \u0026lt;id\u0026gt;0\u0026lt;/id\u0026gt; \u0026lt;name\u0026gt;string\u0026lt;/name\u0026gt; \u0026lt;/category\u0026gt; \u0026lt;name\u0026gt;doggie\u0026lt;/name\u0026gt; \u0026lt;photoUrls\u0026gt;string\u0026lt;/photoUrls\u0026gt; \u0026lt;tags\u0026gt; \u0026lt;id\u0026gt;0\u0026lt;/id\u0026gt; \u0026lt;name\u0026gt;string\u0026lt;/name\u0026gt; \u0026lt;/tags\u0026gt; \u0026lt;status\u0026gt;available\u0026lt;/status\u0026gt;   Responses    Status Meaning Description Schema     200 OK successful operation Inline   400 Bad Request Invalid tag value None    Response Schema Status Code 200\n   Name Type Required Restrictions Description     anonymous [Pet] false none none   » id integer(int64) false none none   » category Category false none none   »» id integer(int64) false none none   »» name string false none none   » name string true none none   » photoUrls [string] true none none   » tags [Tag] false none none   »» id integer(int64) false none none   »» name string false none none   » status string false none pet status in the store    Enumerated Values    Property Value     status available   status pending   status sold    To perform this operation, you must be authenticated by means of one of the following methods: petstore_auth ( Scopes: write:pets read:pets )  store Access to Petstore orders\ngetInventory \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;https://petstore.swagger.io/v2/store/inventory\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;GET\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, \u0026#34;api_key\u0026#34;: []string{\u0026#34;API_KEY\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;GET\u0026#34;, \u0026#34;https://petstore.swagger.io/v2/store/inventory\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   GET /store/inventory\nReturns pet inventories by status\nReturns a map of status codes to quantities\n Example responses\n  200 Response\n 1 2 3 4  { \u0026#34;property1\u0026#34;: 0, \u0026#34;property2\u0026#34;: 0 }   Responses    Status Meaning Description Schema     200 OK successful operation Inline    Response Schema Status Code 200\n   Name Type Required Restrictions Description     » additionalProperties integer(int32) false none none    To perform this operation, you must be authenticated by means of one of the following methods: api_key  getOrderById \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;https://petstore.swagger.io/v2/store/order/{orderId}\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;GET\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;GET\u0026#34;, \u0026#34;https://petstore.swagger.io/v2/store/order/{orderId}\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   GET /store/order/{orderId}\nFind purchase order by ID\nFor valid response try integer IDs with value \u0026gt;= 1 and \u0026lt;= 10. Other values will generated exceptions\nParameters    Name In Type Required Description     orderId path integer(int64) true ID of pet that needs to be fetched     Example responses\n  200 Response\n 1 2 3 4 5 6 7 8  { \u0026#34;id\u0026#34;: 0, \u0026#34;petId\u0026#34;: 0, \u0026#34;quantity\u0026#34;: 0, \u0026#34;shipDate\u0026#34;: \u0026#34;2020-02-26T13:11:40Z\u0026#34;, \u0026#34;status\u0026#34;: \u0026#34;placed\u0026#34;, \u0026#34;complete\u0026#34;: true }   1 2 3 4 5 6 7 8 9  \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34; ?\u0026gt; \u0026lt;Order\u0026gt; \u0026lt;id\u0026gt;0\u0026lt;/id\u0026gt; \u0026lt;petId\u0026gt;0\u0026lt;/petId\u0026gt; \u0026lt;quantity\u0026gt;0\u0026lt;/quantity\u0026gt; \u0026lt;shipDate\u0026gt;2020-02-26T13:11:40Z\u0026lt;/shipDate\u0026gt; \u0026lt;status\u0026gt;placed\u0026lt;/status\u0026gt; \u0026lt;complete\u0026gt;true\u0026lt;/complete\u0026gt; \u0026lt;/Order\u0026gt;   Responses    Status Meaning Description Schema     200 OK successful operation Order   400 Bad Request Invalid ID supplied None   404 Not Found Order not found None    This operation does not require authentication  deleteOrder \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;https://petstore.swagger.io/v2/store/order/{orderId}\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;DELETE\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;DELETE\u0026#34;, \u0026#34;https://petstore.swagger.io/v2/store/order/{orderId}\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   DELETE /store/order/{orderId}\nDelete purchase order by ID\nFor valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors\nParameters    Name In Type Required Description     orderId path integer(int64) true ID of the order that needs to be deleted    Responses    Status Meaning Description Schema     400 Bad Request Invalid ID supplied None   404 Not Found Order not found None    This operation does not require authentication  placeOrder \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;https://petstore.swagger.io/v2/store/order\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;POST\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Content-Type\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;POST\u0026#34;, \u0026#34;https://petstore.swagger.io/v2/store/order\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   POST /store/order\nPlace an order for a pet\n Body parameter\n 1 2 3 4 5 6 7 8  { \u0026#34;id\u0026#34;: 0, \u0026#34;petId\u0026#34;: 0, \u0026#34;quantity\u0026#34;: 0, \u0026#34;shipDate\u0026#34;: \u0026#34;2020-02-26T13:11:40Z\u0026#34;, \u0026#34;status\u0026#34;: \u0026#34;placed\u0026#34;, \u0026#34;complete\u0026#34;: true }   Parameters    Name In Type Required Description     body body Order true order placed for purchasing the pet     Example responses\n  200 Response\n 1 2 3 4 5 6 7 8  { \u0026#34;id\u0026#34;: 0, \u0026#34;petId\u0026#34;: 0, \u0026#34;quantity\u0026#34;: 0, \u0026#34;shipDate\u0026#34;: \u0026#34;2020-02-26T13:11:40Z\u0026#34;, \u0026#34;status\u0026#34;: \u0026#34;placed\u0026#34;, \u0026#34;complete\u0026#34;: true }   1 2 3 4 5 6 7 8 9  \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34; ?\u0026gt; \u0026lt;Order\u0026gt; \u0026lt;id\u0026gt;0\u0026lt;/id\u0026gt; \u0026lt;petId\u0026gt;0\u0026lt;/petId\u0026gt; \u0026lt;quantity\u0026gt;0\u0026lt;/quantity\u0026gt; \u0026lt;shipDate\u0026gt;2020-02-26T13:11:40Z\u0026lt;/shipDate\u0026gt; \u0026lt;status\u0026gt;placed\u0026lt;/status\u0026gt; \u0026lt;complete\u0026gt;true\u0026lt;/complete\u0026gt; \u0026lt;/Order\u0026gt;   Responses    Status Meaning Description Schema     200 OK successful operation Order   400 Bad Request Invalid Order None    This operation does not require authentication  user Operations about user\nFind out more about our store\ngetUserByName \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;https://petstore.swagger.io/v2/user/{username}\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;GET\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;GET\u0026#34;, \u0026#34;https://petstore.swagger.io/v2/user/{username}\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   GET /user/{username}\nGet user by user name\nParameters    Name In Type Required Description     username path string true The name that needs to be fetched. Use user1 for testing.     Example responses\n  200 Response\n 1 2 3 4 5 6 7 8 9 10  { \u0026#34;id\u0026#34;: 0, \u0026#34;username\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;firstName\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;lastName\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;password\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;userStatus\u0026#34;: 0 }   1 2 3 4 5 6 7 8 9 10 11  \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34; ?\u0026gt; \u0026lt;User\u0026gt; \u0026lt;id\u0026gt;0\u0026lt;/id\u0026gt; \u0026lt;username\u0026gt;string\u0026lt;/username\u0026gt; \u0026lt;firstName\u0026gt;string\u0026lt;/firstName\u0026gt; \u0026lt;lastName\u0026gt;string\u0026lt;/lastName\u0026gt; \u0026lt;email\u0026gt;string\u0026lt;/email\u0026gt; \u0026lt;password\u0026gt;string\u0026lt;/password\u0026gt; \u0026lt;phone\u0026gt;string\u0026lt;/phone\u0026gt; \u0026lt;userStatus\u0026gt;0\u0026lt;/userStatus\u0026gt; \u0026lt;/User\u0026gt;   Responses    Status Meaning Description Schema     200 OK successful operation User   400 Bad Request Invalid username supplied None   404 Not Found User not found None    This operation does not require authentication  updateUser \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;https://petstore.swagger.io/v2/user/{username}\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;PUT\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Content-Type\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;PUT\u0026#34;, \u0026#34;https://petstore.swagger.io/v2/user/{username}\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   PUT /user/{username}\nUpdated user\nThis can only be done by the logged in user.\n Body parameter\n 1 2 3 4 5 6 7 8 9 10  { \u0026#34;id\u0026#34;: 0, \u0026#34;username\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;firstName\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;lastName\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;password\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;userStatus\u0026#34;: 0 }   Parameters    Name In Type Required Description     username path string true name that need to be updated   body body User true Updated user object    Responses    Status Meaning Description Schema     400 Bad Request Invalid user supplied None   404 Not Found User not found None    This operation does not require authentication  deleteUser \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;https://petstore.swagger.io/v2/user/{username}\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;DELETE\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;DELETE\u0026#34;, \u0026#34;https://petstore.swagger.io/v2/user/{username}\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   DELETE /user/{username}\nDelete user\nThis can only be done by the logged in user.\nParameters    Name In Type Required Description     username path string true The name that needs to be deleted    Responses    Status Meaning Description Schema     400 Bad Request Invalid username supplied None   404 Not Found User not found None    This operation does not require authentication  loginUser \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;https://petstore.swagger.io/v2/user/login?username=string\u0026amp;password=string\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;GET\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Accept\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;GET\u0026#34;, \u0026#34;https://petstore.swagger.io/v2/user/login\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   GET /user/login\nLogs user into the system\nParameters    Name In Type Required Description     username query string true The user name for login   password query string true The password for login in clear text     Example responses\n  200 Response\n 1  \u0026#34;string\u0026#34;   Responses    Status Meaning Description Schema     200 OK successful operation string   400 Bad Request Invalid username/password supplied None    Response Headers    Status Header Type Format Description     200 X-Expires-After string date-time date in UTC when token expires   200 X-Rate-Limit integer int32 calls per hour allowed by the user    This operation does not require authentication  logoutUser \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;https://petstore.swagger.io/v2/user/logout\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;GET\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;GET\u0026#34;, \u0026#34;https://petstore.swagger.io/v2/user/logout\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   GET /user/logout\nLogs out current logged in user session\nResponses    Status Meaning Description Schema     default Default successful operation None    This operation does not require authentication  createUser \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;https://petstore.swagger.io/v2/user\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;POST\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Content-Type\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;POST\u0026#34;, \u0026#34;https://petstore.swagger.io/v2/user\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   POST /user\nCreate user\nThis can only be done by the logged in user.\n Body parameter\n 1 2 3 4 5 6 7 8 9 10  { \u0026#34;id\u0026#34;: 0, \u0026#34;username\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;firstName\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;lastName\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;password\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;userStatus\u0026#34;: 0 }   Parameters    Name In Type Required Description     body body User true Created user object    Responses    Status Meaning Description Schema     default Default successful operation None    This operation does not require authentication  createUsersWithArrayInput \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;https://petstore.swagger.io/v2/user/createWithArray\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;POST\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Content-Type\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;POST\u0026#34;, \u0026#34;https://petstore.swagger.io/v2/user/createWithArray\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   POST /user/createWithArray\nCreates list of users with given input array\n Body parameter\n 1 2 3 4 5 6 7 8 9 10 11 12  [ { \u0026#34;id\u0026#34;: 0, \u0026#34;username\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;firstName\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;lastName\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;password\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;userStatus\u0026#34;: 0 } ]   Parameters    Name In Type Required Description     body body UserArray true List of user object    Responses    Status Meaning Description Schema     default Default successful operation None    This operation does not require authentication  createUsersWithListInput \n Code samples\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14  URL obj = new URL(\u0026#34;https://petstore.swagger.io/v2/user/createWithList\u0026#34;); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(\u0026#34;POST\u0026#34;); int responseCode = con.getResponseCode(); BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(response.toString());   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  package main import ( \u0026#34;bytes\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { headers := map[string][]string{ \u0026#34;Content-Type\u0026#34;: []string{\u0026#34;application/json\u0026#34;}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\u0026#34;POST\u0026#34;, \u0026#34;https://petstore.swagger.io/v2/user/createWithList\u0026#34;, data) req.Header = headers client := \u0026amp;http.Client{} resp, err := client.Do(req) // ... }   POST /user/createWithList\nCreates list of users with given input array\n Body parameter\n 1 2 3 4 5 6 7 8 9 10 11 12  [ { \u0026#34;id\u0026#34;: 0, \u0026#34;username\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;firstName\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;lastName\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;password\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;userStatus\u0026#34;: 0 } ]   Parameters    Name In Type Required Description     body body UserArray true List of user object    Responses    Status Meaning Description Schema     default Default successful operation None    This operation does not require authentication  Schemas Category \n1 2 3 4 5  { \u0026#34;id\u0026#34;: 0, \u0026#34;name\u0026#34;: \u0026#34;string\u0026#34; }   Properties    Name Type Required Restrictions Description     id integer(int64) false none none   name string false none none    Pet \n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  { \u0026#34;id\u0026#34;: 0, \u0026#34;category\u0026#34;: { \u0026#34;id\u0026#34;: 0, \u0026#34;name\u0026#34;: \u0026#34;string\u0026#34; }, \u0026#34;name\u0026#34;: \u0026#34;doggie\u0026#34;, \u0026#34;photoUrls\u0026#34;: [ \u0026#34;string\u0026#34; ], \u0026#34;tags\u0026#34;: [ { \u0026#34;id\u0026#34;: 0, \u0026#34;name\u0026#34;: \u0026#34;string\u0026#34; } ], \u0026#34;status\u0026#34;: \u0026#34;available\u0026#34; }   Properties    Name Type Required Restrictions Description     id integer(int64) false none none   category Category false none none   name string true none none   photoUrls [string] true none none   tags [Tag] false none none   status string false none pet status in the store    Enumerated Values    Property Value     status available   status pending   status sold    Tag \n1 2 3 4 5  { \u0026#34;id\u0026#34;: 0, \u0026#34;name\u0026#34;: \u0026#34;string\u0026#34; }   Properties    Name Type Required Restrictions Description     id integer(int64) false none none   name string false none none    ApiResponse \n1 2 3 4 5 6  { \u0026#34;code\u0026#34;: 0, \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;message\u0026#34;: \u0026#34;string\u0026#34; }   Properties    Name Type Required Restrictions Description     code integer(int32) false none none   type string false none none   message string false none none    Order \n1 2 3 4 5 6 7 8 9  { \u0026#34;id\u0026#34;: 0, \u0026#34;petId\u0026#34;: 0, \u0026#34;quantity\u0026#34;: 0, \u0026#34;shipDate\u0026#34;: \u0026#34;2020-02-26T13:11:40Z\u0026#34;, \u0026#34;status\u0026#34;: \u0026#34;placed\u0026#34;, \u0026#34;complete\u0026#34;: true }   Properties    Name Type Required Restrictions Description     id integer(int64) false none none   petId integer(int64) false none none   quantity integer(int32) false none none   shipDate string(date-time) false none none   status string false none Order Status   complete boolean false none none    Enumerated Values    Property Value     status placed   status approved   status delivered    User \n1 2 3 4 5 6 7 8 9 10 11  { \u0026#34;id\u0026#34;: 0, \u0026#34;username\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;firstName\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;lastName\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;password\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;userStatus\u0026#34;: 0 }   Properties    Name Type Required Restrictions Description     id integer(int64) false none none   username string false none none   firstName string false none none   lastName string false none none   email string false none none   password string false none none   phone string false none none   userStatus integer(int32) false none User Status    ","description":"","id":28,"section":"docs","tags":null,"title":"Swagger Petstore 2","uri":"/es/docs/apis/petstore2/"}]